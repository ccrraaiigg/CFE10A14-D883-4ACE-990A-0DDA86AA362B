'From Pharo3.0 of 18 March 2013 [Latest update: #30841] on 29 April 2014 at 12:30:26.618664 pm'!----STARTUP----2014-04-29T12:29:46.011042+02:00 as /Users/denker/Desktop/30841/Pharo-30841.image!----QUIT----2014-04-29T12:30:29.564372+02:00 Pharo-30841.image priorSource: 0!----STARTUP----2014-04-29T12:30:44.676632+02:00 as /Users/denker/Desktop/30841/Pharo-30841.image!----QUIT----2014-04-29T12:31:00.983451+02:00 Pharo-30841.image priorSource: 197!----STARTUP----2014-04-29T12:40:57.02195+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 4/29/2014 12:39' prior: 52726330!commentForCurrentUpdate ^ '- fix direct links to sources file in image'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 4/29/2014 12:39'!script104	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.71.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-MarcusDenker.728.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.360.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.424.mczSlotTests-MarcusDenker.87.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-MarcusDenker.639.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 4/29/2014 12:39'!update30842	"self new update30842"	self withUpdateLog: '- fix direct links to sources file in image'.	self loadTogether: self script104 merge: false.	self flushCaches.! !"ScriptLoader30"!!ZnClientTests methodsFor: 'testing' stamp: 'MarcusDenker 4/29/2014 12:38' prior: 59056542!testProgress	"[ :bar |		bar title: 'Downloading Sources...'.		[			ZnClient new 				url: 'http://files.pharo.org/sources/PharoV30.sources'; 				signalProgress: true;					downloadTo: FileLocator temp ]			on: HTTPProgress 			do: [ :progress |				progress isEmpty ifFalse: [ bar current: progress percentage ]. 				progress resume ] ] asJob run."			self 		should: [ 			ZnClient new				beOneShot;				signalProgress: true;				get: 'http://zn.stfx.eu/zn/small.html' ] 		raise: HTTPProgress! !!SmalltalkImage methodsFor: '*Zinc-System-Support' stamp: 'MarcusDenker 4/29/2014 12:38' prior: 53545406!downloadSources	"Try downloading the sources file from 2 different locations to the shared directory.	Be silent when this does not work: a missing sources will be triggered later on.	For now, use the VM directory."		| sharedDirectory |	self shouldDownloadSourcesFile ifFalse: [ ^ self ].	sharedDirectory := self vmDirectory.	self sourcesDownloadClient		url: 'http://files.pharo.org/sources/PharoV30.sources';		downloadTo: sharedDirectory;		close.	(sharedDirectory / self sourcesFile basename) exists		ifTrue: [ ^ self ].	self sourcesDownloadClient		url: 'http://stfx.eu/PharoV30.sources';		downloadTo: sharedDirectory;		close.					! !"Zinc-System-Support"!"Zinc-Tests"!----End fileIn----!----QUIT----2014-04-29T12:40:59.00638+02:00 Pharo.image priorSource: 377!----STARTUP----2014-04-29T12:40:59.191645+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-04-29T12:41:03.453641+02:00 Pharo.image priorSource: 13764!----STARTUP----2014-04-29T12:47:47.241618+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-04-29T12:47:47.397619+02:00 Pharo-30842.image priorSource: 13955!----STARTUP----2014-04-29T13:00:54.923393+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 4/29/2014 12:59' prior: 33555097!commentForCurrentUpdate ^ '- cut MC history. Saves 5MB image size'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 4/29/2014 12:59'!script105	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.71.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-MarcusDenker.728.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.360.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.424.mczSlotTests-MarcusDenker.87.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-MarcusDenker.639.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 4/29/2014 12:59'!update30843	"self new update30843"	self withUpdateLog: '- cut MC history. Saves 5MB image size'.	self loadTogether: self script105 merge: false.	MCWorkingCopy allManagers do:  [ :each |     each ancestry ancestors do:  [  :eachAncestor |         eachAncestor instVarNamed: 'ancestors' put: nil ] ].	self flushCaches.! !"ScriptLoader30"!----End fileIn----!----QUIT----2014-04-29T13:00:56.158057+02:00 Pharo.image priorSource: 14149!----STARTUP----2014-04-29T13:00:56.292831+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-04-29T13:00:59.96883+02:00 Pharo.image priorSource: 26292!----STARTUP----2014-04-29T13:09:00.328798+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-04-29T13:09:00.484798+02:00 Pharo-30843.image priorSource: 26486!----STARTUP----2014-04-29T14:59:55.888738+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 4/29/2014 14:58' prior: 33568876!commentForCurrentUpdate ^ '13028 Adding ClassVariables corrupts class hierarchy	https://pharo.fogbugz.com/f/cases/13028'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 4/29/2014 14:58'!script106	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.71.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-MarcusDenker.728.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.360.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-MarcusDenker.639.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 4/29/2014 14:58'!update30844	"self new update30844"	self withUpdateLog: '13028 Adding ClassVariables corrupts class hierarchy	https://pharo.fogbugz.com/f/cases/13028'.	self loadTogether: self script106 merge: false.	self flushCaches.! !"ScriptLoader30"!!SlotClassBuilder methodsFor: 'private' stamp: 'MartinDias 4/29/2014 12:39' prior: 53321361!applyAndUpdateSharedVariableOrSharedPool: classModification	^ self track: classModification during: [ :old :new |		installer sharedVariableOrSharedPoolChangedFrom: old to:  new by: classModification ].! !!SlotClassBuilder methodsFor: 'deprecated' stamp: 'MartinDias 1/28/2014 18:43' prior: 53329188!client: anInstaller	"deprecated"		installer := anInstaller! !!PharoClassInstaller methodsFor: 'notifications' stamp: 'MartinDias 4/29/2014 13:48'!sharedVariableOrSharedPoolChangedFrom: oldClass to: newClass by: classModification 	self 		classDefinitionChangedFrom: oldClass 		to: newClass 		by: classModification.		"Adopt sub-hierarchies. No need to propagate the modification to them."	oldClass subclasses do: [ :each | 		each superclass: newClass.		newClass addSubclass: each ]! !!SlotMigrationTest methodsFor: 'tests' stamp: 'MartinDias 4/29/2014 12:18'!testAddSharedVariableKeepSubclasses	"Reproduces fogbugz case 13028"	"Define original hierarchy"	aClass := self make: [ :builder |		builder 			name: self aClassName;			superclass: Object ]. 	anotherClass := self make: [ :builder |		builder 			name: self anotherClassName;			superclass: aClass ].	self assert: aClass subclasses size equals: 1.	self assert: aClass subclasses anyOne == anotherClass.	"Add a shared variable"	aClass := self make: [ :builder |		builder 			name: self aClassName;			superclass: Object;			sharedVariables: 'Var' ]. 		self assert: aClass subclasses size equals: 1.	self assert: aClass subclasses anyOne == anotherClass.! !!SlotMigrationTest methodsFor: 'tests' stamp: 'MartinDias 4/29/2014 12:27'!testChangeSuperclass	"Define original hierarchy"	aClass := self make: [ :builder |		builder 			name: self aClassName;			superclass: Object ]. 	anotherClass := self make: [ :builder |		builder 			name: self anotherClassName;			superclass: aClass ].	self assert: aClass subclasses size equals: 1.	self assert: aClass subclasses anyOne == anotherClass.	self assert: anotherClass superclass == aClass.	"Change to a new superclass"	yetAnotherClass := self make: [ :builder |		builder 			name: self yetAnotherClassName;			superclass: Object ]. 	anotherClass := self make: [ :builder |		builder 			name: self anotherClassName;			superclass: yetAnotherClass ]. 		self assert: aClass subclasses isEmpty.	self assert: yetAnotherClass subclasses size equals: 1.	self assert: yetAnotherClass subclasses anyOne == anotherClass.	self assert: anotherClass superclass == yetAnotherClass.! !"Slot"!"SlotTests"!----End fileIn----!----QUIT----2014-04-29T14:59:57.909241+02:00 Pharo.image priorSource: 26679!----STARTUP----2014-04-29T14:59:58.055809+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-04-29T15:00:01.849804+02:00 Pharo.image priorSource: 41424!----STARTUP----2014-04-29T15:07:48.572804+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-04-29T15:07:48.722803+02:00 Pharo-30844.image priorSource: 41618!----STARTUP----2014-04-29T15:29:54.822698+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 4/29/2014 15:27' prior: 33581406!commentForCurrentUpdate ^ '- workspace- cleanups'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 4/29/2014 15:27'!script107	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.71.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-MarcusDenker.728.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.360.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-MarcusDenker.639.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 4/29/2014 15:28'!update30845	"self new update30845"	self withUpdateLog: '- workspace- cleanups'.	self loadTogether: self script107 merge: false.		ScriptLoader resetLogStream.MCWorkingCopy allManagers do:  [ :each |     each ancestry ancestors do:  [  :eachAncestor |         eachAncestor instVarNamed: 'ancestors' put: nil ] ].[ | workspace window |		workspace := Workspace openContents:'"Pharo 3.0=======Welcome to Pharo, a clean, innovative, free, and open-source Smalltalk-inspired environment.You can learn pharo by executing:"PharoTutorial go."Pharo 3.0 comes with a whole set of packages you can use to explore the system and develop your own applications. But maybe you need other stuff or feel more comfortable using a tool you already know. To easily load projects, you can open the Configurations Browser by executing:"MetacelloConfigurationBrowser open."You can also open the World menu (just click the desktop) and go to Tools, then Configuration Browser.You can find information about Pharo on http://www.pharo.org. In particular, you may be interested in:- Joining us and getting help http://www.pharo.org/get-help- Getting the Pharo By Example book (available as a free PDF): http://www.pharobyexample.org- Browser the documentation http://www.pharo.org/documentation- Reporting problems http://www.pharo.org/get-involvedAbout this release---------------------------There are more than 2300 issues treated in this release. Sumarized issues for 3.0:=========================UI--- New theme and iconset.Infrastructure--------------- Zeroconf scripts updated- Ubuntu ppa- Better [ackaging for standard download- Enhanced continuous integration infrastructureKernel------- Opal Compiler replaces old compiler- Continuation class now part of the core- Simple delayed execution for blocks- Announcement usage simplifiedMore------ New debugger- New inspectors- New code importer- New class builderAnd a lot more!!You can check a more detailed explanation here: https://github.com/pharo-project/pharo-changelogs/blob/master/Pharo30ChangeLogs.md"'	label: 'Welcome to Pharo 3.0!!'.	window := workspace dependents detect: [ :each | 		(each isKindOf: SystemWindow) and: [ each label = 'Welcome to Pharo 3.0!!' ] ].	window extent: 700@400.window center: Display extent / 2  ] value.			self flushCaches.! !"ScriptLoader30"!----End fileIn----!----QUIT----2014-04-29T15:29:56.269733+02:00 Pharo.image priorSource: 41812!----STARTUP----2014-04-29T15:29:56.422704+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-04-29T15:30:00.652695+02:00 Pharo.image priorSource: 55989!----STARTUP----2014-04-29T16:36:32.460567+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-04-29T16:36:32.616569+02:00 Pharo-30845.image priorSource: 56183!----STARTUP----2014-04-30T13:06:57.344458+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 4/30/2014 13:02' prior: 33596539!commentForCurrentUpdate ^ '13236 Fix 1 extra height for Cairo surface	https://pharo.fogbugz.com/f/cases/13236'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 4/30/2014 13:02'!script108	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-MarcusDenker.728.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.360.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-MarcusDenker.639.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 4/30/2014 13:04'!update30846	"self new update30846"	self withUpdateLog: '13236 Fix 1 extra height for Cairo surface	https://pharo.fogbugz.com/f/cases/13236'.	self loadTogether: self script108 merge: false.	(World submorphs 	detect: [ :each | 		(each isKindOf: SystemWindow) and: [ each label =  'Welcome to Pharo 3.0!!' ] ])	delete.	[ | workspace window |		workspace := Workspace openContents: '"Pharo 3.0=======Welcome to Pharo, an immersive live programming environment.You can learn pharo by highlighting the next line and selecting [Do it] from the context menu:"PharoTutorial go."Pharo 3.0 comes with a whole set of packages you can use to explore the system and develop your own applications. But maybe you need other stuff or feel more comfortable using a tool you already know. To easily load projects, you can open the Configurations Browser by executing:"MetacelloConfigurationBrowser open."You can also open the World menu (just click the desktop) and go to Tools, then Configuration Browser.You can find information about Pharo on http://www.pharo.org. In particular, you may be interested in:- Joining us and getting help http://www.pharo.org/get-help- Getting the Pharo By Example book (available as a free PDF): http://www.pharobyexample.org- Browser the documentation http://www.pharo.org/documentation- Reporting problems http://www.pharo.org/get-involvedAbout this release---------------------------There are more than 2300 issues treated in this release. Sumarized issues for 3.0:=========================UI--- New theme and iconset.Infrastructure--------------- Zeroconf scripts updated- Ubuntu ppa- Better [ackaging for standard download- Enhanced continuous integration infrastructureKernel------- Opal Compiler replaces old compiler- Continuation class now part of the core- Simple delayed execution for blocks- Announcement usage simplifiedMore------ New debugger- New inspectors- New code importer- New class builderAnd a lot more!!You can check a more detailed explanation here: https://github.com/pharo-project/pharo-changelogs/blob/master/Pharo30ChangeLogs.md"'	label: 'Welcome to Pharo 3.0!!'.	window := workspace dependents detect: [ :each | 		(each isKindOf: SystemWindow) and: [ each label = 'Welcome to Pharo 3.0!!' ] ].	window extent: 700@400.window center: Display extent / 2  ] value.	self flushCaches.! !"ScriptLoader30"!!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!AthensCairoSurface commentStamp: 'IgorStasenko 4/29/2014 17:05' prior: 18038621!i am a concrete implementation of Athens surface which using cairo graphics library for rendering.Cairo library, by itself can have multiple surface types.This class uses image surface (a bitmap located in system memory) and maps to cairo_image_surface_t* C type.**NOTE**As a workaround of bitblt bug, the actual Cairo surfaces, created internally is with 1 extra pixel higher than requested. This is, however completely hidden from users.!!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!AthensCairoSurface commentStamp: 'IgorStasenko 4/29/2014 17:05' prior: 33625217!i am a concrete implementation of Athens surface which using cairo graphics library for rendering.Cairo library, by itself can have multiple surface types.This class uses image surface (a bitmap located in system memory) and maps to cairo_image_surface_t* C type.**NOTE**As a workaround of bitblt bug, the actual Cairo surfaces, created internally is with 1 extra pixel higher than requested. This is, however completely hidden from users.!!AthensCairoSurface class methodsFor: 'instance creation' stamp: 'IgorStasenko 4/29/2014 17:00' prior: 18057373!extent: anExtent format: aFormat	^ ( self primImage: aFormat width: anExtent x height: anExtent y + 1) initialize! !!AthensCairoSurface class methodsFor: 'instance creation' stamp: 'IgorStasenko 4/29/2014 17:00' prior: 18063496!width: aWidth height: aHeight	^ (self primWidth: aWidth height: aHeight+1) initialize! !!AthensCairoSurface methodsFor: 'accessing' stamp: 'IgorStasenko 4/29/2014 16:59' prior: 18040215!height		^self privateHeight - 1! !!AthensCairoSurface methodsFor: 'private' stamp: 'IgorStasenko 4/29/2014 16:59'!privateHeight	<primitive: #primitiveNativeCall module: #NativeBoostPlugin>		^self nbCall: #(		int cairo_image_surface_get_height ( self ) )! !"Athens-Cairo"!----End fileIn----!----QUIT----2014-04-30T13:06:59.142973+02:00 Pharo.image priorSource: 56377!----STARTUP----2014-04-30T13:06:59.28117+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-04-30T13:07:03.315169+02:00 Pharo.image priorSource: 72679!----STARTUP----2014-04-30T13:14:09.780771+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-04-30T13:14:09.93077+02:00 Pharo-30846.image priorSource: 72872!----STARTUP----2014-05-07T17:25:48.770811+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'EstebanLorenzano 5/7/2014 17:23' prior: 33611104!commentForCurrentUpdate ^ '13247 copying a class also copies his comment	https://pharo.fogbugz.com/f/cases/1324713241 switching between package and  hierarchy view loses tag selection	https://pharo.fogbugz.com/f/cases/13241'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'EstebanLorenzano 5/7/2014 17:23'!script109	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.360.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'EstebanLorenzano 5/7/2014 17:23'!update30847	"self new update30847"	self withUpdateLog: '13247 copying a class also copies his comment	https://pharo.fogbugz.com/f/cases/1324713241 switching between package and  hierarchy view loses tag selection	https://pharo.fogbugz.com/f/cases/13241'.	self loadTogether: self script109 merge: false.	self flushCaches.! !"ScriptLoader30"!!Nautilus methodsFor: 'initialization' stamp: 'EstebanLorenzano 11/20/2013 16:28' prior: 30178654!initialize	super initialize.	plugins := OrderedCollection new.	self class pluginClasses do: [:each || class position |		class := each first.		position := each second.		plugins add: ((class model: self) position: position; yourself)]! !!Nautilus methodsFor: 'browser compatibility' stamp: 'EstebanLorenzano 11/20/2013 16:18' prior: 30179858!spawnHierarchy 	self 		showHierarchy: true;		open.	self ui showPackages: false! !!MultipleMethodsEditor methodsFor: 'initialization' stamp: 'EstebanLorenzano 10/16/2013 09:22' prior: 29423332!initialize	super initialize.	self changeProportionalLayout.	"self color: Color white."	lock := false.	buttonsContainer := PanelMorph new							changeTableLayout;							listDirection: #rightToLeft;							hResizing: #spaceFill;							vResizing: #spaceFill;							yourself.								editors := OrderedCollection new.	container := self newProportionalPanelMorph.						self updateLayoutForSingle! !!MultipleMethodsEditor methodsFor: 'updating' stamp: 'EstebanLorenzano 11/20/2013 14:20' prior: 29421233!updateLayoutForSingle	current ifNil: [ ^ self ].	self 		addMorph: current		fullFrame: LayoutFrame identity.						"current color: Color white."! !!MultipleMethodsEditor methodsFor: 'updating' stamp: 'EstebanLorenzano 4/29/2014 11:26' prior: 29429948!updateLayoutForSingleWithButtons	current ifNil: [ ^ self ].		self 		addMorph: current		fullFrame: (LayoutFrame identity 						bottomOffset: -25).					self 		addMorph: buttonsContainer		fullFrame: ((0@1 corner: 1@1) asLayoutFrame 						topOffset: -25).	"current color: Color white."! !!NautilusUI methodsFor: 'displaying' stamp: 'EstebanLorenzano 4/30/2014 09:22' prior: 30331589!addAll: aWindow	| topHeight middleHeight bottomMorph bottomHeight delta |		delta := 0.	bottomHeight := 0.	middleHeight := 0.	topHeight := 0.	" reverse order in column ..."	"column vResizing: #rigid."	self buildTopPlugins ifNotNil: [:top |		topHeight := top height.		aWindow 			addMorph: top			fullFrame: ((0 @ 0 corner: 1 @ 0) asLayoutFrame bottomOffset: topHeight).		delta := 4.		topHeight := topHeight + delta.		top color: Color transparent].		"navigationRow := self buildNavigationRow: aWindow height: topHeight."	self buildColumns: aWindow height: topHeight"+navigationRow".	self setShortcuts: #NautilusSourceCodeShortcuts to: aWindow.		self buildMiddlePlugins ifNotNil: [:middle |		middleHeight := middle height+4.		aWindow 			addMorph: middle			fullFrame: ((0 @ 0.5 corner: 1 @ 0.5) asLayoutFrame bottomOffset: middleHeight).		middle color: Color transparent].		sourceCodePanel := PanelMorph new.	self setShortcuts: #NautilusSourceCodeShortcuts to: sourceCodePanel.	sourceCodePanel changeProportionalLayout.			sourceCodePanel 		addMorph: self buildCodePane		fullFrame: LayoutFrame identity.			"self buildCommentPane."	sourceCodePanel 		hResizing: #spaceFill;		vResizing: #spaceFill.	sourceCodeContainer := PanelMorph new.	self setShortcuts: #NautilusSourceCodeShortcuts to: sourceCodeContainer.	sourceCodeContainer 		changeTableLayout;		listDirection: #leftToRight.	{	sourceCodePanel.		self buildTextAreaButtonsColumn: aWindow} reverse do: [:each | sourceCodeContainer addMorph: each].		bottomMorph := self buildBottomPlugins.		bottomMorph ifNotNil: [:bottom | bottomHeight := bottom height + 8].	aWindow		addMorph: sourceCodeContainer		fullFrame: ( (0@0.5 corner: 1 @ 1) asLayoutFrame 						topOffset: middleHeight;  bottomOffset: bottomHeight negated).							bottomMorph ifNotNil: [:bottom |							aWindow							addMorph: bottom			fullFrame: ((0 @ 1 corner: 1 @ 1) asLayoutFrame topOffset:  bottomHeight negated).		bottom color: Color transparent]! !!TClass methodsFor: 'copying' stamp: 'EstebanLorenzano 5/6/2014 14:12' prior: 59694817!duplicateClassWithNewName: aSymbol	| copysName class newDefinition |	copysName := aSymbol asSymbol.	copysName = self name		ifTrue: [ ^ self ].	(Smalltalk globals includesKey: copysName)		ifTrue: [ ^ self error: copysName , ' already exists' ].	newDefinition := self definition copyReplaceAll: '#' , self name asString with: '#' , copysName asString.	class := self class compiler source: newDefinition; logged: true; evaluate.	class classSide instanceVariableNames: self classSide instanceVariablesString.	class copyAllCategoriesFrom: self.	class class copyAllCategoriesFrom: self class.	^ class! !!PackageTreeNautilusUI methodsFor: 'private' stamp: 'EstebanLorenzano 5/7/2014 17:16'!selectPackageFor: aClass	"I'm called to properly select a class pache/tag.	 Since we are showing root tags as packages when their are the only ones, we need to determine 	 if we are going to select the package or the tag..."	| package tag |		package := aClass package.	tag := package classTagForClass: aClass.	self selectedPackage: ((tag isRoot and: [ package classTags size = 1 ])		ifTrue: [ tag package ]		ifFalse: [ tag ])	! !!PackageTreeNautilusUI methodsFor: 'accessing' stamp: 'EstebanLorenzano 5/4/2014 13:43' prior: 32206942!showPackages: aBoolean	self okToChange ifFalse: [ ^ nil ].	list enabled: aBoolean.	aBoolean ifFalse: [ self basicShowHierarchy ].			listElements := nil.	list2Elements := nil.		"If showPackages false(Hierarchy)-->true(Flat) then selected package needs to synch to that of selected class"	(aBoolean and: [ self model showPackages not ]) 		ifTrue: [			self model showPackages: aBoolean.			self selectPackageFor: self selectedClass ] 		ifFalse: [ 				self model showPackages: aBoolean ].	self changed: #groupsButtonLabel.	self updateClassView.	self changed: #toggleButtonState.	self changed: #toggleButtonLabel.	self changedLabels.! !!AbstractNautilusUI methodsFor: 'item creation' stamp: 'EstebanLorenzano 4/29/2014 11:27' prior: 17418318!buildCommentPane	commentTextArea := PluggableTextMorph		on: self		text: #getComments		accept: #addComment:notifying:		readSelection: nil		menu: #codePaneMenu:shifted:.			"commentTextArea color: Color white."	commentTextArea		askBeforeDiscardingEdits: true;		vResizing: #spaceFill;		hResizing: #spaceFill.		self setCommentShorcutsTo: commentTextArea.		commentTextArea spaceFillWeight: 1.	^ commentTextArea! !!AbstractNautilusUI methodsFor: 'source code area' stamp: 'EstebanLorenzano 10/16/2013 09:21' prior: 17496153!buildNewSourceTextArea	sourceTextArea := self textMorphClass				on: self				text: #sourceCodeFrom:				accept: #compileSource:notifying:				readSelection: #contentsSelectionFrom:				menu: #sourceCodeMenu:shifted:.					sourceTextArea		askBeforeDiscardingEdits: true;		"color: Color white;"		lockSelector: #lockTextArea:from:;		canLockChangeSelector: #canChangeLockFor:;		vResizing: #spaceFill;		hResizing: #spaceFill; 		font: StandardFonts codeFont;		spaceFillWeight: 3;		on: #keyStroke send: #keyStroke:fromSourceCodeMorph: to: self;		warningLimit: self warningLimit.			self setSourceCodeShorcutsTo: sourceTextArea.			sourceTextAreaLimit := sourceTextArea warningLimit.		sourceTextArea warningLimit: -1.	sourceTextAreas addFirst: (sourceTextArea -> nil).		^ sourceTextArea ! !!AbstractNautilusUI methodsFor: 'displaying' stamp: 'EstebanLorenzano 4/30/2014 11:54' prior: 17446520!open	window := NautilusWindow new model: self.	self addAll: window.	window openInWorld.	self changed:#sourceCodeFrom:.	self setWindowTitle.! !!Trait method!duplicateClassWithNewName: aSymbol	| copysName class newDefinition |	copysName := aSymbol asSymbol.	copysName = self name		ifTrue: [ ^ self ].	(Smalltalk globals includesKey: copysName)		ifTrue: [ ^ self error: copysName , ' already exists' ].	newDefinition := self definition copyReplaceAll: '#' , self name asString with: '#' , copysName asString.	class := self class compiler source: newDefinition; logged: true; evaluate.	class classSide instanceVariableNames: self classSide instanceVariablesString.	class copyAllCategoriesFrom: self.	class class copyAllCategoriesFrom: self class.	^ class! !!Trait method!duplicateClassWithNewName: aSymbol	| copysName class newDefinition |	copysName := aSymbol asSymbol.	copysName = self name		ifTrue: [ ^ self ].	(Smalltalk globals includesKey: copysName)		ifTrue: [ ^ self error: copysName , ' already exists' ].	newDefinition := self definition copyReplaceAll: '#' , self name asString with: '#' , copysName asString.	class := self class compiler source: newDefinition; logged: true; evaluate.	class classSide instanceVariableNames: self classSide instanceVariablesString.	class copyAllCategoriesFrom: self.	class class copyAllCategoriesFrom: self class.	^ class! !"Nautilus"!"Traits"!----End fileIn----!----QUIT----2014-05-07T17:25:51.689142+02:00 Pharo.image priorSource: 73066!----STARTUP----2014-05-07T17:25:51.838726+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-05-07T17:25:55.912717+02:00 Pharo.image priorSource: 94186!----STARTUP----2014-05-07T17:32:48.004071+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-05-07T17:32:48.15407+02:00 Pharo-30847.image priorSource: 94380!----STARTUP----2014-05-14T14:51:06.101876+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'EstebanLorenzano 5/14/2014 14:06' prior: 33627795!commentForCurrentUpdate ^ '13261 rpackage renameTo: is renaming all classes, not just defined ones	https://pharo.fogbugz.com/f/cases/13261'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'EstebanLorenzano 5/14/2014 14:06'!script110	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.303.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'EstebanLorenzano 5/14/2014 14:06'!update30848	"self new update30848"	self withUpdateLog: '13261 rpackage renameTo: is renaming all classes, not just defined ones	https://pharo.fogbugz.com/f/cases/13261'.	self loadTogether: self script110 merge: false.	self flushCaches.! !"ScriptLoader30"!!RPackage methodsFor: 'accessing' stamp: 'EstebanLorenzano 5/13/2014 20:15' prior: 51711580!renameTo: aSymbol	| oldName newName oldCategoryNames |	oldName := self name.	newName := aSymbol asSymbol.		(self organizer includesPackageNamed: aSymbol)		ifTrue: [ RPackageConflictError  signal: ('A package named {1} already exists' format: { aSymbol }) ].	oldCategoryNames  := (self classTags collect: #categoryName as: Set) 		add: self categoryName;		yourself.	self name: aSymbol.	SystemAnnouncer uniqueInstance suspendAllWhile: [		self definedClasses do: [ :each | each category: newName, (each category allButFirst: oldName size) ].		oldCategoryNames do: [ :each | SystemOrganizer default removeCategory: each ] ].	self renameTagsPrefixedWith: oldName to: newName. 	self renameExtensionsPrefixedWith: oldName to: newName.				self organizer 		basicUnregisterPackageNamed: oldName;		basicRegisterPackage: self.		SystemAnnouncer uniqueInstance 		announce: (RPackageRenamed 			to: self 			oldName: oldName 			newName: newName).! !"RPackage-Core"!----End fileIn----!----QUIT----2014-05-14T14:51:07.806443+02:00 Pharo.image priorSource: 94574!----STARTUP----2014-05-14T14:51:07.959182+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-05-14T14:51:11.777175+02:00 Pharo.image priorSource: 107801!----STARTUP----2014-05-14T14:58:12.315005+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-05-14T14:58:12.473009+02:00 Pharo-30848.image priorSource: 107995!----STARTUP----2014-06-11T17:29:47.451249+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 6/11/2014 17:27' prior: 33649304!commentForCurrentUpdate ^ '13321 findSubstringViaPrimitive: key in: body startingAt: start matchTable: matchTable do not rely to correct character in source.	https://pharo.fogbugz.com/f/cases/13321'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 6/11/2014 17:27'!script111	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.306.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.36.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 6/11/2014 17:27'!update30849	"self new update30849"	self withUpdateLog: '13321 findSubstringViaPrimitive: key in: body startingAt: start matchTable: matchTable do not rely to correct character in source.	https://pharo.fogbugz.com/f/cases/13321'.	self loadTogether: self script111 merge: false.	self flushCaches.! !"ScriptLoader30"!!String methodsFor: 'comparing' stamp: 'jeanbaptistearnaud 6/11/2014 17:16' prior: 54694369!findSubstringViaPrimitive: key in: body startingAt: start matchTable: matchTable	"Answer the index in the string body at which the substring key first occurs, at or beyond start.  The match is determined using matchTable, which can be used to effect, eg, case-insensitive matches.  If no match is found, zero will be returned.	The algorithm below is not optimum -- it is intended to be translated to C which will go so fast that it wont matter."	| index |	<primitive: 'primitiveFindSubstring' module: 'MiscPrimitivePlugin'>	<var: #key declareC: 'unsigned char *key'>	<var: #body  declareC: 'unsigned char *body'>	<var: #matchTable declareC: 'unsigned char *matchTable'>		key size = 0 ifTrue: [^ 0].	start to: body size - key size + 1 do:		[:startIndex |		index := 1.			[(matchTable at: (body at: startIndex+index-1) asciiValue + 1)				= (matchTable at: (key at: index) asciiValue + 1)]				whileTrue:				[index = key size ifTrue: [^ startIndex].				index := index+1]].	^ 0"' ' findSubstring: 'abc' in: 'abcdefabcd' startingAt: 1 matchTable: CaseSensitiveOrder 1' ' findSubstring: 'abc' in: 'abcdefabcd' startingAt: 2 matchTable: CaseSensitiveOrder 7' ' findSubstring: 'abc' in: 'abcdefabcd' startingAt: 8 matchTable: CaseSensitiveOrder 0' ' findSubstring: 'abc' in: 'abcdefABcd' startingAt: 2 matchTable: CaseSensitiveOrder 0' ' findSubstring: 'abc' in: 'abcdefABcd' startingAt: 2 matchTable: CaseInsensitiveOrder 7"! !"Collections-Strings"!----End fileIn----!----QUIT----2014-06-11T17:29:49.241403+02:00 Pharo.image priorSource: 108190!----STARTUP----2014-06-11T17:29:49.385934+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-06-11T17:29:53.353927+02:00 Pharo.image priorSource: 122017!----STARTUP----2014-06-11T17:36:34.930703+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-06-11T17:36:35.154699+02:00 Pharo-30849.image priorSource: 122212!----STARTUP----2014-06-24T09:20:46.76172+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 6/24/2014 09:18' prior: 33662918!commentForCurrentUpdate ^ '13349 PackPort to 3: 11987 Launching ProfStef should not require initials	https://pharo.fogbugz.com/f/cases/13349'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 6/24/2014 09:18'!script112	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.306.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.155.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.79.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.287.mczMorphic-Core-MarcusDenker.48.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.78.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 6/24/2014 09:18'!update30850	"self new update30850"	self withUpdateLog: '13349 PackPort to 3: 11987 Launching ProfStef should not require initials	https://pharo.fogbugz.com/f/cases/13349'.	self loadTogether: self script112 merge: false.	self flushCaches.! !"ScriptLoader30"!!PharoSyntaxTutorial methodsFor: 'interactive' stamp: 'MarcusDenker 6/19/2014 13:34' prior: 32562546!prepareDebuggerExample	Author fullName: 'AutoGenTutorial'.	self class compileSilently: 'divideTwoByZero	2/0.		"Oups!! 2/0 raises a ZeroDivide exception.  So the debugger opens to let you fix the code.		- Remove the line of code above.	- Right-click and select ''Accept'' to compile the new version of the method	- click the button ''Proceed'' to continue execution.	".	PharoTutorial next. '		classified: 'interactive'.	Author reset.! !"ProfStef-Core"!----End fileIn----!----QUIT----2014-06-24T09:20:48.41227+02:00 Pharo.image priorSource: 122407!----STARTUP----2014-06-24T09:20:48.559906+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-06-24T09:20:52.3859+02:00 Pharo.image priorSource: 135127!----STARTUP----2014-06-24T09:27:53.067444+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-06-24T09:27:53.227445+02:00 Pharo-30850.image priorSource: 135321!----STARTUP----2014-07-02T11:40:47.931037+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 7/2/2014 11:35' prior: 33677134!commentForCurrentUpdate ^ '13422 Image crashes because an open Nautilus browser hangs onto many objects while code is being loaded	https://pharo.fogbugz.com/f/cases/1342213405 Get support for temporary files (backport)	https://pharo.fogbugz.com/f/cases/13405	13452 Backport Pharo3: Issue 13415 Smalltalk resetTools breaks keybindings	https://pharo.fogbugz.com/f/cases/13452'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 7/2/2014 11:35'!script113	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.306.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.289.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.82.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 7/2/2014 11:35'!update30851	"self new update30851"	self withUpdateLog: '13422 Image crashes because an open Nautilus browser hangs onto many objects while code is being loaded	https://pharo.fogbugz.com/f/cases/1342213405 Get support for temporary files (backport)	https://pharo.fogbugz.com/f/cases/13405	13452 Backport Pharo3: Issue 13415 Smalltalk resetTools breaks keybindings	https://pharo.fogbugz.com/f/cases/13452'.	self loadTogether: self script113 merge: false.	self flushCaches.! !"ScriptLoader30"!!MorphTreeMorphTests commentStamp: '<historical>' prior: 0!A MorphTreeMorphTests tests aspects of a MorphTreeMorph!!FileReferenceTest methodsFor: 'tests' stamp: 'ChristopheDemarey 6/25/2014 16:34'!testTempFilePrefixSuffix	| fileRef |	fileRef := FileReference newTempFilePrefix: 'FileReference' suffix: 'Test'.	self assert: (fileRef isKindOf: FileReference).	self assert: fileRef exists not.! !!MorphicShortcutHandler class methodsFor: 'tools' stamp: 'MarcusDenker 7/2/2014 10:09' prior: 29244521!registerToolsOn: aToolRegistry	"commente out as Smalltalk resetTools might register this handler and break keybindings"	"aToolRegistry register: self new as: #shortcuts"! !!MorphTreeMorph methodsFor: 'updating' stamp: 'ThierryGoubier 6/30/2014 20:24' prior: 29046606!updateContentsWithPreviouslyExpanded: aNodeList	"Make sure we notice the removal of the contained nodes."	nodeList := nil.	self noteRemovalOfAll: self allNodeMorphs.	"<-- Changed"	(self nodeList isNil or: [ self nodeList isEmpty ])		ifTrue: [ 			nodeList := nil.			^ self emptySelection ].	self addSubmorphsFromNodeList: self currentNodelist previouslyExpanded: aNodeList! !!FileReference class methodsFor: 'instance creation' stamp: 'ChristopheDemarey 6/25/2014 16:36'!newTempFilePrefix: prefix suffix: suffix	| tmpDir random fileName |		tmpDir := FileLocator temp asFileReference.	[ random := UUIDGenerator default generateRandomBitsOfLength: 100.	fileName := prefix , random asString, suffix ] doWhileTrue: [ (tmpDir / fileName) exists ].	^ fileName asFileReference! !!MorphTreeMorphTests commentStamp: '<historical>' prior: 33702612!A MorphTreeMorphTests tests aspects of a MorphTreeMorph!!MorphTreeMorphTests methodsFor: 'as yet unclassified' stamp: 'ThierryGoubier 6/30/2014 19:46'!testLeakingSelectionsOnUpdate	"Test that selected morphs are forgotten on update."	| c w t |	c := ClassTreeExample new.	[ 	w := c openOn: Collection.	t := c dependents last.	t expandAll.	t selectAll.	c updateList.	t listManager selectedMorphList do: [ :each | self assert: (t allNodeMorphs includes: each) ] ]		ensure: [ w close ]! !"FileSystem-Core"!"FileSystem-Tests-Core"!"Morphic-Base"!"Morphic-Core"!"MorphicTests"!----End fileIn----!----QUIT----2014-07-02T11:40:54.343427+02:00 Pharo.image priorSource: 135514!----STARTUP----2014-07-02T11:40:54.496521+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-07-02T11:40:58.420517+02:00 Pharo.image priorSource: 150370!----STARTUP----2014-07-02T11:48:04.620362+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-07-02T11:48:04.77036+02:00 Pharo-30851.image priorSource: 150565!----STARTUP----2014-07-10T10:58:46.895664+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 7/10/2014 10:56' prior: 33690241!commentForCurrentUpdate ^ '13422 Image crashes because an open Nautilus browser hangs onto many objects while code is being loaded	https://pharo.fogbugz.com/f/cases/13422'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 7/10/2014 10:56'!script114	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.306.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1749.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.293.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-SvenVanCaekenberghe.184.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-SvenVanCaekenberghe.31.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 7/10/2014 10:57'!update30852	"self new update30852"	self withUpdateLog: '13422 Image crashes because an open Nautilus browser hangs onto many objects while code is being loaded	https://pharo.fogbugz.com/f/cases/13422'.	self loadTogether: self script114 merge: false.	self flushCaches.! !"ScriptLoader30"!!MorphTreeMorph methodsFor: 'updating' stamp: 'ThierryGoubier 7/3/2014 19:53' prior: 29046210!noteRemovalOfAll: aCollection	"TODO: update the selection as well"	scroller removeAllMorphsIn: aCollection.	self listManager isCheckList		ifFalse: [ self listManager noteRemovalOfAll: aCollection ].	aCollection do: [ :each | each delete ].	self adjustSubmorphPositions! !!MorphTreeMorph methodsFor: 'updating' stamp: 'ThierryGoubier 7/4/2014 10:10' prior: 33703329!updateContentsWithPreviouslyExpanded: aNodeList	"Make sure we notice the removal of the contained nodes."	nodeList := nil.	self noteRemovalOfAll: self allNodeMorphs.	"<-- Changed"	(self nodeList isNil or: [ self nodeList isEmpty ])		ifTrue: [ 			nodeList := nil.			^ self emptySelection ].	self addSubmorphsFromNodeList: self currentNodelist previouslyExpanded: aNodeList.	self listManager updateLastClickedMorph! !!MorphTreeModel methodsFor: 'updating' stamp: 'ThierryGoubier 7/4/2014 09:22' prior: 29028818!updateList	| items |	items := self selectedItems.	self requestView: MorphTreeChangeRequest updateList.	self selectItems: items! !!MorphTreeListManager methodsFor: 'selection change' stamp: 'ThierryGoubier 7/4/2014 09:48'!noteRemovalOfAll: aMorphList	aMorphList		do: [ :each | 			(self selectedMorphList includes: each)				ifTrue: [ 					each selected: false.					each unhighlight.					self selectedMorphList remove: each ifAbsent: [  ] ].			lastClickedMorph == each				ifTrue: [ lastClickedMorph := nil ] ]! !!MorphTreeListManager methodsFor: 'selection change' stamp: 'ThierryGoubier 7/4/2014 10:18'!updateLastClickedMorph	"When the contents have been updated, ensure that lastClickedMorph refer to a correct morph."	lastClickedMorph		ifNil: [ lastClickedMorph := self selectedMorphList ifEmpty: [  ] ifNotEmpty: [ self selectedMorphList last ] ]		ifNotNil: [ 			self allNodeMorphs				do: [ :each | 					each complexContents withoutListWrapper = lastClickedMorph complexContents withoutListWrapper						ifTrue: [ lastClickedMorph := each ] ] ]! !!MorphTreeMorphTests methodsFor: 'as yet unclassified' stamp: 'ThierryGoubier 7/4/2014 10:25'!testLastClickedMorphSetUponUpdateList	"Test that lastClickedMorph isn't set to nil after an update list."	| c w t |	c := ClassTreeExample new.	[ 	w := c openOn: Collection.	t := c dependents last.	t expandAll.	c		selectItems:			{CharacterSet}.	self assert: t listManager lastClickedMorph notNil.	c rootClass: Bag.	"We change completely the list. CharacterSet is not anymore in the list after the update."	c updateList.	self assert: t listManager lastClickedMorph isNil.	c selectItems: { Bag }.	self assert: t listManager lastClickedMorph notNil ]		ensure: [ w close ]! !!MorphTreeMorphTests methodsFor: 'as yet unclassified' stamp: 'ThierryGoubier 7/4/2014 07:11'!testMaintainingSelectionsOnUpdate	"Test that the selection is well maintained on list update."	| c w t |	c := ClassTreeExample new.	[ 	w := c openOn: Collection.	t := c dependents last.	t expandAll.	c		selectItems:			{Bag.			CharacterSet}.	t selectedMorphList		do: [ :e | 			self				assert:					({Bag.					CharacterSet} includes: e complexContents withoutListWrapper) ].	c updateList.	t selectedMorphList		do: [ :e | 			self				assert:					({Bag.					CharacterSet} includes: e complexContents withoutListWrapper) ] ]		ensure: [ w close ]! !!MorphTreeMorphTests methodsFor: 'as yet unclassified' stamp: 'ThierryGoubier 7/4/2014 09:36'!testUpdatingSelectionsOnUpdate	"Test that the selection does not refer to non-existing nodes after updates."	| c w t |	c := ClassTreeExample new.	[ 	w := c openOn: Collection.	t := c dependents last.	t expandAll.	c		selectItems:			{Bag.			CharacterSet}.	c selection selectedNodes do: [ :e | self assert: (t selectedMorphList anySatisfy: [ :sm | sm complexContents = e ]) ].	c rootClass: Bag.	c updateList.	c selection selectedNodes do: [ :e | self assert: (t selectedMorphList anySatisfy: [ :sm | sm complexContents = e ]) ] ]		ensure: [ w close ]! !!MorphTreeMorphTests methodsFor: 'as yet unclassified' stamp: 'ThierryGoubier 7/4/2014 09:41'!testUpdatingSelectionsOnUpdateWithRemoval	"Test that the selection does not refer to non-existing nodes after updates, including if the update removes nodes."	| c w t |	c := ClassTreeExample new.	[ 	w := c openOn: Collection.	t := c dependents last.	t expandAll.	c		selectItems:			{Bag.			CharacterSet}.	c selection selectedNodes do: [ :e | self assert: (t selectedMorphList anySatisfy: [ :sm | sm complexContents = e ]) ].	c rootClass: Bag.	"We change completely the list. CharacterSet is not anymore in the list after the update."	c updateList.	self assert: t selectedMorphList size = 1.	"We have only Bag selected now."	self assert: t selectedMorphList first complexContents withoutListWrapper == Bag.	c selection selectedNodes do: [ :e | self assert: (t selectedMorphList anySatisfy: [ :sm | sm complexContents = e ]) ] ]		ensure: [ w close ]! !"Morphic-Base"!"MorphicTests"!----End fileIn----!----QUIT----2014-07-10T10:58:51.184511+02:00 Pharo.image priorSource: 150760!----STARTUP----2014-07-10T10:58:51.338907+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-07-10T10:58:55.344903+02:00 Pharo.image priorSource: 168041!----STARTUP----2014-07-10T11:05:06.865887+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-07-10T11:05:07.02389+02:00 Pharo-30852.image priorSource: 168236!----STARTUP----2014-08-08T11:36:55.164075+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 8/8/2014 11:34' prior: 33705487!commentForCurrentUpdate ^ '13796 DNU ReadWriteStream>>fileIn in SmalltalkEditor>>fileItIn	https://pharo.fogbugz.com/f/cases/1379613658 backport 3.0: 13654 Pressing Enter in EyeInspector gives MNU: TextModel>>asText	https://pharo.fogbugz.com/f/cases/1365813626 SelectorException>>signalFor:In: does not understand object:	https://pharo.fogbugz.com/f/cases/13626'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 8/8/2014 11:35'!script115	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.306.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1751.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.293.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 8/8/2014 11:35'!update30853	"self new update30853"	self withUpdateLog: '13796 DNU ReadWriteStream>>fileIn in SmalltalkEditor>>fileItIn	https://pharo.fogbugz.com/f/cases/1379613658 backport 3.0: 13654 Pressing Enter in EyeInspector gives MNU: TextModel>>asText	https://pharo.fogbugz.com/f/cases/1365813626 SelectorException>>signalFor:In: does not understand object:	https://pharo.fogbugz.com/f/cases/13626'.	self loadTogether: self script115 merge: false.	self flushCaches.! !"ScriptLoader30"!!SelectorException class methodsFor: 'signaling' stamp: 'VincentBlondeau 7/21/2014 14:50' prior: 52891363!signalFor: aSelector in: aReceiver	"Create and signal an exception for aSelector in aReceiver."	^ self new		selector: aSelector;		signaler: aReceiver;		signal! !!SmalltalkEditor methodsFor: 'menu messages' stamp: 'VincentBlondeau 8/7/2014 15:15' prior: 53456904!fileItIn	"Make a Stream on the text selection and fileIn it.	 Moved here from FileController; this function can be useful from any text window that shows stuff in chunk format"	| selection |	selection := self selection.	CodeImporter evaluateReadStream: (ReadWriteStream on: selection string from: 1 to: selection size).	self inform: 'Code imported'.! !!EyeInspector methodsFor: 'accessing' stamp: 'NicolaiHess 7/23/2014 11:08' prior: 22235422!selectedElement	^ self list selectedItem ifNil: [ 		"sometimes the new list model desynchronize its selected index from its selected element,		this mean that the inspector evaluates 'list setSelectedIndex: 1' but 'list selectedItem' still returns nil.		This code fixes this case, that is triggered for example when you do Cmd+c in an ObjectExplorer."		self list selectedIndex ifNotNil: [ :currentIndex | 			currentIndex = 0				ifTrue: [ ^ nil ].			self list listItems ifNotEmpty: [ :aList | 				aList at: currentIndex  ] ] ]! !"Kernel"!"Spec-Inspector"!"Text-Edition"!----End fileIn----!----QUIT----2014-08-08T11:36:59.380563+02:00 Pharo.image priorSource: 168431!----STARTUP----2014-08-08T11:36:59.525131+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-08-08T11:37:03.363126+02:00 Pharo.image priorSource: 182430!----STARTUP----2014-08-08T11:43:37.555736+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-08-08T11:43:37.727737+02:00 Pharo-30853.image priorSource: 182625!----STARTUP----2014-08-15T10:56:55.611624+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 8/15/2014 10:53' prior: 33723157!commentForCurrentUpdate ^ '13680 [Backport 3.0] receiver of NodeModel is Nil	https://pharo.fogbugz.com/f/cases/1368013844 Extended search... fooled by block arguments (backport)	https://pharo.fogbugz.com/f/cases/13844'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 8/15/2014 10:54'!script116	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.308.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1751.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-SvenVanCaekenberghe.1424.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 8/15/2014 10:54'!update30854	"self new update30854"	self withUpdateLog: '13680 [Backport 3.0] receiver of NodeModel is Nil	https://pharo.fogbugz.com/f/cases/1368013844 Extended search... fooled by block arguments (backport)	https://pharo.fogbugz.com/f/cases/13844'.	self loadTogether: self script116 merge: false.	self flushCaches.! !"ScriptLoader30"!!MorphTreeMorph methodsFor: 'updating' stamp: 'ThierryGoubier 7/24/2014 15:01' prior: 33717477!noteRemovalOfAll: aCollection	"TODO: update the selection as well"	self listManager noteRemovalOfAll: aCollection.	aCollection do: [ :each | each delete ].	scroller removeAllMorphsIn: aCollection.	self adjustSubmorphPositions! !!MorphTreeListManager methodsFor: 'selection change' stamp: 'ThierryGoubier 7/24/2014 15:02' prior: 33718599!noteRemovalOfAll: aMorphList	aMorphList		do: [ :each | 			self selectedMorphList remove: each ifAbsent: [  ].			lastClickedMorph == each				ifTrue: [ lastClickedMorph := nil ] ]! !!String methodsFor: 'converting' stamp: 'BenComan 8/14/2014 00:18' prior: 54626207!findSelector	"Dan's code for hunting down selectors with keyword parts; while this doesn't give a true parse, in most cases it does what we want, in where it doesn't, we're none the worse for it."	| sel possibleParens |	sel := self trimBoth.	sel := sel copyReplaceAll: '#' with: ''.	sel := sel copyReplaceAll: '[' with: '[ '.	(sel includes: $:) ifTrue:		[sel := sel copyReplaceAll: ':' with: ': '.	"for the style (aa max:bb) with no space"		possibleParens := sel findTokens: Character separators.		sel := self class streamContents:			[:s | | level | level := 0.			possibleParens do:				[:token | | n |				(level = 0 and: [token endsWith: ':'])					ifTrue: [s nextPutAll: token]					ifFalse: [(n := token occurrencesOf: $( ) > 0 ifTrue: [level := level + n].							(n := token occurrencesOf: $[ ) > 0 ifTrue: [level := level + n].							(n := token occurrencesOf: $] ) > 0 ifTrue: [level := level - n].							(n := token occurrencesOf: $) ) > 0 ifTrue: [level := level - n]]]]].	sel isEmpty ifTrue: [^ nil].	sel isOctetString ifTrue: [sel := sel asOctetString].	Symbol hasInterned: sel ifTrue:		[:aSymbol | ^ aSymbol].	^ nil! !!MorphTreeNodeMorph methodsFor: 'initialization' stamp: 'ThierryGoubier 7/24/2014 15:00' prior: 29149924!initWithContents: anObject prior: priorMorph forList: hostList indentLevel: newLevel	"Make sure that we will be removed from our model dependents when deleted."	container := hostList.	self cellInset: container resizerWidth @ 0.	complexContents := anObject.	anObject addDependent: self.	self		onAnnouncement: MorphDeleted		do: [ :ann | 			anObject removeDependent: ann morph.			ann morph announcer unsubscribe: anObject ].	isExpanded := anObject isExpanded.	nextSibling := firstChild := nil.	priorMorph ifNotNil: [ priorMorph nextSibling: self ].	indentLevel := newLevel.	self setBalloonText: anObject helpText.	self initRow.	anObject selected		ifTrue: [ self selectedWithoutNotifyingComplexContents: true ]! !"Collections-Strings"!"Morphic-Base"!----End fileIn----!----QUIT----2014-08-15T10:56:59.785963+02:00 Pharo.image priorSource: 182820!----STARTUP----2014-08-15T10:56:59.94937+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-08-15T10:57:03.737367+02:00 Pharo.image priorSource: 197855!----STARTUP----2014-08-15T11:01:52.049784+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-08-15T11:01:52.221786+02:00 Pharo-30854.image priorSource: 198049!----STARTUP----2014-08-25T10:00:54.921998+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 8/25/2014 09:58' prior: 33737548!commentForCurrentUpdate ^ '13902 inconsistent behaviour when debugging Pharo3.0	https://pharo.fogbugz.com/f/cases/1390213858 Backport 3.0 case 13857	https://pharo.fogbugz.com/f/cases/13858'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 8/25/2014 09:58'!script117	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.308.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.162.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-EstebanLorenzano.13.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.150.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.84.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 8/25/2014 09:58'!update30855	"self new update30855"	self withUpdateLog: '13902 inconsistent behaviour when debugging Pharo3.0	https://pharo.fogbugz.com/f/cases/1390213858 Backport 3.0 case 13857	https://pharo.fogbugz.com/f/cases/13858'.	self loadTogether: self script117 merge: false.	self flushCaches.! !"ScriptLoader30"!!Browser methodsFor: 'message functions' stamp: 'EstebanLorenzano 8/17/2014 12:35' prior: 19216511!defineMessageFrom: aString notifying: aController	"Compile the expressions in aString. Notify aController if a syntax error occurs. Install the compiled method in the selected class classified under  the currently selected message category name. Answer the selector obtained if compilation succeeds, nil otherwise."	| selectedMessageName selector category oldMessageList |	selectedMessageName := self selectedMessageName.	oldMessageList := self messageList.	contents := nil.	selector := self selectedClassOrMetaClass				compile: aString				classified: ((category := self selectedMessageCategoryName) ifNil: [ Protocol unclassified ])				notifying: aController.	selector == nil ifTrue: [^ nil].	contents := aString copy.	selector ~~ selectedMessageName		ifTrue: 			[category = Protocol nullCategory				ifTrue: [self changed: #classSelectionChanged.						self changed: #classList.						self messageCategoryListIndex: 1].			self setClassOrganizer.  "In case organization not cached"			(oldMessageList includes: selector)				ifFalse: [self changed: #messageList].			self messageListIndex: (self messageList indexOf: selector)].	^ selector! !!Browser methodsFor: 'initialization' stamp: 'EstebanLorenzano 8/17/2014 12:36' prior: 19224018!setSelector: aSymbol	"Make the receiver point at the given selector, in the currently chosen class"	| aClass messageCatIndex |	aSymbol ifNil: [^ self].	(aClass := self selectedClassOrMetaClass) ifNil: [^ self].	messageCatIndex := aClass organization protocols 		indexOf: (aClass organization protocolOrganizer protocolsOfSelector: aSymbol) anyOne.	self messageCategoryListIndex: messageCatIndex + 1.	messageCatIndex = 0 ifTrue: [^ self].	self messageListIndex:			((aClass organization listAtCategoryNumber: messageCatIndex)					indexOf: aSymbol)! !!ContextPart methodsFor: 'controlling' stamp: 'NicolaiHess 8/24/2014 11:41' prior: 20907150!runUntilErrorOrReturnFrom: aSender 	"ASSUMES aSender is a sender of self.  Execute self's stack until aSender returns or an unhandled exception is raised.  Return a pair containing the new top context and a possibly nil exception.  The exception is not nil if it was raised before aSender returned and it was not handled.  The exception is returned rather than openning the debugger, giving the caller the choice of how to handle it."	"Self is run by jumping directly to it (the active process abandons thisContext and executes self).  However, before jumping to self we insert an ensure block under aSender that jumps back to thisContext when evaluated.  We also insert an exception handler under aSender that jumps back to thisContext when an unhandled exception is raised.  In either case, the inserted ensure and exception handler are removed once control jumps back to thisContext."	| error context here topContext |	here := thisContext.	"Insert ensure and exception handler contexts under aSender"	error := nil.	context := aSender insertSender: (ContextPart		contextOn: UnhandledError, Halt do: [:ex |			error ifNil: [				"this is ugly but it fixes the side-effects of not sending an Unhandled error on Halt"				error := (ex isKindOf: Halt) ifTrue: [ ex ] ifFalse: [ ex exception ].				topContext := thisContext.				ex resumeUnchecked: here jump ]			ifNotNil: [ ex pass ]]).	context := context insertSender: (ContextPart		contextEnsure: [error ifNil: [				topContext := thisContext.				here jump]		]).	self jump.  "Control jumps to self"	"Control resumes here once above ensure block or exception handler is executed"	^ error ifNil: [		"No error was raised, remove ensure context by stepping until popped"		[context isDead] whileFalse: [topContext := topContext stepToCallee].		{topContext. nil}	] ifNotNil: [		"Error was raised, remove inserted above contexts then return signaler context"		aSender terminateTo: context sender.  "remove above ensure and handler contexts"		{topContext. error}	].! !"Kernel"!"Tools"!----End fileIn----!----QUIT----2014-08-25T10:00:59.693999+02:00 Pharo.image priorSource: 198244!----STARTUP----2014-08-25T10:00:59.844666+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-08-25T10:01:03.736663+02:00 Pharo.image priorSource: 214549!----STARTUP----2014-08-25T10:07:05.05323+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-08-25T10:07:05.20523+02:00 Pharo-30855.image priorSource: 214744!----STARTUP----2014-08-29T16:45:55.863361+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 8/29/2014 16:43' prior: 33752972!commentForCurrentUpdate ^ '13912 backport: 13911: Metacello test packages not properly unload	https://pharo.fogbugz.com/f/cases/1391213725 NativeBoost crashes when reading null pointer field in a structure	https://pharo.fogbugz.com/f/cases/13725'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 8/29/2014 16:43'!script118	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.308.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-MarcusDenker.651.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-MarcusDenker.41.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 8/29/2014 16:43'!update30856	"self new update30856"	self withUpdateLog: '13912 backport: 13911: Metacello test packages not properly unload	https://pharo.fogbugz.com/f/cases/1391213725 NativeBoost crashes when reading null pointer field in a structure	https://pharo.fogbugz.com/f/cases/13725'.	self loadTogether: self script118 merge: false.	self flushCaches.! !"ScriptLoader30"!!MetacelloTestsMCPackage methodsFor: 'accessing' stamp: 'ChristopheDemarey 8/20/2014 19:26'!species	^ MCPackage! !!GoferResource methodsFor: 'running' stamp: 'ChristopheDemarey 8/20/2014 19:25' prior: 23748222!setUpMonticelloRepository	"This method builds a fake repository with the version references from #buildReferences."	| packages |		packages := Dictionary new.	monticelloRepository := MCDictionaryRepository new.	versionReferences do: [ :reference |		monticelloRepository basicStoreVersion: (MCVersion new			setPackage:  (packages 				at: reference packageName 				ifAbsentPut: [ MetacelloTestsMCPackage new name: reference packageName ])			info: (MCVersionInfo				name: reference name				id: UUID new				message: 'This is a mock version'				date: Date today				time: Time now				author: reference author				ancestors: #())			snapshot: (MCSnapshot fromDefinitions: (Array				with: (MCOrganizationDefinition categories: (Array with: reference packageName asSymbol))				with: (MCClassDefinition name: (reference packageName copyWithout: $-) asSymbol superclassName: #Object category: reference packageName asSymbol instVarNames: #() comment: '')))			dependencies: #()) ].! !!NBFFIExternalStructTests methodsFor: 'tests' stamp: 'CiprianTeodorov 7/28/2014 22:50'!testStructWithPointerAccess	| struct |		struct := NBTestStructureWithPointer1 new.	self assert: struct isExternal not.	self assert: struct field isNil.! !!NBExternalStructureType methodsFor: 'emitting code' stamp: 'CiprianTeodorov 7/28/2014 22:38' prior: 29596512!coerceReturnPointer: gen	"input: pointer to struct in EAX	output: instance of external structure oop pointing to given address"		| asm proxy oop cont done |		asm := gen asm.	proxy := gen proxy.		"we only care for 1 arity e.g. 'Struct *', otherwise use generic marshalling."	pointerArity > 1 ifTrue: [  ^ super coerceReturnPointer: gen ].		"handle the case where the pointer is null here"	cont := asm uniqueLabelName: #cont.	done := asm uniqueLabelName: #done.	asm or: asm EAX with: asm EAX.	asm jnz: cont.	gen proxy nilObject.	asm jmp: done.	asm label: cont.		"first create an instance of NBExternalAddress"	NBExternalAddressType new 		createInstanceWithValue: asm EAX generator: gen.			proxy pushRemappableOop: asm EAX.		oop := gen reserveTemp.	proxy createInstanceOf: objectClass.	asm mov: asm EAX to: oop.		proxy popRemappableOop.	proxy storePointer: self dataIvarIndex ofObject: oop withValue: asm EAX.	"return an instance of objectClass as result"	asm mov: oop to: asm EAX.	gen releaseTemps: 1.	asm label: done.! !!NBTestStructureWithPointer1 class methodsFor: 'as yet unclassified' stamp: 'CiprianTeodorov 7/28/2014 22:50'!fieldsDesc" self rebuildFieldAccessors "	^ #(		int * field		)! !"Gofer-Tests"!"Metacello-TestsMCResources"!"NativeBoost-Core"!"NativeBoost-Tests"!----End fileIn----!----QUIT----2014-08-29T16:45:59.090156+02:00 Pharo.image priorSource: 214938!----STARTUP----2014-08-29T16:45:59.240934+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-08-29T16:46:03.310927+02:00 Pharo.image priorSource: 230172!----STARTUP----2014-08-29T16:51:31.484582+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-08-29T16:51:31.646582+02:00 Pharo-30856.image priorSource: 230367!----STARTUP----2014-09-18T13:43:03.563787+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 9/18/2014 13:39' prior: 33769665!commentForCurrentUpdate ^ '14018 backport #uncapitalized to Pharo3	https://pharo.fogbugz.com/f/cases/1401814025 DateModel Broken in 3.0	https://pharo.fogbugz.com/f/cases/14025'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 9/18/2014 13:40'!script119	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-TheIntegrator.310.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.653.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 9/18/2014 13:40'!update30857	"self new update30857"	self withUpdateLog: '14018 backport #uncapitalized to Pharo3	https://pharo.fogbugz.com/f/cases/1401814025 DateModel Broken in 3.0	https://pharo.fogbugz.com/f/cases/14025'.	self loadTogether: self script119 merge: false.	self flushCaches.! !"ScriptLoader30"!!SymbolTest methodsFor: 'tests' stamp: 'BernardoContreras 8/11/2014 19:13'!testUncapitalized	| uc lc empty |			uc := #MElViN.	lc := #mElViN.	empty := #' '.	self assert:  uc uncapitalized = lc.	self assert: lc uncapitalized = lc.	! !!StringTest methodsFor: 'tests - converting' stamp: 'BernardoContreras 8/11/2014 19:13'!testUncapitalized	| uc lc empty |			uc := 'MElViN'.	lc := 'mElViN'.	empty := ' '.	self assert:  uc uncapitalized = lc.	self assert: lc uncapitalized = lc.	"the string gets copied"	self deny: lc uncapitalized == lc.	self deny: empty uncapitalized == empty.! !!Symbol methodsFor: 'converting' stamp: 'BernardoContreras 8/11/2014 19:23'!uncapitalized	"Answer an object like the receiver but with first character downshifted if necessary"	^ self asString uncapitalized asSymbol! !!String methodsFor: 'converting' stamp: 'BernardoContreras 8/11/2014 19:12'!uncapitalized	"Return a copy with the first letter downShifted (in lower case)"		| answer |	self ifEmpty: [ ^ self copy ].	answer := self copy.	answer at: 1 put: answer first asLowercase.	^ answer! !!DateModel methodsFor: 'initialization' stamp: 'SeanDeNigris 9/16/2014 09:28' prior: 21162720!initializeWidgets	self instantiateModels: #(		dateLabel LabelModel		dateModel TextInputFieldModel		chooseDateButton ButtonModel).		dateLabel		text: 'Date'.			dateModel		text: Date today asString;		isCodeCompletionAllowed: false.		chooseDateButton		icon: self iconMorph;		action: [ self chooseDate ];		extent: self iconMorph extent.! !"Collections-Strings"!"CollectionsTests"!"Spec-PolyWidgets"!----End fileIn----!----QUIT----2014-09-18T13:43:13.105808+02:00 Pharo.image priorSource: 230562!----STARTUP----2014-09-18T13:43:13.33198+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-09-18T13:43:17.301979+02:00 Pharo.image priorSource: 244391!----STARTUP----2014-09-18T13:48:26.640337+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-09-18T13:48:26.795372+02:00 Pharo-30857.image priorSource: 244585!----STARTUP----2014-09-24T16:57:12.599992+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'MarcusDenker 9/24/2014 16:54' prior: 33785291!commentForCurrentUpdate ^ '14034 add to Pharo3: substrings:	https://pharo.fogbugz.com/f/cases/14034'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'MarcusDenker 9/24/2014 16:54'!script120	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.311.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.653.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-MarcusDenker.212.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'MarcusDenker 9/24/2014 16:54'!update30858	"self new update30858"	self withUpdateLog: '14034 add to Pharo3: substrings:	https://pharo.fogbugz.com/f/cases/14034'.	self loadTogether: self script120 merge: false.	self flushCaches.! !"ScriptLoader30"!!String methodsFor: 'converting' stamp: 'BenComan 9/21/2014 08:55'!substrings: separators 	"Answer an array containing the substrings in the receiver separated 	by the elements of separators."			"Adds forwards compatibility with planned conversion of #subStrings: to #substrings in Pharo4 	and deprecation of #subStrings: in Pharo5 (Issue 14034 and parent 7592)"		^ self subStrings: separators ! !"Collections-Strings"!----End fileIn----!----QUIT----2014-09-24T16:57:14.892262+02:00 Pharo.image priorSource: 244780!----STARTUP----2014-09-24T16:57:15.055404+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-09-24T16:57:19.017402+02:00 Pharo.image priorSource: 257256!----STARTUP----2014-09-24T17:42:28.243624+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-09-24T17:42:28.399626+02:00 Pharo-30858.image priorSource: 257451!----STARTUP----2014-10-24T13:48:05.804641+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 10/24/2014 13:45' prior: 33799508!commentForCurrentUpdate ^ '14244 MNU: MessageListBrowser>>guessTypeforName:	https://pharo.fogbugz.com/f/cases/14244'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 10/24/2014 13:45'!script121	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-MarcusDenker.28.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.311.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.653.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-TheIntegrator.214.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 10/24/2014 13:45'!update30859	"self new update30859"	self withUpdateLog: '14244 MNU: MessageListBrowser>>guessTypeforName:	https://pharo.fogbugz.com/f/cases/14244'.	self loadTogether: self script121 merge: false.	self flushCaches.! !"ScriptLoader30"!!MessageListBrowser methodsFor: 'accessing' stamp: 'MarcusDenker 10/15/2014 17:13'!guessTypeForName: aString	^nil! !"RecentSubmissions"!----End fileIn----!----QUIT----2014-10-24T13:48:08.002715+02:00 Pharo.image priorSource: 257646!----STARTUP----2014-10-24T13:48:08.14861+02:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-10-24T13:48:11.884622+02:00 Pharo.image priorSource: 269872!----STARTUP----2014-10-24T14:42:21.067636+02:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-10-24T14:42:21.21563+02:00 Pharo-30859.image priorSource: 270066!----STARTUP----2014-11-07T09:33:14.50955+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 11/7/2014 09:30' prior: 33812376!commentForCurrentUpdate ^ '14405 (backport pharo3) FileOut creates invalid comment entries for classes with class side methods	https://pharo.fogbugz.com/f/cases/14405'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 11/7/2014 09:31'!script122	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-TheIntegrator.30.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-MarcusDenker.311.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.653.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-TheIntegrator.214.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-MarcusDenker.73.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 11/7/2014 09:31'!update30860	"self new update30860"	self withUpdateLog: '14405 (backport pharo3) FileOut creates invalid comment entries for classes with class side methods	https://pharo.fogbugz.com/f/cases/14405'.	self loadTogether: self script122 merge: false.	self flushCaches.! !"ScriptLoader30"!!ClassOrganization methodsFor: 'backward compatibility - file in/out' stamp: 'NicolaiHess 11/5/2014 20:10' prior: 20005767!putCommentOnFile: aFileStream numbered: sourceIndex moveSource: moveSource forClass: aClass	"Store the comment about the class onto file, aFileStream."	| header |		self classComment isEmptyOrNil ifTrue:[ ^ self ].	aFileStream cr; nextPut: $!!.	header := String streamContents: [:strm | 			strm nextPutAll: aClass name;			nextPutAll: ' commentStamp: '.			commentStamp ifNil: [commentStamp := '<historical>'].			commentStamp storeOn: strm.			strm nextPutAll: ' prior: '; nextPutAll: '0'].	aFileStream nextChunkPut: header.	aClass organization fileOutCommentOn: aFileStream			moveSource: moveSource toFile: sourceIndex.	aFileStream cr! !"ClassOrganizer-Core"!----End fileIn----!----QUIT----2014-11-07T09:33:16.843832+01:00 Pharo.image priorSource: 270261!----STARTUP----2014-11-07T09:33:16.984683+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-11-07T09:33:20.79868+01:00 Pharo.image priorSource: 283243!----STARTUP----2014-11-07T09:39:10.402339+01:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-11-07T09:39:10.554343+01:00 Pharo-30860.image priorSource: 283438!----STARTUP----2014-12-12T14:53:15.317837+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 12/12/2014 14:50' prior: 33824988!commentForCurrentUpdate ^ '14575 Backport Pharo3: 14571 Add String class>>#loremIpsum constant and dynamically sized filler text feature	https://pharo.fogbugz.com/f/cases/14575'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 12/12/2014 14:50'!script123	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-TheIntegrator.30.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-TheIntegrator.313.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.655.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-EstebanLorenzano.736.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-MarcusDenker.160.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-TheIntegrator.214.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-MarcusDenker.162.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-TheIntegrator.75.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 12/12/2014 14:51'!update30861	"self new update30861"	self withUpdateLog: '14575 Backport Pharo3: 14571 Add String class>>#loremIpsum constant and dynamically sized filler text feature	https://pharo.fogbugz.com/f/cases/14575'.	self loadTogether: self script123 merge: false.	self flushCaches.! !"ScriptLoader30"!!ScrollSyncExample methodsFor: 'private' stamp: 'MarcusDenker 12/12/2014 14:38' prior: 52823707!loremIpsum	^ String loremIpsum: 2854! !!StringTest methodsFor: 'testing - instance creation' stamp: 'MarcusDenker 12/12/2014 14:37'!testLoremIpsum	| fillerText |	fillerText := String loremIpsum.	self deny: fillerText isEmpty.	self assert: (fillerText beginsWith: 'Lorem ipsum').	self assert: (fillerText endsWith: 'laborum.').	self assert: fillerText lines first equals: fillerText.	self assert: fillerText isAsciiString.	self assert: (Character space split: fillerText) size > 10! !!StringTest methodsFor: 'testing - instance creation' stamp: 'MarcusDenker 12/12/2014 14:37'!testLoremIpsum2048	| fillerText |	fillerText := String loremIpsum: 2048.	self assert: fillerText size equals: 2048.	self assert: (fillerText beginsWith: 'Lorem ipsum').	self assert: (fillerText includesSubstring: 'laborum.').	self assert: (fillerText endsWith: ('.', String cr)).	self assert: fillerText lines size > 2.	self assert: fillerText isAsciiString.	self assert: (Character space split: fillerText) size > 75! !!String class methodsFor: 'instance creation' stamp: 'MarcusDenker 12/12/2014 14:35'!loremIpsum	"Return a constant string with one paragraph of text, the famous Lorem ipsum filler text.	The result is pure ASCII (Latin words) and contains no newlines."		^ 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'! !!String class methodsFor: 'instance creation' stamp: 'MarcusDenker 12/12/2014 14:35'!loremIpsum: size	"Return a mostly random multi-paragraph filler string of the specified size.	The result is pure ASCII, uses CR for newlines and ends with a dot and newline."		"self loremIpsum: 2048"		| words out |	words := (self loremIpsum findTokens: ' ,.') collect: #asLowercase.	(out := LimitedWriteStream on: (self new: size))		setLimit: size - 2 		limitBlock: [ 			^ out originalContents 				at: size - 1 put: $.; 				at: size put: Character cr; 				yourself ].	[ 		out << self loremIpsum; cr; cr.		5 atRandom timesRepeat: [			15 atRandom timesRepeat: [	 			out << words atRandom capitalized.				20 atRandom timesRepeat: [ out space; << words atRandom ].				out nextPut: $.; space ].			out cr; cr ] ] repeat! !"Collections-Strings"!"CollectionsTests"!"Spec-Examples"!----End fileIn----!----QUIT----2014-12-12T14:53:18.659839+01:00 Pharo.image priorSource: 283632!----STARTUP----2014-12-12T14:53:18.816714+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-12-12T14:53:22.93071+01:00 Pharo.image priorSource: 298557!----STARTUP----2014-12-12T15:00:07.492395+01:00 as /builds/workspace/Pharo-3.0-Update-Step-4-Publish/Pharo.image!----SNAPSHOT----2014-12-12T15:00:07.656398+01:00 Pharo-30861.image priorSource: 298752!----STARTUP----2014-12-12T15:31:53.372871+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!!ScriptLoader methodsFor: 'public' stamp: 'TheIntegrator 12/12/2014 15:29' prior: 33838362!commentForCurrentUpdate ^ '14012 RGMetaclassDefinition and RGMetatraitDefinition DNU #category	https://pharo.fogbugz.com/f/cases/1401214382 Fix Search Code refactoring menu item in Nautilus	https://pharo.fogbugz.com/f/cases/14382'! !!ScriptLoader methodsFor: 'pharo - scripts' stamp: 'TheIntegrator 12/12/2014 15:29'!script124	^ 'AST-Core-MarcusDenker.208.mczAST-Interpreter-Core-MarcusDenker.112.mczAST-Interpreter-Extension-MarcusDenker.36.mczAST-Interpreter-Test-SvenVanCaekenberghe.92.mczAST-Tests-Core-SvenVanCaekenberghe.41.mczAnnouncements-Core-MarcusDenker.55.mczAnnouncements-Help-MarcusDenker.8.mczAnnouncements-Tests-Core-MarcusDenker.18.mczAnnouncements-View-MarcusDenker.20.mczAsmJit-Core-MarcusDenker.8.mczAsmJit-Extension-MarcusDenker.8.mczAsmJit-Instructions-MarcusDenker.11.mczAsmJit-Operands-StephaneDucasse.14.mczAsmJit-StackManagement-SvenVanCaekenberghe.11.mczAsmJit-Tests-SvenVanCaekenberghe.15.mczAsmJit-x86-MarcusDenker.31.mczAthens-Balloon-MarcusDenker.16.mczAthens-Cairo-MarcusDenker.73.mczAthens-CairoPools-MarcusDenker.13.mczAthens-Core-MarcusDenker.41.mczAthens-Examples-MarcusDenker.31.mczAthens-Morphic-MarcusDenker.29.mczAthens-Text-MarcusDenker.12.mczBalloon-MarcusDenker.114.mczBalloonTests-MarcusDenker.3.mczClassOrganizer-Core-TheIntegrator.30.mczClassOrganizer-Tests-SvenVanCaekenberghe.7.mczCodeImport-MarcusDenker.46.mczCollections-Abstract-MarcusDenker.249.mczCollections-Arithmetic-MarcusDenker.13.mczCollections-Arrayed-EstebanLorenzano.69.mczCollections-Atomic-MarcusDenker.10.mczCollections-Native-MarcusDenker.7.mczCollections-Sequenceable-StephaneDucasse.161.mczCollections-Stack-MarcusDenker.7.mczCollections-Streams-MarcusDenker.160.mczCollections-Strings-TheIntegrator.313.mczCollections-Support-SvenVanCaekenberghe.54.mczCollections-Traits-MarcusDenker.17.mczCollections-Unordered-MarcusDenker.187.mczCollections-Weak-MarcusDenker.86.mczCollectionsTests-TheIntegrator.655.mczCompiler-MarcusDenker.551.mczCompilerTests-MarcusDenker.183.mczCompression-MarcusDenker.143.mczCompressionTests-MarcusDenker.27.mczConfigurationCommandLineHandler-Core-MarcusDenker.25.mczConfigurationCommandLineHandler-Tests-MarcusDenker.11.mczDebuggerActions-MarcusDenker.72.mczDebuggerFilters-MarcusDenker.6.mczDebuggerModel-SvenVanCaekenberghe.89.mczDeprecated30-MarcusDenker.71.mczEmergencyEvaluator-MarcusDenker.32.mczEventModel-MarcusDenker.3.mczFileSystem-Core-MarcusDenker.157.mczFileSystem-Disk-MarcusDenker.76.mczFileSystem-Memory-SvenVanCaekenberghe.47.mczFileSystem-Tests-Core-MarcusDenker.81.mczFileSystem-Tests-Disk-MarcusDenker.20.mczFileSystem-Tests-Memory-SvenVanCaekenberghe.6.mczFileSystem-Zip-StephaneDucasse.11.mczFiles-MarcusDenker.360.mczFreeType-MarcusDenker.663.mczFreeTypeTests-SvenVanCaekenberghe.5.mczFuel-SvenVanCaekenberghe.792.mczFuelCommandLineHandler-MarcusDenker.24.mczFuelHacks-SvenVanCaekenberghe.1.mczFuelSystem-FileRegistry-EstebanLorenzano.3.mczFuelTests-SvenVanCaekenberghe.372.mczFuelTools-Debugger-MarcusDenker.9.mczGenerated-code-non-existing-package-MarcusDenker.1.mczGofer-Core-MarcusDenker.215.mczGofer-Tests-MarcusDenker.164.mczGraphics-Display Objects-MarcusDenker.140.mczGraphics-Files-MarcusDenker.53.mczGraphics-Fonts-MarcusDenker.90.mczGraphics-Primitives-MarcusDenker.138.mczGraphics-Resources-EstebanLorenzano.22.mczGraphics-Tests-StephaneDucasse.47.mczGraphics-Transformations-MarcusDenker.10.mczGroupManager-MarcusDenker.62.mczGroupManagerUI-MarcusDenker.32.mczGrowl-SvenVanCaekenberghe.30.mczHelpSystem-Core-SvenVanCaekenberghe.108.mczHelpSystem-Tests-SvenVanCaekenberghe.28.mczHistory-MarcusDenker.3.mczHudsonBuildTools20-SvenVanCaekenberghe.59.mczKernel-MarcusDenker.1753.mczKernelTests-MarcusDenker.646.mczKeyChain-SvenVanCaekenberghe.75.mczKeymapping-Core-MarcusDenker.184.mczKeymapping-KeyCombinations-MarcusDenker.43.mczKeymapping-Pragmas-MarcusDenker.46.mczKeymapping-Settings-MarcusDenker.79.mczKeymapping-Tests-SvenVanCaekenberghe.93.mczKeymapping-Tools-Spec-SvenVanCaekenberghe.27.mczKeys-MarcusDenker.10.mczKomitter-MarcusDenker.92.mczManifest-Core-MarcusDenker.178.mczManifest-CriticBrowser-MarcusDenker.148.mczManifest-Resources-Tests-MarcusDenker.14.mczManifest-Tests-MarcusDenker.42.mczMenuRegistration-MarcusDenker.72.mczMetacello-Base-EstebanLorenzano.114.mczMetacello-Core-MarcusDenker.722.mczMetacello-FileTree-EstebanLorenzano.30.mczMetacello-GitHub-EstebanLorenzano.31.mczMetacello-MC-MarcusDenker.696.mczMetacello-PharoCommonPlatform-MarcusDenker.10.mczMetacello-Platform.pharo20-EstebanLorenzano.36.mczMetacello-Platform.pharo30-EstebanLorenzano.4.mczMetacello-ProfStef-EstebanLorenzano.14.mczMetacello-Reference-EstebanLorenzano.37.mczMetacello-TestsCore-EstebanLorenzano.36.mczMetacello-TestsMC-EstebanLorenzano.388.mczMetacello-TestsMCCore-EstebanLorenzano.6.mczMetacello-TestsMCResources-MarcusDenker.15.mczMetacello-TestsCommonMC.pharo20-EstebanLorenzano.4.mczMetacello-TestsPlatform.squeakCommon-MarcusDenker.19.mczMetacello-TestsTutorial-EstebanLorenzano.42.mczMetacello-ToolBox-MarcusDenker.138.mczMetacello-Tutorial-EstebanLorenzano.27.mczMonticello-MarcusDenker.928.mczMonticelloConfigurations-MarcusDenker.70.mczMonticelloFileTree-Core-MarcusDenker.171.mczMonticelloFileTree-FileSystem-Utilities-MarcusDenker.32.mczMonticelloGUI-EstebanLorenzano.289.mczMonticelloMocks-EstebanLorenzano.2.mczMorphic-Base-MarcusDenker.295.mczMorphic-Core-MarcusDenker.49.mczMorphic-Examples-MarcusDenker.20.mczMorphicTests-MarcusDenker.84.mczMultilingual-Encodings-MarcusDenker.47.mczMultilingual-Languages-MarcusDenker.38.mczMultilingual-OtherLanguages-MarcusDenker.8.mczMultilingual-Tests-MarcusDenker.33.mczMultilingual-TextConversion-MarcusDenker.68.mczMultilingual-TextConverterOtherLanguages-MarcusDenker.2.mczNECompletion-MarcusDenker.153.mczNOCompletion-MarcusDenker.46.mczNativeBoost-Core-MarcusDenker.152.mczNativeBoost-Examples-CamilloBruni.16.mczNativeBoost-Mac-MarcusDenker.12.mczNativeBoost-Pools-CamilloBruni.13.mczNativeBoost-Tests-MarcusDenker.87.mczNativeBoost-Unix-MarcusDenker.15.mczNativeBoost-Win32-MarcusDenker.48.mczNautilus-TheIntegrator.738.mczNautilusCommon-SvenVanCaekenberghe.195.mczNautilusRefactoring-TheIntegrator.162.mczNetwork-Kernel-SvenVanCaekenberghe.104.mczNetwork-MIME-MarcusDenker.65.mczNetwork-Mail-MarcusDenker.31.mczNetwork-Protocols-MarcusDenker.101.mczNetwork-RFC822-MarcusDenker.9.mczNetwork-UUID-StephaneDucasse.27.mczNetwork-Url-MarcusDenker.99.mczNetworkTests-SvenVanCaekenberghe.97.mczNewList-SvenVanCaekenberghe.70.mczNewValueHolder-SvenVanCaekenberghe.6.mczNodeNavigation-StephaneDucasse.44.mczNonInteractiveTranscript-MarcusDenker.13.mczOpalCompiler-Core-MarcusDenker.485.mczOpalCompiler-Tests-MarcusDenker.233.mczPackageInfo-SvenVanCaekenberghe.117.mczPolymorph-EventEnhancements-MarcusDenker.18.mczPolymorph-Geometry-MarcusDenker.13.mczPolymorph-TaskbarIcons-MarcusDenker.33.mczPolymorph-Tools-Diff-MarcusDenker.135.mczPolymorph-Widgets-EstebanLorenzano.1044.mczProfStef-Core-MarcusDenker.38.mczProfStef-Help-SvenVanCaekenberghe.14.mczProfStef-Tests-SvenVanCaekenberghe.23.mczRPackage-Core-EstebanLorenzano.362.mczRPackage-SystemIntegration-MarcusDenker.222.mczRPackage-Tests-EstebanLorenzano.158.mczRecentSubmissions-TheIntegrator.214.mczRefactoring-Changes-MarcusDenker.52.mczRefactoring-Core-MarcusDenker.235.mczRefactoring-Critics-MarcusDenker.102.mczRefactoring-Environment-MarcusDenker.40.mczRefactoring-Tests-Changes-MarcusDenker.36.mczRefactoring-Tests-Core-MarcusDenker.88.mczRefactoring-Tests-Critics-MarcusDenker.19.mczRefactoring-Tests-Environment-StephaneDucasse.11.mczRegex-Core-MarcusDenker.33.mczRegex-Help-MarcusDenker.5.mczRegex-Tests-Core-MarcusDenker.9.mczReleaseTests-MarcusDenker.3.mczRing-Core-Containers-MarcusDenker.30.mczRing-Core-Kernel-TheIntegrator.164.mczRing-Monticello-MarcusDenker.20.mczRing-Tests-Containers-MarcusDenker.11.mczRing-Tests-Kernel-MarcusDenker.63.mczRing-Tests-Monticello-MarcusDenker.19.mczSUnit-Core-MarcusDenker.116.mczSUnit-Help-MarcusDenker.9.mczSUnit-Tests-MarcusDenker.37.mczSUnit-UI-MarcusDenker.79.mczSUnit-UITesting-MarcusDenker.17.mczSUnit-Utilities-MarcusDenker.12.mczSettings-Compiler-MarcusDenker.19.mczSettings-Display-MarcusDenker.9.mczSettings-FreeType-MarcusDenker.14.mczSettings-Graphics-MarcusDenker.19.mczSettings-Kernel-MarcusDenker.5.mczSettings-Monticello-MarcusDenker.16.mczSettings-Network-MarcusDenker.18.mczSettings-Polymorph-SvenVanCaekenberghe.64.mczSettings-System-MarcusDenker.31.mczSettings-Tools-MarcusDenker.51.mczShout-MarcusDenker.208.mczShoutTests-MarcusDenker.23.mczSlot-MarcusDenker.427.mczSlotTests-MarcusDenker.89.mczSmartSuggestions-StephaneDucasse.122.mczSmartSuggestionsTests-MarcusDenker.4.mczSpec-Core-MarcusDenker.331.mczSpec-Debugger-MarcusDenker.214.mczSpec-Examples-TheIntegrator.75.mczSpec-Extensions-MarcusDenker.3.mczSpec-Inspector-MarcusDenker.186.mczSpec-Layout-MarcusDenker.65.mczSpec-MorphicAdapters-MarcusDenker.150.mczSpec-PolyWidgets-TheIntegrator.43.mczSpec-Tests-SvenVanCaekenberghe.39.mczSpec-Tools-SvenVanCaekenberghe.196.mczStartupPreferences-EstebanLorenzano.118.mczSystem-Announcements-MarcusDenker.63.mczSystem-Caching-MarcusDenker.6.mczSystem-Changes-SvenVanCaekenberghe.244.mczSystem-Clipboard-SvenVanCaekenberghe.32.mczSystem-CommandLine-MarcusDenker.161.mczSystem-FilePackage-SvenVanCaekenberghe.116.mczSystem-FileRegistry-SvenVanCaekenberghe.31.mczSystem-Finalization-StephaneDucasse.17.mczSystem-Hashing-SvenVanCaekenberghe.39.mczSystem-History-MarcusDenker.5.mczSystem-Installers-SvenVanCaekenberghe.42.mczSystem-Localization-SvenVanCaekenberghe.79.mczSystem-Object Events-MarcusDenker.13.mczSystem-Platforms-EstebanLorenzano.55.mczSystem-Serial Port-StephaneDucasse.23.mczSystem-Settings-MarcusDenker.297.mczSystem-Sound-MarcusDenker.16.mczSystem-Support-MarcusDenker.1023.mczSystem-Tools-SvenVanCaekenberghe.118.mczTabs-MarcusDenker.33.mczTests-MarcusDenker.681.mczText-Core-MarcusDenker.27.mczText-Edition-MarcusDenker.33.mczText-Scanning-MarcusDenker.20.mczText-Tests-MarcusDenker.4.mczTools-MarcusDenker.1426.mczToolsTest-MarcusDenker.denker.69.mczTraits-EstebanLorenzano.641.mczTranscript-SvenVanCaekenberghe.21.mczUI-MarcusDenker.9.mczUIManager-MarcusDenker.130.mczUnicode-Initialization-MarcusDenker.10.mczUpdateStreamer-Core-MarcusDenker.32.mczUpdateStreamer-Tests-SvenVanCaekenberghe.6.mczVersionner-Core-Announcements-MarcusDenker.11.mczVersionner-Core-Commands-MarcusDenker.49.mczVersionner-Core-DependenciesModel-MarcusDenker.90.mczVersionner-Core-Model-MarcusDenker.42.mczVersionner-Spec-Browser-MarcusDenker.150.mczVersionner-Tests-Core-Commands-MarcusDenker.13.mczVersionner-Tests-Core-DependenciesModel-MarcusDenker.40.mczVersionner-Tests-Core-Model-MarcusDenker.25.mczVersionner-Tests-Resources-MarcusDenker.14.mczZinc-Character-Encoding-Core-MarcusDenker.31.mczZinc-Character-Encoding-Tests-MarcusDenker.18.mczZinc-FileSystem-SvenVanCaekenberghe.10.mczZinc-HTTP-MarcusDenker.393.mczZinc-Resource-Meta-Core-SvenVanCaekenberghe.35.mczZinc-Resource-Meta-FileSystem-SvenVanCaekenberghe.4.mczZinc-Resource-Meta-Tests-MarcusDenker.21.mczZinc-System-Support-MarcusDenker.8.mczZinc-Tests-MarcusDenker.207.mczZinc-Zodiac-MarcusDenker.31.mczZodiac-Core-MarcusDenker.31.mczZodiac-Extra-StephaneDucasse.10.mczZodiac-Tests-MarcusDenker.13.mcz'findTokens: String lf , String cr! !!ScriptLoader methodsFor: 'pharo - updates' stamp: 'TheIntegrator 12/12/2014 15:29'!update30862	"self new update30862"	self withUpdateLog: '14012 RGMetaclassDefinition and RGMetatraitDefinition DNU #category	https://pharo.fogbugz.com/f/cases/1401214382 Fix Search Code refactoring menu item in Nautilus	https://pharo.fogbugz.com/f/cases/14382'.	self loadTogether: self script124 merge: false.	self flushCaches.! !"ScriptLoader30"!!CodeSearchingRule commentStamp: 'PaulDeBruicker 11/3/2014 19:58' prior: 0!I am a lint rule for Code Searching!!CodeSearchingAcceptor commentStamp: 'PaulDeBruicker 11/3/2014 19:57' prior: 0!I am an acceptor in the context of code rewriting using RBTreeSearching!!RGMetaclassDefinition methodsFor: 'accessing' stamp: 'MarcusDenker 12/12/2014 15:11'!category	^ self theNonMetaClass category! !!NautilusUI methodsFor: '*NautilusRefactoring' stamp: 'PaulDeBruicker 11/3/2014 20:06'!searchCode: aText	acceptor := CodeSearchingAcceptor model: self.	self sourceCode: aText! !!NautilusRefactoring methodsFor: 'rewrite code' stamp: 'PaulDeBruicker 11/3/2014 20:05' prior: 30257951!searchCode		self model searchCode: self searchCodeText! !!CodeSearchingRule commentStamp: 'PaulDeBruicker 11/3/2014 19:58' prior: 33865755!I am a lint rule for Code Searching!!CodeSearchingRule methodsFor: 'accessing' stamp: 'PaulDeBruicker 11/3/2014 20:27'!matcher: aRule	matcher := aRule! !!CodeSearchingRule methodsFor: 'accessing' stamp: 'PaulDeBruicker 11/3/2014 19:58'!name	^ 'Code Searching'! !!CodeSearchingAcceptor commentStamp: 'PaulDeBruicker 11/3/2014 19:57' prior: 33865872!I am an acceptor in the context of code rewriting using RBTreeSearching!!CodeSearchingAcceptor methodsFor: 'protocol' stamp: 'PaulDeBruicker 11/3/2014 20:51'!accept: aText notifying: aController	| environment tree rule result |	self model sourceTextArea update: #clearUserEdits.		environment := self model browsedEnvironment.	tree := self class compiler evaluate: aText.		rule := CodeSearchingRule new		matcher: tree;		yourself.		result := RBSmalllintChecker runRule: rule onEnvironment: environment.	(MethodBrowser new methods: result result methods) openWithSpec ! !!RGMetatraitDefinition methodsFor: 'accessing' stamp: 'MarcusDenker 12/12/2014 15:12'!category	^ self theNonMetaClass category! !"Nautilus"!"NautilusRefactoring"!"Ring-Core-Kernel"!----End fileIn----!----QUIT----2014-12-12T15:31:56.61525+01:00 Pharo.image priorSource: 298946!----STARTUP----2014-12-12T15:31:56.775052+01:00 as /builds/workspace/Pharo-3.0-Update-Step-1-Tracker/Pharo.image!----QUIT----2014-12-12T15:32:00.88905+01:00 Pharo.image priorSource: 313227!----STARTUP----2015-01-16T18:12:43.733007+01:00 as /Users/craig/me/behavior/context/development/context/context.app/Contents/Resources/context processor.app/Contents/Resources/context/memories/CFE10A14-D883-4ACE-990A-0DDA86AA362B/CFE10A14-D883-4ACE-990A-0DDA86AA362B!----SNAPSHOT----2015-01-16T18:19:51.258189+01:00 CFE10A14-D883-4ACE-990A-0DDA86AA362B priorSource: 313421!----SNAPSHOT----2015-01-16T23:10:37.306345+01:00 CFE10A14-D883-4ACE-990A-0DDA86AA362B priorSource: 313769!----SNAPSHOT----2015-01-16T23:11:38.511115+01:00 CFE10A14-D883-4ACE-990A-0DDA86AA362B priorSource: 313877!!ProxyTagConstants class methodsFor: 'as yet unclassified' stamp: 'crl 12/9/2014 10:06'!initialize	| proxyTagConstantKeys |	classPool := IdentityDictionary new.	proxyTagConstantKeys := #(		TrueTag		FalseTag		NilTag		SymbolTag		StringTag		CounterpartRequestTag		MessageSendTag		ArrayTag		MethodTag		FloatTag		CharacterTag		AssociationTag		MethodDictionaryTag		NegativeNumberTag		LargePositiveIntegerTag		UUIDTag		MethodIDTag		SetTag		ClassLiteralMarkerTag		ClassVariableLiteralMarkerTag		MetaSuperSendLiteralMarkerTag		UndeclaredLiteralMarkerTag		GlobalLiteralMarkerTag		PositiveManifestTag		NegativeManifestTag		ByteArrayTag		ExceptionMarkerTag		AnswerTag		OrderedCollectionTag		IntervalTag		SortedCollectionTag		MessageTag		ClassIDTag		DictionaryTag		PublishedVariableLiteralMarkerTag		InstallRemoteModuleTag		BrowseAvailableModulesTag		ModuleDescriptionTag		AuthorIDTag		VersionTag		GPLTag		ApacheTag		SqueakTag		MITTag		GPL3Tag		MethodEditionTag		ProtoclassEditionTag		MetaclassEditionTag		IdentityLiteralMarkerTag		EditTag		AuthorTag		CommentEditionTag		TagsEditionTag		CheckpointTag		PublishedVariableDictionaryLiteralMarkerTag		ModuleIDTag		ModuleEditionTag		MemoryProfileTag).	classPool		at: #OtherMarkerTagBase put: 2r11000000000000000000000000000001;		at: #SmallIntegerTagBase put: 2r10000000000000000000000000000000;		at: #EncodedTagBase put: 2r01000000000000000000000000000000.	1		to: proxyTagConstantKeys size		do: [:index |			classPool				at: (proxyTagConstantKeys at: index)				put: 2r01000000000000000000000000000000 + index].	{		Array.		Boolean.		ByteArray.		Character.		Dictionary.		Float.		Integer.		Interval.		Message.		Set.		String.		UndefinedObject	}		do: [:class | class addSharedPool: self].	ClassDescription setInstVarNames: #('instanceVariables' 'baseID').	SmalltalkImage addClassVarName: 'Profile'! !!Object methodsFor: '*ContextPrecursors' stamp: 'crl 12/9/2014 12:29'!proxyHash	^0! !!ProxyTagConstants class methodsFor: 'as yet unclassified' stamp: 'CraigLatta 1/16/2015 23:22' prior: 33868615!initialize	| proxyTagConstantKeys |	classPool := IdentityDictionary new.	proxyTagConstantKeys := #(		TrueTag		FalseTag		NilTag		SymbolTag		StringTag		CounterpartRequestTag		MessageSendTag		ArrayTag		MethodTag		FloatTag		CharacterTag		AssociationTag		MethodDictionaryTag		NegativeNumberTag		LargePositiveIntegerTag		UUIDTag		MethodIDTag		SetTag		ClassLiteralMarkerTag		ClassVariableLiteralMarkerTag		MetaSuperSendLiteralMarkerTag		UndeclaredLiteralMarkerTag		GlobalLiteralMarkerTag		PositiveManifestTag		NegativeManifestTag		ByteArrayTag		ExceptionMarkerTag		AnswerTag		OrderedCollectionTag		IntervalTag		SortedCollectionTag		MessageTag		ClassIDTag		DictionaryTag		PublishedVariableLiteralMarkerTag		InstallRemoteModuleTag		BrowseAvailableModulesTag		ModuleDescriptionTag		AuthorIDTag		VersionTag		GPLTag		ApacheTag		SqueakTag		MITTag		GPL3Tag		MethodEditionTag		ProtoclassEditionTag		MetaclassEditionTag		IdentityLiteralMarkerTag		EditTag		AuthorTag		CommentEditionTag		TagsEditionTag		CheckpointTag		PublishedVariableDictionaryLiteralMarkerTag		ModuleIDTag		ModuleEditionTag		MemoryProfileTag).	classPool		at: #OtherMarkerTagBase put: 2r11000000000000000000000000000001;		at: #SmallIntegerTagBase put: 2r10000000000000000000000000000000;		at: #EncodedTagBase put: 2r01000000000000000000000000000000.	1		to: proxyTagConstantKeys size		do: [:index |			classPool				at: (proxyTagConstantKeys at: index)				put: 2r01000000000000000000000000000000 + index].	{		Array.		Boolean.		ByteArray.		Character.		Dictionary.		Float.		Integer.		Interval.		Message.		Set.		String.		UndefinedObject	}		do: [:class | class addSharedPool: self].	ClassDescription addInstVarNamed: 'baseID'.	SmalltalkImage addClassVarName: 'Profile'! !!Class methodsFor: 'pool variables' stamp: 'CraigLatta 1/16/2015 23:23' prior: 19838945!addSharedPool: aSharedPool 	"Add the argument, aSharedPool, as one of the receiver's shared pools. 	Create an error if the shared pool is already one of the pools.	This method will work with shared pools that are plain Dictionaries or thenewer SharedPool subclasses"	(self sharedPools includes: aSharedPool)		ifTrue: [^self].	self sharedPools == nil		ifTrue: [self sharedPools: (OrderedCollection with: aSharedPool)]		ifFalse: [self sharedPools add: aSharedPool]! !!Trait method!commentInventory	"Answer a string with a count of the classes with and without comments 	for all the classes in the package of which this class is a member."	"Morph commentInventory"	^ self environment organization commentInventory: (self category copyUpTo: $-), '*'! !!Trait method!fileOutMethod: selector	"Write source code of a single method on a file.  Make up a name for the file."		| internalStream |	internalStream := (String new: 1000) writeStream.	self fileOutMethod: selector on: internalStream.	FileStream writeSourceCodeFrom: internalStream baseName: (self name , '-' , (selector copyReplaceAll: ':' with: '')) isSt: true.! !!Trait method!notifyOfRecategorizedSelector: element from: oldCategory to: newCategory	SystemAnnouncer uniqueInstance selector: element recategorizedFrom: oldCategory to: newCategory inClass: self.	SystemAnnouncer uniqueInstance 		suspendAllWhile: [self notifyUsersOfRecategorizedSelector: element from: oldCategory to: newCategory].! !!Trait method!classSide	^self theMetaClass.! !!Trait method!instVarMappingFrom: oldClass	"Return the mapping from instVars of oldClass to new class that is used for converting old instances of oldClass."	| oldInstVarNames |	oldInstVarNames := oldClass allInstVarNames.	^self allInstVarNames 			collect: [:instVarName | oldInstVarNames indexOf: instVarName].! !!Trait method!mcWorkingCopy	MCWorkingCopy managersForClass:  self do: [: package | ^ package ]! !!Trait method!updateOrganizationDescription: aTraitMethodDescription oldCategory: oldCategoryOrNil newCategory: newCategoryOrNil changedCategories: changedCategories	| sel effectiveCategory currentCategory |	sel := aTraitMethodDescription selector.		(self includesLocalSelector: sel) ifTrue: [ ^ self ].	 	currentCategory := self organization categoryOfElement: sel.	effectiveCategory := aTraitMethodDescription effectiveMethodCategoryCurrent: currentCategory new: newCategoryOrNil.		effectiveCategory ifNil: [ 		currentCategory ifNotNil: [ changedCategories add: currentCategory ].		^ self organization removeElement: sel ].			((currentCategory isNil 		or: [ 				currentCategory == Protocol ambiguous 				or: [ currentCategory == oldCategoryOrNil ] ])		and: [ currentCategory ~~ effectiveCategory ])		ifTrue: [ 			currentCategory ifNotNil: [ changedCategories add: currentCategory ].			self organization classify: sel under: effectiveCategory suppressIfDefault: false ]! !!Trait method!reorganize	"During fileIn, !!Rectangle reorganize!! allows Rectangle to seize control and treat the next chunk as its organization.  See the transfer of control where ReadWriteStream fileIn calls scanFrom:"	^self organization! !!Trait method!isInstanceSide	^self isClassSide not! !!Trait method!noteMethodRemoved: oldMethod	SystemAnnouncer uniqueInstance		methodRemoved: oldMethod! !!Trait method!obsolete	"Make the receiver obsolete."	self superclass removeSubclass: self.	self organization: nil.	super obsolete.! !!Trait method!removeInstVarNamed: aString 	"Remove the argument, aString, as one of the receiver's instance 	variables. Create an error notification if the argument is not found."	^self subclassResponsibility! !!Trait method!noteRecategorizedSelectors: aCollection oldComposition: aTraitComposition		aCollection do: [:each | | oldCategory newCategory | 		oldCategory := self organization categoryOfElement: each.		newCategory := (self traitComposition methodDescriptionForSelector: each) effectiveMethodCategory.		self noteRecategorizedSelector: each from: oldCategory to: newCategory]! !!Trait method!localMethods	"returns the methods of classes including the ones of the traits that the class uses" 	 	^ self methods select: [:each | self includesLocalSelector: each selector].! !!Trait method!wantsChangeSetLogging	"Answer whether code submitted for the receiver should be remembered by the changeSet mechanism."	^ true! !!Trait method!package	^ RPackage organizer packageOf: self.	! !!Trait method!correspondingForTest	"Return the unit test that correspond to me. If it does not exist, it returns myself. 	 Return the tested class if sent to a class"		| className |	className := (self inheritsFrom: TestCase)		ifTrue: [ self name copyReplaceAll: 'Test' with: '' ]		ifFalse: [ self name, 'Test' ].	^ Smalltalk 		at: className asSymbol 		ifAbsent: [ self ]	! !!Trait method!usesPoolVarNamed: aString	"Only classes may use a pool variable named: aString"		^ false! !!Trait method!logMethodSource: aText forMethod: aCompiledMethod inCategory: category withStamp: changeStamp	aCompiledMethod		putSource: aText		class: self		category: category		withStamp: changeStamp 		inFile: 2		priorMethod: (self					compiledMethodAt: aCompiledMethod selector					ifAbsent: [])! !!Trait method!duringTestCompileSilently: code storeSource: storeSource classified: aCategory	^ Author 		useAuthor: 'TestsAuthor'		during: [ [			self 				compile: code				classified: (aCategory ifNil: [ '' ])				withStamp: nil 				notifying: nil 				logSource: storeSource ] fuelValueWithoutNotifications ]! !!Trait method!organization: aClassOrg	"Install an instance of ClassOrganizer that represents the organization of the messages of the receiver."	aClassOrg ifNotNil: [aClassOrg setSubject: self].	self basicOrganization: aClassOrg.! !!Trait method!superclass: aClass methodDictionary: mDict format: fmt	"Basic initialization of the receiver"	super superclass: aClass methodDictionary: mDict format: fmt.	self instanceVariables: nil.	self organization: nil.! !!Trait method!hasClassSide	^self subclassResponsibility.! !!Trait method!isExtendedInPackage: aPackage	"returns true if aPackage defines an extension to this class"	^ aPackage extendsClass: self.! !!Trait method!uncategorizedSelectors	^ self selectorsInProtocol: Protocol unclassified! !!Trait method!copyCategory: cat from: aClass classified: newCat 	"Specify that one of the categories of messages for the receiver is the 	third argument, newCat. Copy each message found in the category cat in 	class aClass into this new category."	self copyAll: (aClass organization listAtCategoryNamed: cat)		from: aClass		classified: newCat! !!Trait method!methodsFor: categoryName 	"Answer a ClassCategoryReader for compiling the messages in the category, categoryName, of the receiver."	^ ClassCategoryReader new setClass: self category: categoryName asSymbol	"(False methodsFor: 'logical operations') inspect"! !!Trait method!sharedPoolOfVarNamed: aString	"Only classes may have shared pools"		^ nil! !!Trait method!compile: text classified: category notifying: requestor	| stamp |	stamp := self acceptsLoggingOfCompilation		ifTrue: [ Author changeStamp ]		ifFalse: [ nil ].	^ self		compile: text		classified: category		withStamp: stamp		notifying: requestor! !!Trait method!isMeta	^self isClassSide! !!Trait method!packageRefactoringMenu: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Rewrite Code')		order:  100;		withSeparatorAfter.		(aBuilder item: #'Rewrite Code')		action: [ target refactor rewriteCode ];		parent: #'Rewrite Code';		order: 0.	(aBuilder item: #'Search Code')		action: [ target refactor searchCode ];		parent: #'Rewrite Code';		order: 100.! !!Trait method!fileOutMethod: selector on: aStream		(selector == #Comment) ifTrue: [^ self inform: 'Sorry, cannot file out class comment in isolation.'].	(self includesSelector: selector) ifFalse: [^ self error: 'Selector ', selector asString, ' not found'].	aStream header; timeStamp.	self printMethodChunk: selector withPreamble: true		on: aStream moveSource: false toFile: 0.! !!Trait method!fileOutOrganizationOn: aFileStream	"File a description of the receiver's organization on aFileStream."	aFileStream cr; nextPut: $!!.	aFileStream nextChunkPut: self name, ' reorganize'; cr.	aFileStream nextChunkPut: self organization stringForFileOut ; cr! !!Trait method!linesOfCode 	"An approximate measure of lines of code.	Includes comments, but excludes blank lines."	| lines |	lines := self localMethods inject: 0 into: [:sum :each | sum + each linesOfCode]. 	^ self isMeta 		ifTrue: [lines]		ifFalse: [lines + self class linesOfCode]! !!Trait method!allSelectorsInProtocol: aName 	"Answer a list of all the methods of the receiver and all its 	superclasses that are in the protocol named aName"		| aColl |	aColl := OrderedCollection new.	self withAllSuperclasses do: [:aClass | 		aColl addAll: (aClass organization listAtCategoryNamed: aName) ].	^ aColl asSet asArray sort! !!Trait method!groupRefactoring: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Rewrite Code')		order:  100;		withSeparatorAfter.		(aBuilder item: #'Rewrite Code')		action: [ target refactor rewriteCode ];		parent: #'Rewrite Code';		order: 0.	(aBuilder item: #'Search Code')		action: [ target refactor searchCode ];		parent: #'Rewrite Code';		order: 100.! !!Trait method!errorCategoryName	self error: 'Category name must be a String'! !!Trait method!packages	"the extending packages of a class are the packages that extend it."		^  self extendingPackages asSet copy add: self package; yourself! !!Trait method!printCategoryChunk: category on: aFileStream withStamp: changeStamp priorMethod: priorMethod 	"Print a method category preamble.  This must have a category name.	It may have an author/date stamp, and it may have a prior source link.	If it has a prior source link, it MUST have a stamp, even if it is empty.""The current design is that changeStamps and prior source links are preserved in the changes file.  All fileOuts include changeStamps.  Condensing sources, however, eliminates all stamps (and links, natch)."	aFileStream cr; nextPut: $!!.	aFileStream nextChunkPut: (String streamContents:		[:strm |		strm nextPutAll: self name; nextPutAll: ' methodsFor: '; print: category asString.		(changeStamp ~~ nil and:			[changeStamp size > 0 or: [priorMethod ~~ nil]]) ifTrue:			[strm nextPutAll: ' stamp: '; print: changeStamp].		priorMethod ~~ nil ifTrue:			[strm nextPutAll: ' prior: '; print: priorMethod sourcePointer]]).	! !!Trait method!allProtocolsUpTo: mostGenericClass	"Answer a list of all the method protocols of the receiver and all its superclasses, up through mostGenericClass"	| otherClassCategories thisClassCategories lowercaseSortBlock  |			otherClassCategories := OrderedCollection new.	lowercaseSortBlock  := [ :a :b | a asLowercase <= b asLowercase ].		(self allSuperclassesIncluding: mostGenericClass) do: [ :aClass | 		 otherClassCategories addAll: aClass organization categories ].	otherClassCategories remove: 'no messages' ifAbsent: [  ].	thisClassCategories := self organization categories sorted: lowercaseSortBlock.														^ thisClassCategories , ((otherClassCategories asSet removeAllSuchThat: [ :each |								thisClassCategories includes: each ]) sorted: lowercaseSortBlock)! !!Trait method!instVarIndexFor: instVarName ifAbsent: aBlock	"Answer the index of the named instance variable."	| index |	index := self instanceVariables == nil 				ifTrue: [0]				ifFalse: [self instanceVariables indexOf: instVarName ifAbsent: [0]].	index = 0 ifTrue: 		[^self superclass == nil 			ifTrue: [aBlock value]			ifFalse: [self superclass instVarIndexFor: instVarName ifAbsent: aBlock]].	^self superclass == nil 			ifTrue: [index]		ifFalse: [index + self superclass instSize]! !!Trait method!noteRecategorizedSelector: aSymbol from: oldCategoryOrNil to: newCategoryOrNil	| changedCategories |	changedCategories := self updateOrganizationSelector: aSymbol oldCategory: oldCategoryOrNil newCategory: newCategoryOrNil.	changedCategories do: [:each |		(self organization isEmptyCategoryNamed: each) ifTrue: [self organization removeCategory: each]]! !!Trait method!uncategorizedMethods	self deprecated: 'Use uncategorizedSelectors' on: '28 August 2013' in: #'Pharo3.0'.	^ self uncategorizedSelectors ! !!Trait method!comment: aStringOrText stamp: aStamp	"Set the receiver's comment to be the argument, aStringOrText."	self instanceSide classComment: aStringOrText stamp: aStamp.! !!Trait method!isExtended	^ self extendingPackages isEmpty! !!Trait method!storeOn: aStream	"Classes and Metaclasses have global names."	aStream nextPutAll: self name! !!Trait method!usesLocalPoolVarNamed: aString	^false.! !!Trait method!manifestBuilderForRuleChecker: aRuleChecker	"Return the manifestsince the rulechecker is keeping a cache, we ask it back"	^ aRuleChecker manifestBuilderOfClass: self! !!Trait method!definitionForNautilus	^ self definition! !!Trait method!compile: text classified: category withStamp: changeStamp notifying: requestor	^ self		compile: text		classified: category		withStamp: changeStamp		notifying: requestor		logSource: self acceptsLoggingOfCompilation! !!Trait method!instVarNames	"Answer an Array of the receiver's instance variable names."	self instanceVariables == nil		ifTrue: [^#()]		ifFalse: [^self instanceVariables]! !!Trait method!noteAddedSelector: aSelector meta: isMeta	"A hook allowing some classes to react to adding of certain selectors"! !!Trait method!duringTestCompileSilently: code classified: aCategory	^ self 		duringTestCompileSilently: code		storeSource: true		classified: aCategory! !!Trait method!printMethodChunk: selector withPreamble: doPreamble on: outStream moveSource: moveSource toFile: fileIndex	"Copy the source code for the method associated with selector onto the fileStream.  If moveSource true, then also set the source code pointer of the method."	| preamble method oldPos newPos sourceFile endPos |	doPreamble		ifTrue: [ preamble := self name , ' methodsFor: ' , (self organization categoryOfElement: selector) asString printString ]		ifFalse: [ preamble := '' ].	method := self methodDict		at: selector		ifAbsent: [ 			outStream				nextPutAll: selector;				cr.			outStream				tab;				nextPutAll: '** ERROR!!  THIS SCRIPT IS MISSING ** ' translated;				cr;				cr.			outStream nextPutAll: '  '.			^ outStream ].		oldPos := method filePosition.			sourceFile := SourceFiles at: method fileIndex.			preamble size > 0				ifTrue: [ 					"Copy the preamble"					outStream copyPreamble: preamble from: sourceFile at: oldPos ]				ifFalse: [ sourceFile position: oldPos ].	"Copy the method chunk"			newPos := outStream position.			outStream copyMethodChunkFrom: sourceFile.			sourceFile skipSeparators.	"The following chunk may have ]style["			sourceFile peek == $]				ifTrue: [ 					outStream						cr;						copyMethodChunkFrom: sourceFile ].			moveSource				ifTrue: [ 					"Set the new method source pointer"					endPos := outStream position.					method setSourcePosition: newPos inFile: fileIndex ].	preamble size > 0		ifTrue: [ outStream nextChunkPut: ' ' ].	^ outStream cr! !!Trait method!fileOutChangedMessages: aSet on: aFileStream moveSource: moveSource toFile: fileIndex 	"File a description of the messages of this class that have been 	changed (i.e., are entered into the argument, aSet) onto aFileStream.  If 	moveSource, is true, then set the method source pointer to the new file position.	Note when this method is called with moveSource=true, it is condensing the	.changes file, and should only write a preamble for every method."	| org |	(org := self organization) realCategories do: 		[:cat | | sels | 		sels := (org listAtCategoryNamed: cat) select: [:sel | aSet includes: sel].		sels do:			[:sel |  self printMethodChunk: sel withPreamble: true on: aFileStream							moveSource: moveSource toFile: fileIndex]]! !!Trait method!fileOutChangedMessages: aSet on: aFileStream 	"File a description of the messages of the receiver that have been 	changed (i.e., are entered into the argument, aSet) onto aFileStream."	self fileOutChangedMessages: aSet		on: aFileStream		moveSource: false		toFile: 0! !!Trait method!allMethodsInCategory: aName 	"Answer a list of all the methods of the receiver and all its 	superclasses that are in the category named aName"	self deprecated: 'Use allSelectorsInProtocol: ' on: '28 August 2013' in: #'Pharo3.0'.	^ self allSelectorsInProtocol: aName! !!Trait method!notifyRepackage: selector method: compiledMethod oldProtocol: oldProtocol newProtocol: newProtocol	| oldPackage newPackage |		(newProtocol = oldProtocol)		ifTrue: [ ^ self ].			"This indirection is because we need to abstract RPackage from the kernel"	#RPackage asClassIfPresent: [ :rPackageClass | 			newPackage := rPackageClass organizer 				packageForProtocol: newProtocol 				inClass: self.			oldPackage := rPackageClass organizer 				packageForProtocol: oldProtocol 				inClass: self.						"Announce recategorization"			newPackage = oldPackage				ifFalse: [ 					SystemAnnouncer uniqueInstance 						methodRepackaged: compiledMethod 						from: oldPackage 						to: newPackage ] ].			SystemAnnouncer uniqueInstance		selector: selector		recategorizedFrom: oldProtocol		to: newProtocol		inClass: self! !!Trait method!instVarNamesAndOffsetsDo: aBinaryBlock	"This is part of the interface between the compiler and a class's instance or field names.	 The class should enumerate aBinaryBlock with the instance variable name strings and	 their integer offsets.  The order is important. Names evaluated later will override the	 same names occurring earlier."	| superInstSize |	(superInstSize := self superclass notNil ifTrue: [self superclass instSize] ifFalse: [0]) > 0 ifTrue:		[self superclass instVarNamesAndOffsetsDo: aBinaryBlock].	1 to: self instSize - superInstSize do:		[:i| aBinaryBlock value: (self instanceVariables at: i) value: i + superInstSize]! !!Trait method!criticNameOn: aStream	"This behavior may be folded later by changing the name of this method or using another one."		aStream 		<< self name 		<< ' (' 		<< self category 		<< ')' ! !!Trait method!comment: aStringOrText	"Set the receiver's comment to be the argument, aStringOrText."	self instanceSide classComment: aStringOrText.! !!Trait method!copyMethodDictionaryFrom: donorClass	"Copy the method dictionary of the donor class over to the receiver"	self methodDict: donorClass copyOfMethodDictionary.	self organization: donorClass organization deepCopy.! !!Trait method!fileOutCategory: catName 	| internalStream |	internalStream := (String new: 1000) writeStream.	internalStream header; timeStamp.	self fileOutCategory: catName on: internalStream moveSource: false toFile: 0.	internalStream trailer.	^ FileStream writeSourceCodeFrom: internalStream baseName: (self name , '-' , catName) isSt: true.! !!Trait method!selectorsInProtocol: aName 	"Answer a list of the selectors of the receiver that are in category named aName"		| aColl |	aColl := Set withAll: (self organization listAtCategoryNamed: aName).	^ aColl asArray sort! !!Trait method!addSelectorSilently: selector withMethod: compiledMethod	super addSelectorSilently: selector withMethod: compiledMethod.	self instanceSide noteAddedSelector: selector meta: self isMeta.! !!Trait method!removeSelector: selector 	"Remove the message whose selector is given from the method 	dictionary of the receiver, if it is there. Answer nil otherwise."		| priorMethod priorProtocol origin | 	priorMethod := self compiledMethodAt: selector ifAbsent: [^ nil].	origin := priorMethod origin.	priorProtocol := self whichCategoryIncludesSelector: selector.	super removeSelector: selector.	SystemAnnouncer uniqueInstance 		suspendAllWhile: [self updateOrganizationSelector: selector oldCategory: priorProtocol newCategory: nil].	SystemAnnouncer uniqueInstance 			methodRemoved: priorMethod selector: selector inProtocol: priorProtocol class: self origin: origin.! !!Trait method!classThatDefinesInstanceVariable: instVarName	(self instVarNames notNil and: [self instVarNames includes: instVarName asString]) ifTrue: [^ self]. 	^self superclass ifNotNil: [self superclass classThatDefinesInstanceVariable: instVarName]! !!Trait method!compileSilently: code classified: category	"Compile the code and classify the resulting method in the given category, leaving no trail in the system log, nor in any change set, nor in the 'recent submissions' list. This should only be used when you know for sure that the compilation will succeed."	^ self compileSilently: code classified: category notifying: nil.! !!Trait method!commentStamp: changeStamp prior: indexAndOffset	"Prior source link ignored when filing in."	^ ClassCommentReader new setClass: self				category: #Comment				changeStamp: changeStamp! !!Trait method!comment	"Answer the receiver's comment. (If missing, supply a template) "	| aString |	aString := self instanceSide organization classComment.	aString isEmpty ifFalse: [^ aString].	^self classCommentBlank! !!Trait method!allInstVarNamesEverywhere	"Answer the set of inst var names used by the receiver, all superclasses, and all subclasses"	| aList |	aList := OrderedCollection new.	(self allSuperclasses , self withAllSubclasses asOrderedCollection) do:		[:cls | aList addAll: cls instVarNames].	^ aList asSet	"BorderedMorph allInstVarNamesEverywhere"! !!Trait method!extendingPackages	"the extending packages of a class are the packages that extend it."	^ RPackage organizer extendingPackagesOf: self! !!Trait method!checkForInstVarsOK: instVarString	"Return true if instVarString does no include any names used in a subclass"	| instVarArray |	instVarArray := instVarString subStrings: ' '.	self allSubclasses do:		[:cl | cl instVarNames do:			[:n | (instVarArray includes: n)				ifTrue: [self error: n , ' is already used in ' , cl name.						^ false]]].	^ true! !!Trait method!fileOutOn: aFileStream 	"File a description of the receiver on aFileStream."	self fileOutOn: aFileStream		moveSource: false		toFile: 0! !!Trait method!moveChangesTo: newFile 	"Used in the process of condensing changes, this message requests that 	the source code of all methods of the receiver that have been changed 	should be moved to newFile."	| changes |	changes := self selectors select: [:sel | (self compiledMethodAt: sel) fileIndex > 1 ].	self		fileOutChangedMessages: changes		on: newFile		moveSource: true		toFile: 2! !!Trait method!hasInstVarNamed: aString	"Return true whether the receiver defines an instance variable named aString."		^ self instVarNames includes: aString! !!Trait method!putClassCommentToCondensedChangesFile: aFileStream	"Called when condensing changes.  If the receiver has a class comment, and if that class comment does not reside in the .sources file, then write it to the given filestream, with the resulting RemoteString being reachable from the source file #2.  Note that any existing backpointer into the .sources file is lost by this process -- a situation that maybe should be fixed someday."	| header aStamp aCommentRemoteStr |	self isMeta ifTrue: [^ self].  "bulletproofing only"	((aCommentRemoteStr := self organization commentRemoteStr) isNil or:		[aCommentRemoteStr sourceFileNumber = 1]) ifTrue: [^ self].	aFileStream cr; nextPut: $!!.	header := String streamContents: [:strm | strm nextPutAll: self name;		nextPutAll: ' commentStamp: '.		(aStamp := self organization commentStamp ifNil: ['<historical>']) storeOn: strm.		strm nextPutAll: ' prior: 0'].	aFileStream nextChunkPut: header.	aFileStream cr.	self organization classComment: (RemoteString newString: self organization classComment onFileNumber: 2 toFile: aFileStream) stamp: aStamp! !!Trait method!duringTestCompileSilently: code	^ self 		duringTestCompileSilently: code 		storeSource: true! !!Trait method!classVariablesString	"Answer a string of my class variable names separated by spaces."	^String streamContents: [ :stream | 		self classVarNames 			do: [ :each | stream nextPutAll: each ]			separatedBy: [ stream space ] ]! !!Trait method!newInstanceFrom: oldInstance variable: variable size: instSize map: map	"Create a new instance of the receiver based on the given old instance.	The supplied map contains a mapping of the old instVar names into	the receiver's instVars"	| new |	variable		ifTrue: [new := self basicNew: oldInstance basicSize]		ifFalse: [new := self basicNew].	1 to: instSize do: 		[:offset |  (map at: offset) > 0 ifTrue:			[new instVarAt: offset					put: (oldInstance instVarAt: (map at: offset))]].	variable 		ifTrue: [1 to: oldInstance basicSize do: 					[:offset |					new basicAt: offset put: (oldInstance basicAt: offset)]].	^new! !!Trait method!organization	"Answer the instance of ClassOrganizer that represents the organization 	of the messages of the receiver."	self basicOrganization		ifNil: [ self basicOrganization: (self isTrait						ifTrue: [ ClassOrganization new ]						ifFalse: [ ClassOrganization forClass: self ]) ].	^self basicOrganization setSubject: self.	"Making sure that subject is set correctly. It should not be necessary."		! !!Trait method!classComment: aString stamp: aStamp	"Store the comment, aString or Text or RemoteString, associated with the class we are organizing.  Empty string gets stored only if had a non-empty one before."	| pointer header file oldCommentRemoteString oldComment oldStamp |	oldComment := self organization classComment.	oldStamp := self organization commentStamp.	(aString isKindOf: RemoteString) ifTrue: [		SystemAnnouncer uniqueInstance 			class: self 			oldComment: oldComment 			newComment: aString string 			oldStamp: oldStamp 			newStamp: aStamp.		^ self organization classComment: aString stamp: aStamp].	oldCommentRemoteString := self organization commentRemoteStr.	(aString size = 0) & (oldCommentRemoteString isNil) ifTrue: [^ self organization classComment: nil].		"never had a class comment, no need to write empty string out"	pointer := oldCommentRemoteString 			ifNil: [0] 			ifNotNil: [oldCommentRemoteString sourcePointer].		(file := SourceFiles at: 2) ifNotNil: [		file setToEnd; cr; nextPut: $!!.	"directly"		"Should be saying (file command: 'H3') for HTML, but ignoring it here"		header := String streamContents: [:strm | strm nextPutAll: self name;			nextPutAll: ' commentStamp: '.			aStamp storeOn: strm.			strm nextPutAll: ' prior: '; nextPutAll: pointer printString].		file nextChunkPut: header].		self organization 		classComment: (RemoteString newString: aString onFileNumber: 2) 		stamp: aStamp.		SystemAnnouncer uniqueInstance 		class: self 		oldComment: oldComment 		newComment: aString 		oldStamp: oldStamp 		newStamp: aStamp! !!Trait method!compile: text classified: category withStamp: changeStamp notifying: requestor logSource: logSource 	| method |	method := self compiler		source: text;		requestor: requestor;		category: category;		failBlock:  [ ^nil ];		compile.			logSource ifTrue: [		self 			logMethodSource: (requestor ifNotNil: [ :r | r text ] ifNil: [ text ]) "the requestor text might have been changed by the compiler and may be different thant text argument"			forMethod: method			inCategory: category 			withStamp: changeStamp].			self 		addAndClassifySelector: method selector 		withMethod: method 		inProtocol: category 		notifying: requestor.				self instanceSide 		noteCompilationOf: method selector 		meta: self isClassSide.	^ method selector! !!Trait method!classThatDefinesClassVariable: classVarName	"Answer the class that defines the given class variable"	(self classPool includesKey: classVarName asSymbol) ifTrue: [^ self]. 	^self superclass ifNotNil: [self superclass classThatDefinesClassVariable: classVarName]! !!Trait method!zapOrganization	"Remove the organization of this class by message categories.	This is typically done to save space in small systems.  Classes and methods	created or filed in subsequently will, nonetheless, be organized"	self organization: nil.	self isClassSide ifFalse: [self classSide zapOrganization]! !!Trait method!compileSilently: code classified: category notifying: requestor	"Compile the code and classify the resulting method in the given category, leaving no trail in the system log, nor in any change set, nor in the 'recent submissions' list. This should only be used when you know for sure that the compilation will succeed."	^ SystemAnnouncer uniqueInstance 		suspendAllWhile: [self compile: code classified: category notifying: requestor].! !!Trait method!authors	"Returns a bag representing the author frequency based on the latest version of the methods of the receiver."	^(self methods, self class methods) collect: [ :each | each author ] as: Bag .		! !!Trait method!commentStamp: changeStamp	self organization commentStamp: changeStamp.	^ self commentStamp: changeStamp prior: 0! !!Trait method!criticClass	"Return the class of the receiver for the critic browser. This behavior may be folded later by changing the name of this method or using another one."		^ self! !!Trait method!packageFromOrganizer: anOrganizer	"returns the package that defines this class"	^ anOrganizer packageOf: self.! !!Trait method!instanceVariableNamesDo: anUnaryBlock	"This is part of the interface between the compiler and a class's instance or field names.	 The class should enumerate anUnaryBlock with the instance variable name strings.  The order is important. Names evaluated later will override the	 same names occurring earlier."	| superInstSize |	(superInstSize := self superclass notNil ifTrue: [self superclass instSize] ifFalse: [0]) > 0 ifTrue:		[self superclass instanceVariableNamesDo: anUnaryBlock].	1 to: self instSize - superInstSize do:		[:i| anUnaryBlock value: (self instanceVariables at: i)]! !!Trait method!printSubclassesOn: aStream level: level 	"As part of the algorithm for printing a description of the receiver, print the	subclass on the file stream, aStream, indenting level times."	| subclassNames |	aStream crtab: level.	aStream nextPutAll: self name.	aStream space; print: self instVarNames.	self == Class		ifTrue: 			[aStream crtab: level + 1; nextPutAll: '[ ... all the Metaclasses ... ]'.			^self].	subclassNames := self subclasses asSortedCollection:[:c1 :c2| c1 name <= c2 name].	"Print subclasses in alphabetical order"	subclassNames do:		[:subclass | subclass printSubclassesOn: aStream level: level + 1]! !!Trait method!applyChangesOfNewTraitCompositionReplacing: oldComposition	| changedSelectors oldMethodDict |	oldMethodDict := self methodDict copy.	changedSelectors := super applyChangesOfNewTraitCompositionReplacing: oldComposition.	self noteRecategorizedSelectors: changedSelectors oldComposition: oldComposition.	self noteChangesFrom: oldMethodDict.	^ changedSelectors.! !!Trait method!removeCategory: aString 	"Remove each of the messages categorized under aString in the method 	dictionary of the receiver. Then remove the category aString."	self deprecated: 'Use removeProtocol:' on: '28 August 2013' in: #'Pharo3.0'.	self removeProtocol: aString! !!Trait method!updateOrganizationDescription: each oldCategory: newCategoryOrNil newCategory: oldCategoryOrNil changed: changedCategories	| sel effectiveCategory currentCategory |		sel := each selector.	(self includesLocalSelector: sel) ifTrue: [ ^ self ].		currentCategory := self organization categoryOfElement: sel.	effectiveCategory := each 		effectiveMethodCategoryCurrent: currentCategory 		new: newCategoryOrNil.		effectiveCategory 		ifNil: [ 			currentCategory ifNotNil: [ changedCategories add: currentCategory ].			self organization removeElement: sel.			^ self ].			(currentCategory isNil 		or: [ currentCategory == Protocol ambiguous 		or: [ currentCategory == oldCategoryOrNil ] ])	ifFalse: [ ^ self ].		(currentCategory ~~ effectiveCategory)		ifTrue: [ 			currentCategory ifNotNil: [ changedCategories add: currentCategory ].			self organization classify: sel under: effectiveCategory suppressIfDefault: false ]! !!Trait method!removeProtocol: aString 	"Remove each of the messages categorized under aString in the method 	dictionary of the receiver. Then remove the category aString."	| categoryName |	categoryName := aString asSymbol.	(self organization listAtCategoryNamed: categoryName) do:		[:sel | self removeSelector: sel].	self organization removeCategory: categoryName! !!Trait method!codeRewritingClass: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Rewrite Code')		action: [ target refactor rewriteCode ];		parent: #'Code Rewriting';		order: 0.	(aBuilder item: #'Search Code')		action: [ target refactor searchCode ];		parent: #'Code Rewriting';		order: 100.			(aBuilder item: #'Type class')		action: [ target refactor typeClass ];		parent: #'Code Rewriting';		order: 200;		withSeparatorAfter.			(aBuilder item: #'Category Regex')		action: [ target refactor categoryRegex ];		parent: #'Code Rewriting';		order: 300.			(aBuilder item: #'Class Regex')		action: [ target refactor classRegex ];		parent: #'Code Rewriting';		order: 400.			(aBuilder item: #'Protocol Regex')		action: [ target refactor protocolRegex ];		parent: #'Code Rewriting';		order: 500.			(aBuilder item: #'Source Regex')		action: [ target refactor sourceRegex ];		parent: #'Code Rewriting';		order: 600;		withSeparatorAfter.! !!Trait method!copyAll: selArray from: class 	"Install all the methods found in the method dictionary of the second 	argument, class, as the receiver's methods. Classify the messages under 	-As yet not classified-."	self copyAll: selArray		from: class		classified: nil! !!Trait method!methodsInCategory: aName 	"Answer a list of the methods of the receiver that are in category named aName"	self deprecated: 'Use selectorsInProtocol: instead' on: '28 August 2013' in: #'Pharo3.0'.	^ self selectorsInProtocol: aName! !!Trait method!updateInstancesFrom: oldClass	"Recreate any existing instances of the argument, oldClass, as instances of 	the receiver, which is a newly changed class. Permute variables as 	necessary. Return the array of old instances (none of which should be	pointed to legally by anyone but the array)."	"ar 7/15/1999: The updating below is possibly dangerous. If there are any	contexts having an old instance as receiver it might crash the system if	the new receiver in which the context is executed has a different layout.	See bottom below for a simple example:"	| oldInstances |	oldInstances := oldClass allInstances asArray.	oldInstances := self updateInstances: oldInstances from: oldClass isMeta: self isMeta.	^oldInstances"	| crashingBlock class |	class := Object subclass: #CrashTestDummy		instanceVariableNames: 'instVar'		classVariableNames: ''		poolDictionaries: ''		category: 'Crash-Test'.	class compile:'instVar: value instVar := value'.	class compile:'crashingBlock ^[instVar]'.	crashingBlock := (class new) instVar: 42; crashingBlock.	Object subclass: #CrashTestDummy		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Crash-Test'.	crashingBlock.	crashingBlock value.	"! !!Trait method!instVarIndexFor: instVarName	"Answer the index of the named instance variable."	| index |	index := self instanceVariables == nil 		ifTrue: [0]		ifFalse: [self instanceVariables indexOf: instVarName].	index = 0 ifTrue: 		[^self superclass == nil 			ifTrue: [0]			ifFalse: [self superclass instVarIndexFor: instVarName]].	^self superclass == nil 			ifTrue: [index]		ifFalse: [index + self superclass instSize]! !!Trait method!isClassSide	^self == self classSide! !!Trait method!noteCompilationOf: aSelector meta: isMeta	"A hook allowing some classes to react to recompilation of certain selectors"! !!Trait method!reformatAll	"Reformat all methods in this class"	self methods do: [:method | method reformat]! !!Trait method!allSharedPools	"Answer an ordered collection  of the shared pools the receiver shares, including those defined  in the superclasses of the receiver."		^ OrderedCollection new! !!Trait method!notifyUsersOfRecategorizedSelector: element from: oldCategory to: newCategory	self users do: [:each |		each noteRecategorizedSelector: element from: oldCategory to: newCategory]! !!Trait method!subclassesDo: aBlock	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses."	^self subclasses do: aBlock! !!Trait method!fileOutCategory: aSymbol on: aFileStream moveSource: moveSource toFile: fileIndex 	"File a description of the receiver's category, aString, onto aFileStream. If 	moveSource, is true, then set the method source pointer to the new file position.	Note when this method is called with moveSource=true, it is condensing the	.sources file, and should only write one preamble per method category."	| selectors |	aFileStream cr.	selectors := self selectorsToFileOutCategory: aSymbol.	"Overridden to preserve author stamps in sources file regardless"	selectors do: [:sel |		self printMethodChunk: sel 			withPreamble: true			on: aFileStream 			moveSource: moveSource 			toFile: fileIndex].	^ self! !!Trait method!hasSharedPools	"Only a class may have shared pools"	^ false! !!Trait method!instVarNameForIndex: index	"Answer the named instance variable with index index or nil if none."	| superInstSize |	index > self instSize ifTrue: [^nil].	superInstSize := self superclass ifNil: [0] ifNotNil: [self superclass instSize].	index > superInstSize ifTrue:		[^self instanceVariables at: index - superInstSize].	self superclass ifNil: [^nil].	^self superclass instVarNameForIndex: index	"(Object allSubclasses select:		[:cls| cls instSize > cls superclass instSize and: [cls subclasses isEmpty and: [cls superclass instSize > 0]]]) collect:			[:cls| (1 to: cls instSize) collect: [:i| cls instVarNameForIndex: i]]"! !!Trait method!compile: code classified: heading 	"Compile the argument, code, as source code in the context of the 	receiver and install the result in the receiver's method dictionary under 	the classification indicated by the second argument, heading. nil is to be 	notified if an error occurs. The argument code is either a string or an 	object that converts to a string or a PositionableStream on an object that 	converts to a string."	^self		compile: code		classified: heading		notifying: nil! !!Trait method!copyCategory: cat from: class 	"Specify that one of the categories of messages for the receiver is cat, as 	found in the class, class. Copy each message found in this category."	self copyCategory: cat		from: class		classified: cat! !!Trait method!instanceSide	^ self theNonMetaClass! !!Trait method!renameMethodAllItem: aBuilder	^ (aBuilder item: #'Rename method (all)')			keyText: 'r, m' if: Nautilus useOldStyleKeys not;			keyText: 'r' if: Nautilus useOldStyleKeys;			action: [ | scroll target |				target := aBuilder model.				scroll := target methodWidget vScrollValue.				target refactor renameMethodFor: target selectedMethod originMethod.				target methodWidget vScrollValue: scroll ].! !!Trait method!classesThatImplementAllOf: selectorSet	"Return an array of any classes that implement all the messages in selectorSet."	| found remaining |	found := OrderedCollection new.	selectorSet do:		[:sel | (self includesSelector: sel) ifTrue: [found add: sel]].	found isEmpty		ifTrue: [^ self subclasses inject: Array new						into: [:subsThatDo :sub |							subsThatDo , (sub classesThatImplementAllOf: selectorSet)]]		ifFalse: [remaining := selectorSet copyWithoutAll: found.				remaining isEmpty ifTrue: [^ Array with: self].				^ self subclasses inject: Array new						into: [:subsThatDo :sub |							subsThatDo , (sub classesThatImplementAllOf: remaining)]]! !!Trait method!sourceCodeRefactoring: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Create cascade')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor createCascadeBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 0.				(aBuilder item: #'Extract method')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor extractBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 100.				(aBuilder item: #'Extract method to component')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor extractToComponentBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 200.			(aBuilder item: #'Extract to temporary')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor extractToTemporaryBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 300.				(aBuilder item: #'Inline method')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor inlineMethodBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 400.				(aBuilder item: #'Inline method from component')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor inlineMethodFromComponentBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 500.				(aBuilder item: #'Inline temporary')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor inlineTemporaryBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 600.				(aBuilder item: #'Move variable definition')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor moveVariableDefinitionBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 700.					(aBuilder item: #'Rename temporary')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor renameTemporaryNamed: target sourceTextArea selectedContents Between: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 800.								(aBuilder item: #'Split cascade')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor splitCascadeBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 900.							(aBuilder item: #'Temporary to instvar')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor temporaryToInstanceVariableNamed: target sourceTextArea selectedContents asString Between: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 1000;			withSeparatorAfter.					(aBuilder item: #'Undo')			order: 1100;			label: target refactor undoLabel;			action: [ target refactor undoOperation ];			enabled: target refactor undoEnabled;			parent: #'Source code refactoring'.		(aBuilder item: #'Redo')			order: 1200;			label: target refactor redoLabel;			action: [ target refactor redoOperation ];			enabled: target refactor redoEnabled;			parent: #'Source code refactoring';			withSeparatorAfter.! !!Trait method!duringTestCompileSilently: code storeSource: storeSource	^ self		duringTestCompileSilently: code		storeSource: storeSource		classified: ''! !!Trait method!whichCategoryIncludesSelector: aSelector 	"Answer the category of the argument, aSelector, in the organization of 	the receiver, or answer nil if the receiver does not inlcude this selector."	(self includesSelector: aSelector)		ifTrue: [^ self organization categoryOfElement: aSelector]		ifFalse: [^nil]! !!Trait method!classCommentBlank	| existingComment stream |	existingComment := self theNonMetaClass organization classComment.	existingComment isEmpty		ifFalse: [^existingComment].	stream := (String new: 100) writeStream.	stream		nextPutAll: 'A';		nextPutAll: (self name first isVowel ifTrue: ['n '] ifFalse: [' ']);		nextPutAll: self name;		nextPutAll: ' is xxxxxxxxx.'.			(self instVarNames size > 0)		 ifTrue: [stream cr; cr; nextPutAll: 'Instance Variables'.  ].			self instVarNames asSortedCollection do: [:each |		stream			cr; tab; nextPutAll: each;			nextPut: $:;			tab; tab;			nextPutAll: '<Object>'].	stream cr.	self instVarNames asSortedCollection do: [:each |		stream			cr; nextPutAll: each;			cr; tab; nextPutAll: '- xxxxx'; cr].	^stream contents! !!Trait method!noteMethodChanged: oldMethod to: newMethod	SystemAnnouncer uniqueInstance		methodChangedFrom: oldMethod to: newMethod ! !!Trait method!wantsRecompilationProgressReported	"Answer whether the receiver would like progress of its recompilation reported interactively to the user."	^ true! !!Trait method!copyAll: selArray from: class classified: cat 	"Install all the methods found in the method dictionary of the second 	argument, class, as the receiver's methods. Classify the messages under 	the third argument, cat."	selArray do: [:s |		(class includesLocalSelector: s) ifTrue: [			self copy: s				from: class				classified: cat ] ]! !!Trait method!isDefinedInPackage: aPackage	"returns true if aPackage contains the definitino of this class"		^ aPackage includesClass: self.! !!Trait method!refactoringMethod: aBuilder	(aBuilder item: #'Refactoring')		order: -100.				(self renameMethodAllItem: aBuilder)		order: -90;		withSeparatorAfter! !!Trait method!addSelector: selector withMethod: compiledMethod notifying: requestor	| priorMethodOrNil |	priorMethodOrNil := self compiledMethodAt: selector ifAbsent: [nil].	self addSelectorSilently: selector withMethod: compiledMethod.	priorMethodOrNil 		ifNil: [SystemAnnouncer uniqueInstance methodAdded: compiledMethod selector: selector inClass: self requestor: requestor]		ifNotNil: [SystemAnnouncer uniqueInstance methodChangedFrom: priorMethodOrNil to: compiledMethod selector: selector inClass: self requestor: requestor].! !!Trait method!updateInstances: oldInstances from: oldClass isMeta: isMeta	"Recreate any existing instances of the argument, oldClass, as instances of the receiver, which is a newly changed class. Permute variables as necessary. Return the array of old instances (none of which should be pointed to legally by anyone but the array)."	"If there are any contexts having an old instance as receiver it might crash the system because the layout has changed, and the method only knows about the old layout."	| map variable instSize newInstances |	oldInstances isEmpty ifTrue:[^#()]. "no instances to convert"	isMeta ifTrue: [		oldInstances size = 1 ifFalse:[^self error:'Metaclasses can only have one instance'].		self soleInstance class == self ifTrue:[			^self error:'Metaclasses can only have one instance']].	map := self instVarMappingFrom: oldClass.	variable := self isVariable.	instSize := self instSize.	newInstances := Array new: oldInstances size.	1 to: oldInstances size do:[:i|		newInstances at: i put: (			self newInstanceFrom: (oldInstances at: i) variable: variable size: instSize map: map)].	"Now perform a bulk mutation of old instances into new ones"	oldInstances elementsExchangeIdentityWith: newInstances.	^newInstances "which are now old"! !!Trait method!hasComment	"return whether this class truly has a comment other than the default"	| org |	org := self instanceSide organization.	^org classComment isEmptyOrNil not! !!Trait method!printOn: aStream 	aStream nextPutAll: self name! !!Trait method!selectorsToFileOutCategory: aSymbol	^ self organization listAtCategoryNamed: aSymbol! !!Trait method!noteMethodAdded: aMethod	SystemAnnouncer uniqueInstance		methodAdded: aMethod! !!Trait method!acceptsLoggingOfCompilation	"Answer whether the receiver's method submisions and class defintions should be logged to the changes file and to the current change set.  The metaclass follows the rule of the class itself	Weird name is so that it will come lexically before #compile, so that a clean build can make it through."	^ true! !!Trait method!classComment: aString	"Store the comment, aString or Text or RemoteString, associated with the class we are orgainzing.  Empty string gets stored only if had a non-empty one before."	^ self classComment: aString stamp: '<historical>'! !!Trait method!spaceUsed	^super spaceUsed + (self hasClassSide		ifTrue: [self classSide spaceUsed] 		ifFalse: [0])! !!Trait method!compile: code notifying: requestor 	"Refer to the comment in Behavior|compile:notifying:." 	^self compile: code		 classified: Protocol unclassified		 notifying: requestor! !!Trait method!notifyUsersOfChangedSelectors: aCollection	self users do: [:each |		each noteChangedSelectors: aCollection]! !!Trait method!allMethodCategoriesIntegratedThrough: mostGenericClass	"Answer a list of all the method categories of the receiver and all its superclasses, up through mostGenericClass"	self deprecated: 'Use allProtocolsUpTo:' on: '28 August 2013' in: #'Pharo3.0'.	^ self allProtocolsUpTo: mostGenericClass! !!Trait method!forceNewFrom: anArray    "Create a new instance of the class and fill    its instance variables up with the array."    | object max |    object := self new.    max := self instSize.    anArray doWithIndex: [:each :index |        index > max ifFalse:            [object instVarAt: index put: each]].    ^ object! !!Trait method!allUnreferencedClassVariables	"Answer a list of the names of all the receiver's unreferenced class vars, including those defined in superclasses"	^ self systemNavigation allUnreferencedClassVariablesOf: self! !!Trait method!sharedPoolsString	"Answer a string of my shared pool names separated by spaces."	^String streamContents: [ :stream |		self sharedPools 			do: [ :each |				stream nextPutAll: (self environment 					keyAtIdentityValue: each 					ifAbsent: [ 'private' ]) ]			separatedBy: [ stream space ] ]! !!Trait method!selectorsInCategory: aName 	"Answer a list of the selectors of the receiver that are in category named aName"		| aColl |	aColl := Set withAll: (self organization listAtCategoryNamed: aName).	^ aColl asArray sort! !!Trait method!isTestCase	^false! !!Trait method!compileSilently: code 	"Compile the code and classify the resulting method in the given category, leaving no trail in the system log, nor in any change set, nor in the 'recent submissions' list. This should only be used when you know for sure that the compilation will succeed."	^ self compileSilently: code classified: 'not defined category' notifying: nil.! !!Trait method!packageOrganizer	"Returns the organizer of this class"	^ RPackage organizer ! !!Trait method!fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex	"File a description of the receiver on aFileStream. If the boolean 	argument, moveSource, is true, then set the trailing bytes to the position 	of aFileStream and to fileIndex in order to indicate where to find the 	source code."	aFileStream nextChunkPut: self definition.	self organization		putCommentOnFile: aFileStream		numbered: fileIndex		moveSource: moveSource		forClass: self.	self organization realCategories do: 		[:heading |		self fileOutCategory: heading			on: aFileStream			moveSource: moveSource			toFile: fileIndex]! !!Trait method!instanceVariablesString	"Answer a string of my instance variable names separated by spaces."	^String streamContents: [ :stream |		self instVarNames 			do: [ :each | stream nextPutAll: each ]			separatedBy: [ stream space ] ]! !!Trait method!sourceCodeRefactoringMenu: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Format')		order: 1100;		keyText: 'Ctrl Shift f';		action: [ target refactor formatSourceCode ].			(aBuilder item: #'Source code refactoring')			order: 1101;			arguments: {};			withSeparatorAfter.! !!Trait method!copy: sel from: class classified: cat 	"Install the method associated with the first arugment, sel, a message 	selector, found in the method dictionary of the second argument, class, 	as one of the receiver's methods. Classify the message under the third 	argument, cat."	| code category |	"Useful when modifying an existing class"	code := class sourceCodeAt: sel.	code ifNotNil: 			[cat				ifNil: [category := class organization categoryOfElement: sel]				ifNotNil: [category := cat].			(self includesLocalSelector: sel)				ifTrue: [code asString = (self sourceCodeAt: sel) asString 							ifFalse: [self error: self name 										, ' ' 										, sel 										, ' will be redefined if you proceed.']].			self compile: code classified: category]! !!Trait method!copy: sel from: class 	"Install the method associated with the first argument, sel, a message 	selector, found in the method dictionary of the second argument, class, 	as one of the receiver's methods. Classify the message under -As yet not 	classified-."	self copy: sel		from: class		classified: nil! !!Trait method!packagesWithoutExtensions	^ Set new add: self package; yourself.! !!Trait method!addCategory: newName before: aCategory	^ self organization addCategory: newName before: aCategory ! !!Trait method!copyAllCategoriesFrom: aClass 	"Specify that the categories of messages for the receiver include all of 	those found in the class, aClass. Install each of the messages found in 	these categories into the method dictionary of the receiver, classified 	under the appropriate categories."	aClass organization categories do: [:cat | self copyCategory: cat from: aClass]! !!Trait method!numberOfMethods	"count all methods that are local (not comming from a trait)"	| num |	num := self localMethods size.	^ self isMeta  		ifTrue: [ num ]		ifFalse: [ num + self class numberOfMethods ] ! !!Trait method!variableWordSubclass: className uses: aTraitCompositionOrArray instanceVariableNames: instVarNames	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	^ self variableWordSubclass: className		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: cat! !!Trait method!superclass: sup methodDict: md format: ft name: nm organization: org instVarNames: nilOrArray classPool: pool sharedPools: poolSet 	"Answer an instance of me, a new class, using the arguments of the 	message as the needed information.	Must only be sent to a new instance; else we would need Object flushCache."	self superclass: sup.	self methodDict: md.	self setFormat: ft.	self setName: nm.	self instanceVariables: nilOrArray.	self classPool: pool.	self sharedPools: poolSet.	self organization: org.! !!Trait method!usesLocalPoolVarNamed: aString	"Return whether the receiver uses a pool variable named: aString which is defined locally"		self hasSharedPools		ifTrue: [ self sharedPools do: [:each | (each usesClassVarNamed: aString) 												ifTrue: [ ^true ]]]		ifFalse: [ ^false ].	^false! !!Trait method!hasSharedPools	"Returns whether the receiver uses shared pools directly (Does not take into account that it may inherit shared pool uses."	^ self sharedPools notEmpty! !!Trait method!variableSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have indexable pointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				variableSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!declare: varString 	"Declare class variables common to all instances. Answer whether 	recompilation is advisable."	| newVars conflicts |	newVars :=  (varString subStrings: ' ') collect: [:x | x asSymbol].	conflicts := false.		(self classPool keys reject: [:x | newVars includes: x]) do: [:var | self removeClassVarNamed: var].		(newVars reject: [:var | self classPool includesKey: var]) do: [:var | "adding"			"check if new vars defined elsewhere"			(self innerBindingOf: var) 				ifNotNil: [(DuplicatedVariableError new) variable: var;						signal: var , ' is defined elsewhere'.					conflicts := true]].	newVars notEmpty		ifTrue: 			[self classPool: self classPool.			"in case it was nil"			newVars do: [:var | self classPool declare: var from: Undeclared]].	^conflicts! !!Trait method!subclass: aName uses: aTraitComposition with: aBlock 	"Define (or redefine) a subclass by evaluating a block closure. 	Note (MartinDias): 		This is a workaround for the subclass creation API when a trait is specified. 		To fix it well, in Pharo 4, a bit deeper refactoring is required, delegating this responsibility		to SlotClassBuilder."	^ self environment 		at: aName		ifPresent: [ :old | 			| copyOfOld newClass |			copyOfOld := old copy.			"Modify the class and set the new trait composition"			newClass := aBlock value. 			newClass setTraitComposition: aTraitComposition asTraitComposition.			"Announce that the definition changed when there is a new trait composution. 			Note: It may be a re-announce if there was other change in the class definition, 			e.g. an instace variable added."			(newClass traitComposition syntacticallyEquals: copyOfOld traitComposition) ifFalse: [ 				SystemAnnouncer uniqueInstance 					classDefinitionChangedFrom: copyOfOld 					to: newClass ].			newClass ]		ifAbsent: [			"Create the class and set the trait composition"			aBlock value				setTraitComposition: aTraitComposition asTraitComposition;				yourself ].! !!Trait method!applyChangesOfNewTraitCompositionReplacing: oldComposition	| changedSelectors |	changedSelectors := super applyChangesOfNewTraitCompositionReplacing: oldComposition.	self classSide noteNewBaseTraitCompositionApplied: self traitComposition.	^ changedSelectors! !!Trait method!criticTheNonMetaclassClass	"Return the class of the receiver for the critic browser. This behavior may be folded later by changing the name of this method or using another one."		^ self ! !!Trait method!variableByteSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver) in which the subclass is to 	have indexable byte-sized nonpointer variables."	^self classBuilder		superclass: self		variableByteSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!hasClassSide	^self classSide notNil.! !!Trait method!removeFromChanges	"References to the receiver, a class, and its metaclass should no longer be included in the system ChangeSet."	ChangeSet current removeClassAndMetaClassChanges: self! !!Trait method!isValidTraitName: aSymbol	^(aSymbol isEmptyOrNil		or: [aSymbol first isLetter not		or: [aSymbol anySatisfy: [:character | character isAlphaNumeric not]]]) not! !!Trait method!removeFromSystem	"Forget the receiver from the Smalltalk global dictionary. Any existing 	instances will refer to an obsolete version of the receiver."	self removeFromSystem: true.! !!Trait method!removeSubclass: aSubclass 	"If the argument, aSubclass, is one of the receiver's subclasses, remove it."	self subclasses == nil ifFalse:		[self subclasses:  (self subclasses copyWithout: aSubclass).		self subclasses isEmpty ifTrue: [self subclasses: nil]].! !!Trait method!binding       "Answer a binding for the receiver, sharing if possible"      | binding |	binding := self environment associationAt: self name ifAbsent: [nil -> self].       ^binding value == self ifTrue: [binding] ifFalse: [nil -> self]! !!Trait method!weakSubclass: className uses: aTraitCompositionOrArray instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "		^ self weakSubclass: className		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames 		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!fileOut	"Create a file whose name is the name of the receiver with '.st' as the 	extension, and file a description of the receiver onto it."		| internalStream |	internalStream := (String new: 100) writeStream.	internalStream header; timeStamp.	self hasSharedPools ifTrue: [		self shouldFileOutPools			ifTrue: [self fileOutSharedPoolsOn: internalStream]].	self fileOutOn: internalStream moveSource: false toFile: 0.	internalStream trailer.	FileStream writeSourceCodeFrom: internalStream baseName: self name isSt: true! !!Trait method!usesPoolVarNamed: aString	"Return whether the receiver has a pool variable named: aString, taking into account superclasses too"		self allSharedPools do: [:each | (each usesClassVarNamed: aString) ifTrue: [^true]].	^false! !!Trait method!subclass: t uses: aTraitComposition 	| cls |	cls := self				subclass: t				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'Unclassified'.	cls setTraitComposition: aTraitComposition asTraitComposition.	^ cls! !!Trait method!hasMethods	"Answer a Boolean according to whether any methods are defined for the 	receiver (includes whether there are methods defined in the receiver's 	metaclass)."	^super hasMethods or: [self class hasMethods]! !!Trait method!subclass: aSubclassSymbol instanceVariableNames: instVarNames classVariableNames: classVarNames category: aCategorySymbol	"Added to allow for a simplified subclass creation experience. "	^ self		subclass: aSubclassSymbol		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: aCategorySymbol! !!Trait method!weakSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a subclass of an existing class (the receiver) in which the subclass is to have weak indexable pointer variables."	^self classBuilder		superclass: self		weakSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!superclass: aClass methodDictionary: mDict format: fmt	"Basic initialization of the receiver"	super superclass: aClass methodDictionary: mDict format: fmt.	self subclasses: nil. ! !!Trait method!subclassesDo: aBlock 	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses."	self subclasses size == 0 		ifFalse:[self subclasses do: aBlock]! !!Trait method!newSubclass	| i className |	i := 1.	[className := (self name , i printString) asSymbol.	 self environment includesKey: className]		whileTrue: [i := i + 1].	^ self subclass: className		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Unclassified'"Point newSubclass new"! !!Trait method!fileOutInitializerOn: aStream	^self class fileOutInitializerOn: aStream! !!Trait method!setName: aSymbol andRegisterInCategory: categorySymbol environment: aSystemDictionary	(self isValidTraitName: aSymbol) ifFalse: [TraitException signal: 'Invalid trait name'].		(self environment == aSystemDictionary		and: [self name = aSymbol			and: [self category = categorySymbol]]) ifTrue: [^self].			((aSystemDictionary includes: aSymbol) and: [(aSystemDictionary at: aSymbol) ~~ self])		ifTrue: [TraitException signal: 'The name ''' , aSymbol , ''' is already used'].	(self environment notNil and: [self name notNil and: [self name ~= aSymbol]]) ifTrue: [		self environment renameClass: self as: aSymbol].		self name: aSymbol.	self environment: aSystemDictionary.		self environment at: self name put: self.	self environment organization classify: self name under: categorySymbol.	^ true! !!Trait method!isAnonymous	^self getName isNil! !!Trait method!unload	"Sent when a the class is removed.  Does nothing, but may be overridden by (class-side) subclasses."! !!Trait method!asRingDefinitionWithMethods: methodsBoolean withSuperclasses: supersBoolean withSubclasses: subsBoolean withPackages: packsBoolean	"Retrieves a ring class/trait based on the receiver.	The data loaded in the class/trait (active methods, superclasses, subclasses and packages) is requested by the users.	As it may need to traverse hierarchies for retrieving super and subclasses a ring slice is created as the container for every class, method and package.	To retrieve the slice:  aRGClass environment "	| rgClass rgSlice  rgPackageKeys |		rgSlice := RGSlice named: #fromImage.	packsBoolean ifTrue: [ 		rgPackageKeys := rgSlice loadPackagesFromImage ].	rgClass := self asRingDefinitionWithMethods: methodsBoolean withSuperclasses: supersBoolean withSubclasses: subsBoolean withPackageKeys: rgPackageKeys in: rgSlice.	rgSlice cleanEmptyPackages.	rgSlice loadTraitUsers.			^ rgClass! !!Trait method!subclass: t	^ self subclass: t instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Unclassified' ! !!Trait method!hasClassVarNamed: aString	"Return whether the receiver has a class variables (shared variables among its class and subclasses) named: aString"		^ self classVarNames includes: aString! !!Trait method!addClassVarNamed: aString 	"Add the argument, aString, as a class variable of the receiver.	Signal an error if the first character of aString is not capitalized,	or if it is already a variable named in the class."	| symbol oldState |	oldState := self copy.	aString first canBeGlobalVarInitial		ifFalse: [^self error: aString, ' class variable name should be capitalized; proceed to include anyway.'].	symbol := aString asSymbol.	self withAllSubclasses do: 		[:subclass | 		(subclass bindingOf: symbol) ifNotNil:[			^ self error: aString 				, ' is already used as a variable name in class ' 				, subclass name]].	(self classPool includesKey: symbol) ifFalse: 		["Pick up any refs in Undeclared"		self classPool declare: symbol from: Undeclared.		SystemAnnouncer uniqueInstance classDefinitionChangedFrom: oldState to: self]! !!Trait method!duplicateClassWithNewName: aSymbol	| copysName class newDefinition |	copysName := aSymbol asSymbol.	copysName = self name		ifTrue: [ ^ self ].	(Smalltalk globals includesKey: copysName)		ifTrue: [ ^ self error: copysName , ' already exists' ].	newDefinition := self definition copyReplaceAll: '#' , self name asString with: '#' , copysName asString.	class := self class compiler source: newDefinition; logged: true; evaluate.	class classSide instanceVariableNames: self classSide instanceVariablesString.	class copyAllCategoriesFrom: self.	class class copyAllCategoriesFrom: self class.	^ class! !!Trait method!weakSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have weak indexable pointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				weakSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!variableSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver) in which the subclass is to 	have indexable pointer variables."	^self classBuilder		superclass: self		variableSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!subclass: aTraitName uses: aTraitCompositionOrArray instanceVariableNames: instVarNames classVariableNames: classVarNames category: cat 	^ self		subclass: aTraitName		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: cat ! !!Trait method!rename: aString 	"The new name of the receiver is the argument, aString."	| oldName newName |	(newName := aString asSymbol) = (oldName := self name)		ifTrue: [^ self].	(self environment includesKey: newName)		ifTrue: [^ self error: newName , ' already exists'].	self setName: newName.	self environment renameClass: self from: oldName.	(Undeclared includesKey: newName)		ifTrue: [self inform: 'There are references to, ' , aString printString , 'from Undeclared. Check them after this change.'].! !!Trait method!classPoolFrom: aClass	"share the classPool with aClass."		self classPool: aClass classPool.! !!Trait method!isObsolete	"Return true if the receiver is obsolete."	^(self environment at: self name ifAbsent: [nil]) ~~ self! !!Trait method!variableByteSubclass: className uses: aTraitCompositionOrArray instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat		"Added to allow for a simplified subclass creation experience. "		^ self variableByteSubclass: className		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!fileOutPool: aPool onFileStream: aFileStream 	| aPoolName |	(aPool  isKindOf: SharedPool class) ifTrue:[^self notify: 'we do not fileout SharedPool type shared pools for now'].	aPoolName := self environment keyAtIdentityValue: aPool.	self crTrace: aPoolName.	aFileStream nextPutAll: 'Transcript show: ''' , aPoolName , '''; cr!!'; cr.	aFileStream nextPutAll: 'Smalltalk at: #' , aPoolName , ' put: Dictionary new!!'; cr.	aPool keys asSortedCollection do: [ :aKey | | aValue |		aValue := aPool at: aKey.		aFileStream nextPutAll: aPoolName , ' at: #''' , aKey asString , '''', ' put:  '.		(aValue isKindOf: Number)			ifTrue: [aValue printOn: aFileStream]			ifFalse: [aFileStream nextPutAll: '('.					aValue printOn: aFileStream.					aFileStream nextPutAll: ')'].		aFileStream nextPutAll: '!!'; cr].	aFileStream cr! !!Trait method!classVarNamed: aString	"Answer the content of the Class Variable"	^self classPool at: aString asSymbol ifAbsent: [self error: 'no such lass var']! !!Trait method!variableSubclass: aClassName uses: aTraitCompositionOrArray instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "		^ self variableSubclass: aClassName 		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames  		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!fileOutSharedPoolsOn: aFileStream	"file out the shared pools of this class after prompting the user about each pool"	| poolsToFileOut |	poolsToFileOut := self sharedPools select: 		[:aPool | (self shouldFileOutPool: (self environment keyAtIdentityValue: aPool))].	poolsToFileOut do: [:aPool | self fileOutPool: aPool onFileStream: aFileStream].	! !!Trait method!classVarNames	"Answer a collection of the names of the class variables defined in the receiver."	^self classPool keys asArray sort! !!Trait method!asFullRingDefinition	"A behavior is converted to a ring class including its variables, methods, direct superclass, direct subclasses and the package in which is loaded.	Active methods are generated and each knows its package as well.	Note that for its direct superclass and subclasses no full definitions are requested. If you need to traverse hierarchies use #asRingDefinitionWithMethods:withSuperclasses:withSubclasses:withPackages:"		| rgClass rgSuper rgSub rgMethod packageKeys |	rgClass:= self asRingDefinition.	rgClass package: (RGContainer packageOfClass: rgClass).		self superclass notNil 		ifTrue: [ 			rgSuper := self superclass asRingDefinition.			rgClass superclass: rgSuper ]		ifFalse: [  			self isTrait ifTrue: [ 				rgSuper := Trait asRingDefinition.				rgClass superclass: rgSuper. ]			].	self subclasses do:[ :each |		rgSub := each asRingDefinition.		rgSub superclass: rgClass ].		packageKeys := RGContainer packageKeys.	self methodsDo:[ :mth|  			rgMethod := mth asActiveRingDefinition.			rgClass addMethod: rgMethod.			rgMethod package: (RGContainer packageOfMethod: rgMethod using: packageKeys) ].	self theMetaClass methodsDo:[ :mth|  			rgMethod := mth asActiveRingDefinition.			rgClass theMetaClass addMethod: rgMethod.			rgMethod package: (RGContainer packageOfMethod: rgMethod using: packageKeys) ].		^ rgClass! !!Trait method!removeClassVarNamed: aString	"Remove the class variable whose name is the argument, aString, from     the names defined in the receiver, a class. Create an error notification if     aString is not a class variable or if it is still being used in the code of     the class."	| aSymbol |	aSymbol := aString asSymbol.	(self classPool includesKey: aSymbol)		ifFalse: [ ^ self error: aString , ' is not a class variable' ].	self withAllSubclasses		do: [ :subclass | 			(Array with: subclass with: subclass class)				do: [ :classOrMeta | 					(classOrMeta whichSelectorsReferTo: (self classPool associationAt: aSymbol)) isEmpty						ifFalse: [ 							InMidstOfFileinNotification signal								ifTrue: [ 									self crTrace: self name , ' (' , aString , ' is Undeclared) '.									^ Undeclared declare: aSymbol from: self classPool ]								ifFalse: [ 									(self										confirm:											(aString , ' is still used in code of class ' , classOrMeta name , '.\Is it okay to move it to Undeclared?') withCRs)										ifTrue: [ ^ Undeclared declare: aSymbol from: self classPool ]										ifFalse: [ ^ self ] ] ] ] ].	self classPool removeKey: aSymbol.	self classPool isEmpty		ifTrue: [ self classPool: nil ]! !!Trait method!externalName	"Answer a name by which the receiver can be known."	^ self name! !!Trait method!subclass: t instanceVariableNames: ins	^ self subclass: t instanceVariableNames: ins classVariableNames: '' poolDictionaries: '' category: 'Unclassified' ! !!Trait method!category	"Answer the system organization category for the receiver. First check whether the	category name stored in the ivar is still correct and only if this fails look it up	(latter is much more expensive)"	| result |	self basicCategory ifNotNil: [ :symbol |		((self environment organization listAtCategoryNamed: symbol) includes: self name)			ifTrue: [ ^symbol ] ].	self basicCategory: (result := self environment organization categoryOfElement: self name).	^result! !!Trait method!possibleVariablesFor: misspelled continuedFrom: oldResults	| results |	results := misspelled correctAgainstDictionary: self classPool continuedFrom: oldResults.	self sharedPools do: [:pool | 		results := misspelled correctAgainstDictionary: pool continuedFrom: results ].	self superclass == nil		ifTrue: 			[ ^ misspelled correctAgainstDictionary: self environment continuedFrom: results ]		ifFalse:			[ ^ self superclass possibleVariablesFor: misspelled continuedFrom: results ]! !!Trait method!innerBindingOf: aSymbol	"Answer the binding of some variable resolved in the scope of the receiver, or one of its superclass	but do not look up binding in receiver's environment.	Use #bindingOf: for looking up the variable binding in a full scope, including receiver's environment"	"First look in classVar dictionary."	(self classPool bindingOf: aSymbol) ifNotNil: [:binding | ^binding].	"Next look in shared pools."	self sharedPools do: [:pool | (pool bindingOf: aSymbol) ifNotNil: [:binding | ^binding]].	self superclass ifNotNil: [:supercl | ^ supercl innerBindingOf: aSymbol].		^ nil! !!Trait method!bindingOf: varName	"Answer the binding of some variable resolved in the scope of the receiver, or nil	if variable with such name is not defined"	"The lookup recurses up to superclasses looking inside their class and shared pools,	but not the environment, since two classes, even if they have ancestry relationship,	could use different environments.	That's why we doing an environment lookup only as a last step of symbol lookup 	and taking only the environment of receiver only, not any of it's superclass(es) "		| aSymbol |	aSymbol := varName asSymbol.	^ (self innerBindingOf: aSymbol) ifNil: [		 self environment bindingOf: aSymbol	]! !!Trait method!compileAll	super compileAll.	self class compileAll.! !!Trait method!shouldFileOutPools	"respond with true if the user wants to file out the shared pools"	^self confirm: 'FileOut selected sharedPools?'! !!Trait method!variableWordSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver) in which the subclass is to 	have indexable word-sized nonpointer variables."	^self classBuilder		superclass: self		variableWordSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!classBuilder		"Answer the object responsible of creating subclasses of myself in the system."			^ Smalltalk classBuilder! !!Trait method!name: aString traitComposition: aComposition methodDict: aMethodDict localSelectors: aSet organization: aClassOrganization	"Used by copy"		self name: aString.	self localSelectors: aSet.	self methodDict: aMethodDict.	self traitComposition: aComposition.	self organization: aClassOrganization! !!Trait method!variableWordSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have indexable word-sized nonpointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				variableWordSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!compileAllFrom: oldClass	"Recompile all the methods in the receiver's method dictionary (not the	subclasses). Also recompile the methods in the metaclass."	super compileAllFrom: oldClass.	self class compileAllFrom: oldClass class! !!Trait method!renameSilently: aName	 [ self rename: aName] fuelValueWithoutNotifications! !!Trait method!reformatAll 	"Reformat all methods in this class.	Leaves old code accessible to version browsing"	super reformatAll.		"me..."	self class reformatAll	"...and my metaclass"! !!Trait method!removeFromSystem: logged	"Forget the receiver from the Smalltalk global dictionary. Any existing 	instances will refer to an obsolete version of the receiver."		"keep the class name and category for triggering the system change message. If we wait to long, then we get obsolete information which is not what we want."	"tell class to deactivate and unload itself-- two separate events in the module system"	self unload.	self users do: [ :user | user removeFromComposition: self ].	self superclass ifNotNil:		["If we have no superclass there's nothing to be remembered"		self superclass addObsoleteSubclass: self].	self environment forgetClass: self logged: logged.	self obsolete.! !!Trait method!shouldFileOutPool: aPoolName	"respond with true if the user wants to file out aPoolName"	^self confirm: ('FileOut the sharedPool ', aPoolName, '?')! !!Trait method!allSharedPools	"Answer an ordered collection of the pools the receiver shares, including those defined  in the superclasses of the receiver."	| aSet | 	^self superclass == nil		ifTrue: [self sharedPools copy]		ifFalse: [aSet := self superclass allSharedPools.			aSet addAll: self sharedPools.			aSet]! !!Trait method!sharing: poolString 	"Set up sharedPools. Answer whether recompilation is advisable."	| oldPools |	oldPools := self sharedPools.	self sharedPools: OrderedCollection new.	(poolString subStrings: ' ') do: 		[:poolName | 		self sharedPools add: (self environment at: poolName asSymbol ifAbsent:[			(self confirm: 'The pool dictionary ', poolName,' does not exist.',						'\Do you want it automatically created?' withCRs)				ifTrue:[self environment at: poolName asSymbol put: Dictionary new]				ifFalse:[^self error: poolName,' does not exist']])].	self sharedPools isEmpty ifTrue: [self sharedPools: nil].	oldPools do: [:pool |				| found |				found := self sharedPools anySatisfy: [:p | p == pool].				found ifFalse: [^ true "A pool got deleted"]].	^ false! !!Trait method!removeInstVarNamed: aString 	"Remove the argument, aString, as one of the receiver's instance variables."	| newInstVarString |	(self instVarNames includes: aString)		ifFalse: [self error: aString , ' is not one of my instance variables'].	newInstVarString := ''.	(self instVarNames copyWithout: aString) do: 		[:varName | newInstVarString := newInstVarString , ' ' , varName].	^self classBuilder		name: self name		inEnvironment: self environment		subclassOf: self superclass		type: self typeOfClass		instanceVariableNames: newInstVarString		classVariableNames: self classVariablesString		poolDictionaries: self sharedPoolsString		category: self category! !!Trait method!removeFromSystemUnlogged	"Forget the receiver from the Smalltalk global dictionary. Any existing instances will refer to an obsolete version of the receiver.  Do not log the removal either to the current change set nor to the system changes log"	^self removeFromSystem: false! !!Trait method!sharedPoolOfVarNamed: aString	"Returns the SharedPool or nil from which the pool variable named aString is coming from."		 ^ self sharedPools 			detect: [:each | each usesClassVarNamed: aString ]			ifNone: [						self superclass == nil							ifTrue: [nil]							ifFalse: [self superclass sharedPoolOfVarNamed: aString]						]! !!Trait method!ensureClassPool	^self classPool.! !!Trait method!category: aString 	"Categorize the receiver under the system category, aString, removing it from 	any previous categorization."	| oldCategory |	oldCategory := self basicCategory.	aString isString		ifTrue: [			self basicCategory: aString asSymbol.			self environment organization classify: self name under: self basicCategory ]		ifFalse: [self errorCategoryName].	SystemAnnouncer uniqueInstance		class: self recategorizedFrom: oldCategory to: self basicCategory! !!Trait method!asHelpTopic	^SystemReference forClass: self! !!Trait method!variableByteSubclass: className instanceVariableNames: instvarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	^self variableByteSubclass: className		instanceVariableNames: instvarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: cat! !!Trait method!removeSharedPool: aDictionary 	"Remove the pool dictionary, aDictionary, as one of the receiver's pool 	dictionaries. Create an error notification if the dictionary is not one of 	the pools.	: Note that it removes the wrong one if there are two empty Dictionaries in the list."	| satisfiedSet workingSet aSubclass |	(self sharedPools includes: aDictionary)		ifFalse: [^self error: 'the dictionary is not in my pool'].	"first see if it is declared in a superclass in which case we can remove it."	(self selectSuperclasses: [:class | class sharedPools includes: aDictionary]) isEmpty		ifFalse: [self sharedPools remove: aDictionary.				self sharedPools isEmpty ifTrue: [self sharedPools: nil].				^self]. 	"second get all the subclasses that reference aDictionary through me rather than a 	superclass that is one of my subclasses."	workingSet := self subclasses asOrderedCollection.	satisfiedSet := Set new.	[workingSet isEmpty] whileFalse:		[aSubclass := workingSet removeFirst.		(aSubclass sharedPools includes: aDictionary)			ifFalse: 				[satisfiedSet add: aSubclass.				workingSet addAll: aSubclass subclasses]].	"for each of these, see if they refer to any of the variables in aDictionary because 	if they do, we can not remove the dictionary."	satisfiedSet add: self.	satisfiedSet do: 		[:sub | 		aDictionary associationsDo: 			[:aGlobal | 			(sub whichSelectorsReferTo: aGlobal) isEmpty 				ifFalse: [^self error: aGlobal key 								, ' is still used in code of class '								, sub name]]].	self sharedPools remove: aDictionary.	self sharedPools isEmpty ifTrue: [self sharedPools: nil]! !!Trait method!isClassOrTrait	^true! !!Trait method!allClassVarNames	"Answer a Set of the names of the receiver's class variables, including those	defined in the superclasses of the receiver."	| aSet |	self superclass == nil		ifTrue: 			[^self classVarNames asSet]  "This is the keys so it is a new Set."		ifFalse: 			[aSet := self superclass allClassVarNames.			aSet addAll: self classVarNames.			^aSet]! !!Trait method!subclass: aName uses: aTraitCompositionOrArray instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	^ self		subclass: aName		uses: aTraitCompositionOrArray		with: [ 			self				subclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!classVarNamed: aString put: anObject	"Store anObject in the class variable."		| symbol |	symbol := aString asSymbol.	(self classPool includesKey: symbol) ifFalse:  [^self error: 'no such lass var'].	self classPool at: symbol put: anObject.! !!Trait method!weakSubclass: className instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "		^ self weakSubclass: className 		instanceVariableNames: instVarNames 		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!variableWordSubclass: className instanceVariableNames: instVarNames	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	 	^ self variableWordSubclass: className		instanceVariableNames: instVarNames  		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!usesClassVarNamed: aString	"Return whether the receiver or its superclasses have a class variable named: aString"		^ self allClassVarNames includes: aString! !!Trait method!obsolete	"Change the receiver and all of its subclasses to an obsolete class."	self == Object 		ifTrue: [^self error: 'Object is NOT obsolete'].	self setName: 'AnObsolete' , self name.	Object class instSize + 1 to: self classSide instSize do:		[:i | self instVarAt: i put: nil]. "Store nil over class instVars."	self classPool: nil.	self sharedPools: nil.	self hasClassSide ifTrue: [ self theMetaClass obsolete].	super obsolete.! !!Trait method!isSelfEvaluating	^self isObsolete not! !!Trait method!variableSubclass: className instanceVariableNames: instVarNames classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	^ self variableSubclass: className		instanceVariableNames: instVarNames 		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!hasAbstractMethods	"Tells whether the receiver locally defines an abstract method, i.e., a method sending subclassResponsibility"	^ super hasAbstractMethods or: [self class hasAbstractMethods]! !!Trait method!fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex 	"File a description of the receiver on aFileStream. If the boolean argument,	moveSource, is true, then set the trailing bytes to the position of aFileStream and	to fileIndex in order to indicate where to find the source code."	^self fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex initializing: true! !!Trait method!variableByteSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have indexable byte-sized nonpointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				variableByteSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!superclassOrder: classes	"Arrange the classes in the collection, classes, in superclass order so the 	classes can be properly filed in. Do it in sets instead of ordered collections."	| all unprocessedClasses cache |	unprocessedClasses := classes asSet. 	cache := Dictionary new.	all := OrderedCollection new: unprocessedClasses size.	unprocessedClasses size timesRepeat: [ |nextClass|		nextClass := unprocessedClasses detect: [:aClass | self hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache].		all add: nextClass.		unprocessedClasses remove: nextClass].	^all! !!Trait method!template: aSystemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class."	^ self templateForSubclassOf: Object name category: aSystemCategoryName ! !!Trait method!templateForSubclassOf: priorClassName category: systemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class, given that the class previously looked at was as given"	^priorClassName asString, ' subclass: #NameOfSubclass	instanceVariableNames: ''''	classVariableNames: ''''	poolDictionaries: ''''	category: ''' , systemCategoryName asString , ''''! !!Trait method!allSuperclassesFor: aClass cache: cache 		^ cache at: aClass ifAbsentPut: [aClass allSuperclasses asArray]! !!Trait method!hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache 	^ (self hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache) and: [		aClass isMeta not or: [			self hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache]] ! !!Trait method!hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache 	^ (unprocessedClasses includesAnyOf: (self allSuperclassesFor: aClass cache: cache)) not	! !!Trait method!fileOutPool: aString	"file out the global pool named aString"		| internalStream |	internalStream := (String new: 1000) writeStream.	self new fileOutPool: (self environment at: aString asSymbol) onFileStream: internalStream.	FileStream writeSourceCodeFrom: internalStream baseName: aString isSt: true.! !!Trait method!rootsOfTheWorld	"return all classes that have a nil superclass"		^(Smalltalk globals select: [:each | each isBehavior and: [each superclass isNil]]) asOrderedCollection! !!Trait method!doesNotIncludeInstanceOrSuperclassesFor: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!superclassOrder: classes	"Arrange the classes in the collection, classes, in superclass order so the 	classes can be properly filed in. Do it in sets instead of ordered collections."	| all unprocessedClasses cache |	unprocessedClasses := classes asSet. 	cache := Dictionary new.	all := OrderedCollection new: unprocessedClasses size.	unprocessedClasses size timesRepeat: [ |nextClass|		nextClass := unprocessedClasses detect: [:aClass | self hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache].		all add: nextClass.		unprocessedClasses remove: nextClass].	^all! !!Trait method!template: aSystemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class."	^ self templateForSubclassOf: Object name category: aSystemCategoryName ! !!Trait method!templateForSubclassOf: priorClassName category: systemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class, given that the class previously looked at was as given"	^priorClassName asString, ' subclass: #NameOfSubclass	instanceVariableNames: ''''	classVariableNames: ''''	poolDictionaries: ''''	category: ''' , systemCategoryName asString , ''''! !!Trait method!allSuperclassesFor: aClass cache: cache 		^ cache at: aClass ifAbsentPut: [aClass allSuperclasses asArray]! !!Trait method!hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache 	^ (self hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache) and: [		aClass isMeta not or: [			self hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache]] ! !!Trait method!hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache 	^ (unprocessedClasses includesAnyOf: (self allSuperclassesFor: aClass cache: cache)) not	! !!Trait method!fileOutPool: aString	"file out the global pool named aString"		| internalStream |	internalStream := (String new: 1000) writeStream.	self new fileOutPool: (self environment at: aString asSymbol) onFileStream: internalStream.	FileStream writeSourceCodeFrom: internalStream baseName: aString isSt: true.! !!Trait method!rootsOfTheWorld	"return all classes that have a nil superclass"		^(Smalltalk globals select: [:each | each isBehavior and: [each superclass isNil]]) asOrderedCollection! !!Trait method!doesNotIncludeInstanceOrSuperclassesFor: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!canZapMethodDictionary	"Return true if it is safe to zap the method dictionary on #obsolete"	self soleInstance == nil		ifTrue:[^true]		ifFalse:[^self soleInstance canZapMethodDictionary]! !!Trait method!wantsChangeSetLogging	"Answer whether code submitted for the receiver should be remembered by the changeSet mechanism.The metaclass follows the rule of the class itself."	^ self theNonMetaClass wantsChangeSetLogging! !!Trait method!fileOutInitializerOn: aStream	(self includesSelector: #initialize) ifTrue: 		[aStream cr.		aStream nextChunkPut: self soleInstance name , ' initialize'].! !!Trait method!addObsoleteSubclass: aClass	"Do nothing."! !!Trait method!asFullRingDefinition	^ self theNonMetaClass asFullRingDefinition theMetaClass! !!Trait method!isSelfEvaluating	^self isObsolete not! !!Trait method!uses: aTraitCompositionOrArray	| copyOfOldTrait newComposition |	copyOfOldTrait := self copy.	newComposition := aTraitCompositionOrArray asTraitComposition.	self assertConsistantCompositionsForNew: newComposition.	self setTraitComposition: newComposition.	SystemAnnouncer uniqueInstance		traitDefinitionChangedFrom: copyOfOldTrait to: self.! !!Trait method!isMeta	^ true! !!Trait method!removeSubclass: aClass	"Do nothing."! !!Trait method!possibleVariablesFor: misspelled continuedFrom: oldResults	^ self theNonMetaClass possibleVariablesFor: misspelled continuedFrom: oldResults! !!Trait method!subclasses	"Answer the receiver's subclasses."	self theNonMetaClass == nil ifTrue:[^#()].	^self theNonMetaClass subclasses 		select:[:aSubclass| aSubclass isMeta not] 		thenCollect:[:aSubclass| aSubclass class]	"Metaclass allInstancesDo:		[:m | Compiler evaluate: 'subclasses:=nil' for: m logged: false]"! !!Trait method!nonTrivial 	"Answer whether the receiver has any methods or instance variables."	^ self instVarNames notEmpty or: [self hasMethods or: [self hasTraitComposition]]! !!Trait method!uses: aTraitCompositionOrArray instanceVariableNames: instVarString 	| newComposition newMetaClass copyOfOldMetaClass |		copyOfOldMetaClass := self copy.	newMetaClass := self instanceVariableNames: instVarString.		newComposition := aTraitCompositionOrArray asTraitComposition.	newMetaClass assertConsistantCompositionsForNew: newComposition.	newMetaClass setTraitComposition: newComposition.		SystemAnnouncer uniqueInstance		classDefinitionChangedFrom: copyOfOldMetaClass to: newMetaClass! !!Trait method!asRingDefinition	^ self theNonMetaClass asRingDefinition theMetaClass! !!Trait method!noteNewBaseTraitCompositionApplied: aTraitComposition	"The argument is the new trait composition of my base trait - add	the new traits or remove non existing traits on my class side composition.	(Each class trait in my composition has its base trait on the instance side	of the composition - manually added traits to the class side are always 	base traits.)"		| newComposition traitsFromInstanceSide |	traitsFromInstanceSide := self traitComposition traits		select: [:each | each isClassTrait]		thenCollect: [:each | each baseTrait].			newComposition := self traitComposition copyTraitExpression.	(traitsFromInstanceSide copyWithoutAll: aTraitComposition traits) do: [:each |		newComposition removeFromComposition: each classTrait].	(aTraitComposition traits copyWithoutAll: traitsFromInstanceSide) do: [:each |		newComposition add:  (each classTrait)].	self setTraitComposition: newComposition! !!Trait method!bindingOf: varName	^self theNonMetaClass classBindingOf: varName! !!Trait method!addSubclass: aClass	"Do nothing."! !!Trait method!subclassesDo: aBlock	"Evaluate aBlock for each of the receiver's immediate subclasses."	self theNonMetaClass subclassesDo:[:aSubclass|		"The following test is for Class class which has to exclude		the Metaclasses being subclasses of Class."		aSubclass isMeta ifFalse:[aBlock value: aSubclass class]].! !!Trait method!removeInstVarNamed: aString 	"Remove the argument, aString, as one of the receiver's instance variables."	| newArray newString |	(self instVarNames includes: aString)		ifFalse: [self error: aString , ' is not one of my instance variables'].	newArray := self instVarNames copyWithout: aString.	newString := ''.	newArray do: [:aString2 | newString := aString2 , ' ' , newString].	self instanceVariableNames: newString! !!Trait method!addInstVarNamed: aString 	"Add the argument, aString, as one of the receiver's instance variables."	| fullString |	fullString := String streamContents: [:strm |		self instVarNames do: [:aString2 | strm nextPutAll: aString2; space].		strm nextPutAll: aString].	self instanceVariableNames: fullString! !!Trait method!criticTheNonMetaclassClass	^self theNonMetaClass ! !!Trait method!classPool	"Answer the dictionary of class variables."	^self theNonMetaClass classPool! !!Trait method!sharedPools	^OrderedCollection new.! !!Trait method!isObsolete	"Return true if the receiver is obsolete"	^self soleInstance == nil "Either no thisClass"		or:[self soleInstance classSide ~~ self "or I am not the class of thisClass"			or:[self soleInstance isObsolete]] "or my instance is obsolete"! !!Trait method!assertConsistantCompositionsForNew: aTraitComposition	"Applying or modifying a trait composition on the class side	of a behavior has some restrictions."	| baseTraits notAddable message |	baseTraits := aTraitComposition traits select: [:each | each isBaseTrait].	baseTraits isEmpty ifFalse: [		notAddable := (baseTraits reject: [:each | each classSide methodDict isEmpty]).		notAddable isEmpty ifFalse: [			message := String streamContents: [:stream |				stream nextPutAll: 'You can not add the base trait(s)'; cr.				notAddable					do: [:each | stream nextPutAll: each name]					separatedBy: [ stream nextPutAll: ', '].				stream cr; nextPutAll: 'to this composition because it/they define(s) methods on the class side.'].		^TraitCompositionException signal: message]].			(self instanceSide traitComposition traits asSet =			(aTraitComposition traits				select: [:each | each isClassTrait]				thenCollect: [:each | each baseTrait]) asSet) ifFalse: [				^TraitCompositionException signal: 'You can not add or remove class side traits on				the class side of a composition. (But you can specify aliases or exclusions				for existing traits or add a trait which does not have any methods on the class side.)']! !!Trait method!acceptsLoggingOfCompilation	"Answer whether the receiver's method submisions and class defintions should be logged to the changes file and to the current change set.  The metaclass follows the rule of the class itself."	^ self theNonMetaClass acceptsLoggingOfCompilation! !!Trait method!wantsRecompilationProgressReported	"The metaclass follows the rule of the class itself."	^ self theNonMetaClass wantsRecompilationProgressReported! !!Trait method!obsoleteSubclasses	"Answer the receiver's subclasses."	self theNonMetaClass == nil ifTrue:[^#()].	^self theNonMetaClass obsoleteSubclasses 		select:[:aSubclass| aSubclass isMeta not] 		thenCollect:[:aSubclass| aSubclass class]	"Metaclass allInstancesDo:		[:m | Compiler evaluate: 'subclasses:=nil' for: m logged: false]"! !!Trait method!hasClassSide	^false! !!Trait method!classVarNames	"Answer a set of the names of the class variables defined in the receiver's instance."		self theNonMetaClass ifNil: [ ^ Set new ].	^self theNonMetaClass classVarNames! !!Trait method!category	^ self theNonMetaClass category! !!Trait method!isAnonymous	^self soleInstance isAnonymous ! !!Trait method!binding	"return an association that can be used as the binding	 To share it between methods, reuse an existing one if possible"	^self methodDict 		ifEmpty: [nil -> self]		ifNotEmpty: [:dict | dict anyOne classBinding]! !!Trait method!initializeFrom: anotherClassTrait	self traitComposition: self traitComposition copyTraitExpression.	self methodDict: self methodDict copy.	self localSelectors: self localSelectors copy.	self basicOrganization: self organization copy.! !----STARTUP----2015-01-16T23:28:50.356518+01:00 as /Users/craig/me/behavior/context/development/context/context.app/Contents/Resources/context processor.app/Contents/Resources/context/memories/CFE10A14-D883-4ACE-990A-0DDA86AA362B/CFE10A14-D883-4ACE-990A-0DDA86AA362B!!Trait method!commentInventory	"Answer a string with a count of the classes with and without comments 	for all the classes in the package of which this class is a member."	"Morph commentInventory"	^ self environment organization commentInventory: (self category copyUpTo: $-), '*'! !!Trait method!fileOutMethod: selector	"Write source code of a single method on a file.  Make up a name for the file."		| internalStream |	internalStream := (String new: 1000) writeStream.	self fileOutMethod: selector on: internalStream.	FileStream writeSourceCodeFrom: internalStream baseName: (self name , '-' , (selector copyReplaceAll: ':' with: '')) isSt: true.! !!Trait method!notifyOfRecategorizedSelector: element from: oldCategory to: newCategory	SystemAnnouncer uniqueInstance selector: element recategorizedFrom: oldCategory to: newCategory inClass: self.	SystemAnnouncer uniqueInstance 		suspendAllWhile: [self notifyUsersOfRecategorizedSelector: element from: oldCategory to: newCategory].! !!Trait method!classSide	^self theMetaClass.! !!Trait method!instVarMappingFrom: oldClass	"Return the mapping from instVars of oldClass to new class that is used for converting old instances of oldClass."	| oldInstVarNames |	oldInstVarNames := oldClass allInstVarNames.	^self allInstVarNames 			collect: [:instVarName | oldInstVarNames indexOf: instVarName].! !!Trait method!mcWorkingCopy	MCWorkingCopy managersForClass:  self do: [: package | ^ package ]! !!Trait method!updateOrganizationDescription: aTraitMethodDescription oldCategory: oldCategoryOrNil newCategory: newCategoryOrNil changedCategories: changedCategories	| sel effectiveCategory currentCategory |	sel := aTraitMethodDescription selector.		(self includesLocalSelector: sel) ifTrue: [ ^ self ].	 	currentCategory := self organization categoryOfElement: sel.	effectiveCategory := aTraitMethodDescription effectiveMethodCategoryCurrent: currentCategory new: newCategoryOrNil.		effectiveCategory ifNil: [ 		currentCategory ifNotNil: [ changedCategories add: currentCategory ].		^ self organization removeElement: sel ].			((currentCategory isNil 		or: [ 				currentCategory == Protocol ambiguous 				or: [ currentCategory == oldCategoryOrNil ] ])		and: [ currentCategory ~~ effectiveCategory ])		ifTrue: [ 			currentCategory ifNotNil: [ changedCategories add: currentCategory ].			self organization classify: sel under: effectiveCategory suppressIfDefault: false ]! !!Trait method!reorganize	"During fileIn, !!Rectangle reorganize!! allows Rectangle to seize control and treat the next chunk as its organization.  See the transfer of control where ReadWriteStream fileIn calls scanFrom:"	^self organization! !!Trait method!isInstanceSide	^self isClassSide not! !!Trait method!noteMethodRemoved: oldMethod	SystemAnnouncer uniqueInstance		methodRemoved: oldMethod! !!Trait method!obsolete	"Make the receiver obsolete."	self superclass removeSubclass: self.	self organization: nil.	super obsolete.! !!Trait method!removeInstVarNamed: aString 	"Remove the argument, aString, as one of the receiver's instance 	variables. Create an error notification if the argument is not found."	^self subclassResponsibility! !!Trait method!noteRecategorizedSelectors: aCollection oldComposition: aTraitComposition		aCollection do: [:each | | oldCategory newCategory | 		oldCategory := self organization categoryOfElement: each.		newCategory := (self traitComposition methodDescriptionForSelector: each) effectiveMethodCategory.		self noteRecategorizedSelector: each from: oldCategory to: newCategory]! !!Trait method!localMethods	"returns the methods of classes including the ones of the traits that the class uses" 	 	^ self methods select: [:each | self includesLocalSelector: each selector].! !!Trait method!wantsChangeSetLogging	"Answer whether code submitted for the receiver should be remembered by the changeSet mechanism."	^ true! !!Trait method!package	^ RPackage organizer packageOf: self.	! !!Trait method!correspondingForTest	"Return the unit test that correspond to me. If it does not exist, it returns myself. 	 Return the tested class if sent to a class"		| className |	className := (self inheritsFrom: TestCase)		ifTrue: [ self name copyReplaceAll: 'Test' with: '' ]		ifFalse: [ self name, 'Test' ].	^ Smalltalk 		at: className asSymbol 		ifAbsent: [ self ]	! !!Trait method!usesPoolVarNamed: aString	"Only classes may use a pool variable named: aString"		^ false! !!Trait method!logMethodSource: aText forMethod: aCompiledMethod inCategory: category withStamp: changeStamp	aCompiledMethod		putSource: aText		class: self		category: category		withStamp: changeStamp 		inFile: 2		priorMethod: (self					compiledMethodAt: aCompiledMethod selector					ifAbsent: [])! !!Trait method!duringTestCompileSilently: code storeSource: storeSource classified: aCategory	^ Author 		useAuthor: 'TestsAuthor'		during: [ [			self 				compile: code				classified: (aCategory ifNil: [ '' ])				withStamp: nil 				notifying: nil 				logSource: storeSource ] fuelValueWithoutNotifications ]! !!Trait method!organization: aClassOrg	"Install an instance of ClassOrganizer that represents the organization of the messages of the receiver."	aClassOrg ifNotNil: [aClassOrg setSubject: self].	self basicOrganization: aClassOrg.! !!Trait method!superclass: aClass methodDictionary: mDict format: fmt	"Basic initialization of the receiver"	super superclass: aClass methodDictionary: mDict format: fmt.	self instanceVariables: nil.	self organization: nil.! !!Trait method!hasClassSide	^self subclassResponsibility.! !!Trait method!isExtendedInPackage: aPackage	"returns true if aPackage defines an extension to this class"	^ aPackage extendsClass: self.! !!Trait method!uncategorizedSelectors	^ self selectorsInProtocol: Protocol unclassified! !!Trait method!copyCategory: cat from: aClass classified: newCat 	"Specify that one of the categories of messages for the receiver is the 	third argument, newCat. Copy each message found in the category cat in 	class aClass into this new category."	self copyAll: (aClass organization listAtCategoryNamed: cat)		from: aClass		classified: newCat! !!Trait method!methodsFor: categoryName 	"Answer a ClassCategoryReader for compiling the messages in the category, categoryName, of the receiver."	^ ClassCategoryReader new setClass: self category: categoryName asSymbol	"(False methodsFor: 'logical operations') inspect"! !!Trait method!sharedPoolOfVarNamed: aString	"Only classes may have shared pools"		^ nil! !!Trait method!compile: text classified: category notifying: requestor	| stamp |	stamp := self acceptsLoggingOfCompilation		ifTrue: [ Author changeStamp ]		ifFalse: [ nil ].	^ self		compile: text		classified: category		withStamp: stamp		notifying: requestor! !!Trait method!isMeta	^self isClassSide! !!Trait method!packageRefactoringMenu: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Rewrite Code')		order:  100;		withSeparatorAfter.		(aBuilder item: #'Rewrite Code')		action: [ target refactor rewriteCode ];		parent: #'Rewrite Code';		order: 0.	(aBuilder item: #'Search Code')		action: [ target refactor searchCode ];		parent: #'Rewrite Code';		order: 100.! !!Trait method!fileOutMethod: selector on: aStream		(selector == #Comment) ifTrue: [^ self inform: 'Sorry, cannot file out class comment in isolation.'].	(self includesSelector: selector) ifFalse: [^ self error: 'Selector ', selector asString, ' not found'].	aStream header; timeStamp.	self printMethodChunk: selector withPreamble: true		on: aStream moveSource: false toFile: 0.! !!Trait method!fileOutOrganizationOn: aFileStream	"File a description of the receiver's organization on aFileStream."	aFileStream cr; nextPut: $!!.	aFileStream nextChunkPut: self name, ' reorganize'; cr.	aFileStream nextChunkPut: self organization stringForFileOut ; cr! !!Trait method!linesOfCode 	"An approximate measure of lines of code.	Includes comments, but excludes blank lines."	| lines |	lines := self localMethods inject: 0 into: [:sum :each | sum + each linesOfCode]. 	^ self isMeta 		ifTrue: [lines]		ifFalse: [lines + self class linesOfCode]! !!Trait method!allSelectorsInProtocol: aName 	"Answer a list of all the methods of the receiver and all its 	superclasses that are in the protocol named aName"		| aColl |	aColl := OrderedCollection new.	self withAllSuperclasses do: [:aClass | 		aColl addAll: (aClass organization listAtCategoryNamed: aName) ].	^ aColl asSet asArray sort! !!Trait method!groupRefactoring: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Rewrite Code')		order:  100;		withSeparatorAfter.		(aBuilder item: #'Rewrite Code')		action: [ target refactor rewriteCode ];		parent: #'Rewrite Code';		order: 0.	(aBuilder item: #'Search Code')		action: [ target refactor searchCode ];		parent: #'Rewrite Code';		order: 100.! !!Trait method!errorCategoryName	self error: 'Category name must be a String'! !!Trait method!packages	"the extending packages of a class are the packages that extend it."		^  self extendingPackages asSet copy add: self package; yourself! !!Trait method!printCategoryChunk: category on: aFileStream withStamp: changeStamp priorMethod: priorMethod 	"Print a method category preamble.  This must have a category name.	It may have an author/date stamp, and it may have a prior source link.	If it has a prior source link, it MUST have a stamp, even if it is empty.""The current design is that changeStamps and prior source links are preserved in the changes file.  All fileOuts include changeStamps.  Condensing sources, however, eliminates all stamps (and links, natch)."	aFileStream cr; nextPut: $!!.	aFileStream nextChunkPut: (String streamContents:		[:strm |		strm nextPutAll: self name; nextPutAll: ' methodsFor: '; print: category asString.		(changeStamp ~~ nil and:			[changeStamp size > 0 or: [priorMethod ~~ nil]]) ifTrue:			[strm nextPutAll: ' stamp: '; print: changeStamp].		priorMethod ~~ nil ifTrue:			[strm nextPutAll: ' prior: '; print: priorMethod sourcePointer]]).	! !!Trait method!allProtocolsUpTo: mostGenericClass	"Answer a list of all the method protocols of the receiver and all its superclasses, up through mostGenericClass"	| otherClassCategories thisClassCategories lowercaseSortBlock  |			otherClassCategories := OrderedCollection new.	lowercaseSortBlock  := [ :a :b | a asLowercase <= b asLowercase ].		(self allSuperclassesIncluding: mostGenericClass) do: [ :aClass | 		 otherClassCategories addAll: aClass organization categories ].	otherClassCategories remove: 'no messages' ifAbsent: [  ].	thisClassCategories := self organization categories sorted: lowercaseSortBlock.														^ thisClassCategories , ((otherClassCategories asSet removeAllSuchThat: [ :each |								thisClassCategories includes: each ]) sorted: lowercaseSortBlock)! !!Trait method!instVarIndexFor: instVarName ifAbsent: aBlock	"Answer the index of the named instance variable."	| index |	index := self instanceVariables == nil 				ifTrue: [0]				ifFalse: [self instanceVariables indexOf: instVarName ifAbsent: [0]].	index = 0 ifTrue: 		[^self superclass == nil 			ifTrue: [aBlock value]			ifFalse: [self superclass instVarIndexFor: instVarName ifAbsent: aBlock]].	^self superclass == nil 			ifTrue: [index]		ifFalse: [index + self superclass instSize]! !!Trait method!noteRecategorizedSelector: aSymbol from: oldCategoryOrNil to: newCategoryOrNil	| changedCategories |	changedCategories := self updateOrganizationSelector: aSymbol oldCategory: oldCategoryOrNil newCategory: newCategoryOrNil.	changedCategories do: [:each |		(self organization isEmptyCategoryNamed: each) ifTrue: [self organization removeCategory: each]]! !!Trait method!uncategorizedMethods	self deprecated: 'Use uncategorizedSelectors' on: '28 August 2013' in: #'Pharo3.0'.	^ self uncategorizedSelectors ! !!Trait method!comment: aStringOrText stamp: aStamp	"Set the receiver's comment to be the argument, aStringOrText."	self instanceSide classComment: aStringOrText stamp: aStamp.! !!Trait method!isExtended	^ self extendingPackages isEmpty! !!Trait method!storeOn: aStream	"Classes and Metaclasses have global names."	aStream nextPutAll: self name! !!Trait method!usesLocalPoolVarNamed: aString	^false.! !!Trait method!manifestBuilderForRuleChecker: aRuleChecker	"Return the manifestsince the rulechecker is keeping a cache, we ask it back"	^ aRuleChecker manifestBuilderOfClass: self! !!Trait method!definitionForNautilus	^ self definition! !!Trait method!compile: text classified: category withStamp: changeStamp notifying: requestor	^ self		compile: text		classified: category		withStamp: changeStamp		notifying: requestor		logSource: self acceptsLoggingOfCompilation! !!Trait method!instVarNames	"Answer an Array of the receiver's instance variable names."	self instanceVariables == nil		ifTrue: [^#()]		ifFalse: [^self instanceVariables]! !!Trait method!noteAddedSelector: aSelector meta: isMeta	"A hook allowing some classes to react to adding of certain selectors"! !!Trait method!duringTestCompileSilently: code classified: aCategory	^ self 		duringTestCompileSilently: code		storeSource: true		classified: aCategory! !!Trait method!printMethodChunk: selector withPreamble: doPreamble on: outStream moveSource: moveSource toFile: fileIndex	"Copy the source code for the method associated with selector onto the fileStream.  If moveSource true, then also set the source code pointer of the method."	| preamble method oldPos newPos sourceFile endPos |	doPreamble		ifTrue: [ preamble := self name , ' methodsFor: ' , (self organization categoryOfElement: selector) asString printString ]		ifFalse: [ preamble := '' ].	method := self methodDict		at: selector		ifAbsent: [ 			outStream				nextPutAll: selector;				cr.			outStream				tab;				nextPutAll: '** ERROR!!  THIS SCRIPT IS MISSING ** ' translated;				cr;				cr.			outStream nextPutAll: '  '.			^ outStream ].		oldPos := method filePosition.			sourceFile := SourceFiles at: method fileIndex.			preamble size > 0				ifTrue: [ 					"Copy the preamble"					outStream copyPreamble: preamble from: sourceFile at: oldPos ]				ifFalse: [ sourceFile position: oldPos ].	"Copy the method chunk"			newPos := outStream position.			outStream copyMethodChunkFrom: sourceFile.			sourceFile skipSeparators.	"The following chunk may have ]style["			sourceFile peek == $]				ifTrue: [ 					outStream						cr;						copyMethodChunkFrom: sourceFile ].			moveSource				ifTrue: [ 					"Set the new method source pointer"					endPos := outStream position.					method setSourcePosition: newPos inFile: fileIndex ].	preamble size > 0		ifTrue: [ outStream nextChunkPut: ' ' ].	^ outStream cr! !!Trait method!fileOutChangedMessages: aSet on: aFileStream moveSource: moveSource toFile: fileIndex 	"File a description of the messages of this class that have been 	changed (i.e., are entered into the argument, aSet) onto aFileStream.  If 	moveSource, is true, then set the method source pointer to the new file position.	Note when this method is called with moveSource=true, it is condensing the	.changes file, and should only write a preamble for every method."	| org |	(org := self organization) realCategories do: 		[:cat | | sels | 		sels := (org listAtCategoryNamed: cat) select: [:sel | aSet includes: sel].		sels do:			[:sel |  self printMethodChunk: sel withPreamble: true on: aFileStream							moveSource: moveSource toFile: fileIndex]]! !!Trait method!fileOutChangedMessages: aSet on: aFileStream 	"File a description of the messages of the receiver that have been 	changed (i.e., are entered into the argument, aSet) onto aFileStream."	self fileOutChangedMessages: aSet		on: aFileStream		moveSource: false		toFile: 0! !!Trait method!allMethodsInCategory: aName 	"Answer a list of all the methods of the receiver and all its 	superclasses that are in the category named aName"	self deprecated: 'Use allSelectorsInProtocol: ' on: '28 August 2013' in: #'Pharo3.0'.	^ self allSelectorsInProtocol: aName! !!Trait method!notifyRepackage: selector method: compiledMethod oldProtocol: oldProtocol newProtocol: newProtocol	| oldPackage newPackage |		(newProtocol = oldProtocol)		ifTrue: [ ^ self ].			"This indirection is because we need to abstract RPackage from the kernel"	#RPackage asClassIfPresent: [ :rPackageClass | 			newPackage := rPackageClass organizer 				packageForProtocol: newProtocol 				inClass: self.			oldPackage := rPackageClass organizer 				packageForProtocol: oldProtocol 				inClass: self.						"Announce recategorization"			newPackage = oldPackage				ifFalse: [ 					SystemAnnouncer uniqueInstance 						methodRepackaged: compiledMethod 						from: oldPackage 						to: newPackage ] ].			SystemAnnouncer uniqueInstance		selector: selector		recategorizedFrom: oldProtocol		to: newProtocol		inClass: self! !!Trait method!instVarNamesAndOffsetsDo: aBinaryBlock	"This is part of the interface between the compiler and a class's instance or field names.	 The class should enumerate aBinaryBlock with the instance variable name strings and	 their integer offsets.  The order is important. Names evaluated later will override the	 same names occurring earlier."	| superInstSize |	(superInstSize := self superclass notNil ifTrue: [self superclass instSize] ifFalse: [0]) > 0 ifTrue:		[self superclass instVarNamesAndOffsetsDo: aBinaryBlock].	1 to: self instSize - superInstSize do:		[:i| aBinaryBlock value: (self instanceVariables at: i) value: i + superInstSize]! !!Trait method!criticNameOn: aStream	"This behavior may be folded later by changing the name of this method or using another one."		aStream 		<< self name 		<< ' (' 		<< self category 		<< ')' ! !!Trait method!comment: aStringOrText	"Set the receiver's comment to be the argument, aStringOrText."	self instanceSide classComment: aStringOrText.! !!Trait method!copyMethodDictionaryFrom: donorClass	"Copy the method dictionary of the donor class over to the receiver"	self methodDict: donorClass copyOfMethodDictionary.	self organization: donorClass organization deepCopy.! !!Trait method!fileOutCategory: catName 	| internalStream |	internalStream := (String new: 1000) writeStream.	internalStream header; timeStamp.	self fileOutCategory: catName on: internalStream moveSource: false toFile: 0.	internalStream trailer.	^ FileStream writeSourceCodeFrom: internalStream baseName: (self name , '-' , catName) isSt: true.! !!Trait method!selectorsInProtocol: aName 	"Answer a list of the selectors of the receiver that are in category named aName"		| aColl |	aColl := Set withAll: (self organization listAtCategoryNamed: aName).	^ aColl asArray sort! !!Trait method!addSelectorSilently: selector withMethod: compiledMethod	super addSelectorSilently: selector withMethod: compiledMethod.	self instanceSide noteAddedSelector: selector meta: self isMeta.! !!Trait method!removeSelector: selector 	"Remove the message whose selector is given from the method 	dictionary of the receiver, if it is there. Answer nil otherwise."		| priorMethod priorProtocol origin | 	priorMethod := self compiledMethodAt: selector ifAbsent: [^ nil].	origin := priorMethod origin.	priorProtocol := self whichCategoryIncludesSelector: selector.	super removeSelector: selector.	SystemAnnouncer uniqueInstance 		suspendAllWhile: [self updateOrganizationSelector: selector oldCategory: priorProtocol newCategory: nil].	SystemAnnouncer uniqueInstance 			methodRemoved: priorMethod selector: selector inProtocol: priorProtocol class: self origin: origin.! !!Trait method!classThatDefinesInstanceVariable: instVarName	(self instVarNames notNil and: [self instVarNames includes: instVarName asString]) ifTrue: [^ self]. 	^self superclass ifNotNil: [self superclass classThatDefinesInstanceVariable: instVarName]! !!Trait method!compileSilently: code classified: category	"Compile the code and classify the resulting method in the given category, leaving no trail in the system log, nor in any change set, nor in the 'recent submissions' list. This should only be used when you know for sure that the compilation will succeed."	^ self compileSilently: code classified: category notifying: nil.! !!Trait method!commentStamp: changeStamp prior: indexAndOffset	"Prior source link ignored when filing in."	^ ClassCommentReader new setClass: self				category: #Comment				changeStamp: changeStamp! !!Trait method!comment	"Answer the receiver's comment. (If missing, supply a template) "	| aString |	aString := self instanceSide organization classComment.	aString isEmpty ifFalse: [^ aString].	^self classCommentBlank! !!Trait method!allInstVarNamesEverywhere	"Answer the set of inst var names used by the receiver, all superclasses, and all subclasses"	| aList |	aList := OrderedCollection new.	(self allSuperclasses , self withAllSubclasses asOrderedCollection) do:		[:cls | aList addAll: cls instVarNames].	^ aList asSet	"BorderedMorph allInstVarNamesEverywhere"! !!Trait method!extendingPackages	"the extending packages of a class are the packages that extend it."	^ RPackage organizer extendingPackagesOf: self! !!Trait method!checkForInstVarsOK: instVarString	"Return true if instVarString does no include any names used in a subclass"	| instVarArray |	instVarArray := instVarString subStrings: ' '.	self allSubclasses do:		[:cl | cl instVarNames do:			[:n | (instVarArray includes: n)				ifTrue: [self error: n , ' is already used in ' , cl name.						^ false]]].	^ true! !!Trait method!fileOutOn: aFileStream 	"File a description of the receiver on aFileStream."	self fileOutOn: aFileStream		moveSource: false		toFile: 0! !!Trait method!moveChangesTo: newFile 	"Used in the process of condensing changes, this message requests that 	the source code of all methods of the receiver that have been changed 	should be moved to newFile."	| changes |	changes := self selectors select: [:sel | (self compiledMethodAt: sel) fileIndex > 1 ].	self		fileOutChangedMessages: changes		on: newFile		moveSource: true		toFile: 2! !!Trait method!hasInstVarNamed: aString	"Return true whether the receiver defines an instance variable named aString."		^ self instVarNames includes: aString! !!Trait method!putClassCommentToCondensedChangesFile: aFileStream	"Called when condensing changes.  If the receiver has a class comment, and if that class comment does not reside in the .sources file, then write it to the given filestream, with the resulting RemoteString being reachable from the source file #2.  Note that any existing backpointer into the .sources file is lost by this process -- a situation that maybe should be fixed someday."	| header aStamp aCommentRemoteStr |	self isMeta ifTrue: [^ self].  "bulletproofing only"	((aCommentRemoteStr := self organization commentRemoteStr) isNil or:		[aCommentRemoteStr sourceFileNumber = 1]) ifTrue: [^ self].	aFileStream cr; nextPut: $!!.	header := String streamContents: [:strm | strm nextPutAll: self name;		nextPutAll: ' commentStamp: '.		(aStamp := self organization commentStamp ifNil: ['<historical>']) storeOn: strm.		strm nextPutAll: ' prior: 0'].	aFileStream nextChunkPut: header.	aFileStream cr.	self organization classComment: (RemoteString newString: self organization classComment onFileNumber: 2 toFile: aFileStream) stamp: aStamp! !!Trait method!duringTestCompileSilently: code	^ self 		duringTestCompileSilently: code 		storeSource: true! !!Trait method!classVariablesString	"Answer a string of my class variable names separated by spaces."	^String streamContents: [ :stream | 		self classVarNames 			do: [ :each | stream nextPutAll: each ]			separatedBy: [ stream space ] ]! !!Trait method!newInstanceFrom: oldInstance variable: variable size: instSize map: map	"Create a new instance of the receiver based on the given old instance.	The supplied map contains a mapping of the old instVar names into	the receiver's instVars"	| new |	variable		ifTrue: [new := self basicNew: oldInstance basicSize]		ifFalse: [new := self basicNew].	1 to: instSize do: 		[:offset |  (map at: offset) > 0 ifTrue:			[new instVarAt: offset					put: (oldInstance instVarAt: (map at: offset))]].	variable 		ifTrue: [1 to: oldInstance basicSize do: 					[:offset |					new basicAt: offset put: (oldInstance basicAt: offset)]].	^new! !!Trait method!organization	"Answer the instance of ClassOrganizer that represents the organization 	of the messages of the receiver."	self basicOrganization		ifNil: [ self basicOrganization: (self isTrait						ifTrue: [ ClassOrganization new ]						ifFalse: [ ClassOrganization forClass: self ]) ].	^self basicOrganization setSubject: self.	"Making sure that subject is set correctly. It should not be necessary."		! !!Trait method!classComment: aString stamp: aStamp	"Store the comment, aString or Text or RemoteString, associated with the class we are organizing.  Empty string gets stored only if had a non-empty one before."	| pointer header file oldCommentRemoteString oldComment oldStamp |	oldComment := self organization classComment.	oldStamp := self organization commentStamp.	(aString isKindOf: RemoteString) ifTrue: [		SystemAnnouncer uniqueInstance 			class: self 			oldComment: oldComment 			newComment: aString string 			oldStamp: oldStamp 			newStamp: aStamp.		^ self organization classComment: aString stamp: aStamp].	oldCommentRemoteString := self organization commentRemoteStr.	(aString size = 0) & (oldCommentRemoteString isNil) ifTrue: [^ self organization classComment: nil].		"never had a class comment, no need to write empty string out"	pointer := oldCommentRemoteString 			ifNil: [0] 			ifNotNil: [oldCommentRemoteString sourcePointer].		(file := SourceFiles at: 2) ifNotNil: [		file setToEnd; cr; nextPut: $!!.	"directly"		"Should be saying (file command: 'H3') for HTML, but ignoring it here"		header := String streamContents: [:strm | strm nextPutAll: self name;			nextPutAll: ' commentStamp: '.			aStamp storeOn: strm.			strm nextPutAll: ' prior: '; nextPutAll: pointer printString].		file nextChunkPut: header].		self organization 		classComment: (RemoteString newString: aString onFileNumber: 2) 		stamp: aStamp.		SystemAnnouncer uniqueInstance 		class: self 		oldComment: oldComment 		newComment: aString 		oldStamp: oldStamp 		newStamp: aStamp! !!Trait method!compile: text classified: category withStamp: changeStamp notifying: requestor logSource: logSource 	| method |	method := self compiler		source: text;		requestor: requestor;		category: category;		failBlock:  [ ^nil ];		compile.			logSource ifTrue: [		self 			logMethodSource: (requestor ifNotNil: [ :r | r text ] ifNil: [ text ]) "the requestor text might have been changed by the compiler and may be different thant text argument"			forMethod: method			inCategory: category 			withStamp: changeStamp].			self 		addAndClassifySelector: method selector 		withMethod: method 		inProtocol: category 		notifying: requestor.				self instanceSide 		noteCompilationOf: method selector 		meta: self isClassSide.	^ method selector! !!Trait method!classThatDefinesClassVariable: classVarName	"Answer the class that defines the given class variable"	(self classPool includesKey: classVarName asSymbol) ifTrue: [^ self]. 	^self superclass ifNotNil: [self superclass classThatDefinesClassVariable: classVarName]! !!Trait method!zapOrganization	"Remove the organization of this class by message categories.	This is typically done to save space in small systems.  Classes and methods	created or filed in subsequently will, nonetheless, be organized"	self organization: nil.	self isClassSide ifFalse: [self classSide zapOrganization]! !!Trait method!compileSilently: code classified: category notifying: requestor	"Compile the code and classify the resulting method in the given category, leaving no trail in the system log, nor in any change set, nor in the 'recent submissions' list. This should only be used when you know for sure that the compilation will succeed."	^ SystemAnnouncer uniqueInstance 		suspendAllWhile: [self compile: code classified: category notifying: requestor].! !!Trait method!authors	"Returns a bag representing the author frequency based on the latest version of the methods of the receiver."	^(self methods, self class methods) collect: [ :each | each author ] as: Bag .		! !!Trait method!commentStamp: changeStamp	self organization commentStamp: changeStamp.	^ self commentStamp: changeStamp prior: 0! !!Trait method!criticClass	"Return the class of the receiver for the critic browser. This behavior may be folded later by changing the name of this method or using another one."		^ self! !!Trait method!packageFromOrganizer: anOrganizer	"returns the package that defines this class"	^ anOrganizer packageOf: self.! !!Trait method!instanceVariableNamesDo: anUnaryBlock	"This is part of the interface between the compiler and a class's instance or field names.	 The class should enumerate anUnaryBlock with the instance variable name strings.  The order is important. Names evaluated later will override the	 same names occurring earlier."	| superInstSize |	(superInstSize := self superclass notNil ifTrue: [self superclass instSize] ifFalse: [0]) > 0 ifTrue:		[self superclass instanceVariableNamesDo: anUnaryBlock].	1 to: self instSize - superInstSize do:		[:i| anUnaryBlock value: (self instanceVariables at: i)]! !!Trait method!printSubclassesOn: aStream level: level 	"As part of the algorithm for printing a description of the receiver, print the	subclass on the file stream, aStream, indenting level times."	| subclassNames |	aStream crtab: level.	aStream nextPutAll: self name.	aStream space; print: self instVarNames.	self == Class		ifTrue: 			[aStream crtab: level + 1; nextPutAll: '[ ... all the Metaclasses ... ]'.			^self].	subclassNames := self subclasses asSortedCollection:[:c1 :c2| c1 name <= c2 name].	"Print subclasses in alphabetical order"	subclassNames do:		[:subclass | subclass printSubclassesOn: aStream level: level + 1]! !!Trait method!applyChangesOfNewTraitCompositionReplacing: oldComposition	| changedSelectors oldMethodDict |	oldMethodDict := self methodDict copy.	changedSelectors := super applyChangesOfNewTraitCompositionReplacing: oldComposition.	self noteRecategorizedSelectors: changedSelectors oldComposition: oldComposition.	self noteChangesFrom: oldMethodDict.	^ changedSelectors.! !!Trait method!removeCategory: aString 	"Remove each of the messages categorized under aString in the method 	dictionary of the receiver. Then remove the category aString."	self deprecated: 'Use removeProtocol:' on: '28 August 2013' in: #'Pharo3.0'.	self removeProtocol: aString! !!Trait method!updateOrganizationDescription: each oldCategory: newCategoryOrNil newCategory: oldCategoryOrNil changed: changedCategories	| sel effectiveCategory currentCategory |		sel := each selector.	(self includesLocalSelector: sel) ifTrue: [ ^ self ].		currentCategory := self organization categoryOfElement: sel.	effectiveCategory := each 		effectiveMethodCategoryCurrent: currentCategory 		new: newCategoryOrNil.		effectiveCategory 		ifNil: [ 			currentCategory ifNotNil: [ changedCategories add: currentCategory ].			self organization removeElement: sel.			^ self ].			(currentCategory isNil 		or: [ currentCategory == Protocol ambiguous 		or: [ currentCategory == oldCategoryOrNil ] ])	ifFalse: [ ^ self ].		(currentCategory ~~ effectiveCategory)		ifTrue: [ 			currentCategory ifNotNil: [ changedCategories add: currentCategory ].			self organization classify: sel under: effectiveCategory suppressIfDefault: false ]! !!Trait method!removeProtocol: aString 	"Remove each of the messages categorized under aString in the method 	dictionary of the receiver. Then remove the category aString."	| categoryName |	categoryName := aString asSymbol.	(self organization listAtCategoryNamed: categoryName) do:		[:sel | self removeSelector: sel].	self organization removeCategory: categoryName! !!Trait method!codeRewritingClass: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Rewrite Code')		action: [ target refactor rewriteCode ];		parent: #'Code Rewriting';		order: 0.	(aBuilder item: #'Search Code')		action: [ target refactor searchCode ];		parent: #'Code Rewriting';		order: 100.			(aBuilder item: #'Type class')		action: [ target refactor typeClass ];		parent: #'Code Rewriting';		order: 200;		withSeparatorAfter.			(aBuilder item: #'Category Regex')		action: [ target refactor categoryRegex ];		parent: #'Code Rewriting';		order: 300.			(aBuilder item: #'Class Regex')		action: [ target refactor classRegex ];		parent: #'Code Rewriting';		order: 400.			(aBuilder item: #'Protocol Regex')		action: [ target refactor protocolRegex ];		parent: #'Code Rewriting';		order: 500.			(aBuilder item: #'Source Regex')		action: [ target refactor sourceRegex ];		parent: #'Code Rewriting';		order: 600;		withSeparatorAfter.! !!Trait method!copyAll: selArray from: class 	"Install all the methods found in the method dictionary of the second 	argument, class, as the receiver's methods. Classify the messages under 	-As yet not classified-."	self copyAll: selArray		from: class		classified: nil! !!Trait method!methodsInCategory: aName 	"Answer a list of the methods of the receiver that are in category named aName"	self deprecated: 'Use selectorsInProtocol: instead' on: '28 August 2013' in: #'Pharo3.0'.	^ self selectorsInProtocol: aName! !!Trait method!updateInstancesFrom: oldClass	"Recreate any existing instances of the argument, oldClass, as instances of 	the receiver, which is a newly changed class. Permute variables as 	necessary. Return the array of old instances (none of which should be	pointed to legally by anyone but the array)."	"ar 7/15/1999: The updating below is possibly dangerous. If there are any	contexts having an old instance as receiver it might crash the system if	the new receiver in which the context is executed has a different layout.	See bottom below for a simple example:"	| oldInstances |	oldInstances := oldClass allInstances asArray.	oldInstances := self updateInstances: oldInstances from: oldClass isMeta: self isMeta.	^oldInstances"	| crashingBlock class |	class := Object subclass: #CrashTestDummy		instanceVariableNames: 'instVar'		classVariableNames: ''		poolDictionaries: ''		category: 'Crash-Test'.	class compile:'instVar: value instVar := value'.	class compile:'crashingBlock ^[instVar]'.	crashingBlock := (class new) instVar: 42; crashingBlock.	Object subclass: #CrashTestDummy		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Crash-Test'.	crashingBlock.	crashingBlock value.	"! !!Trait method!instVarIndexFor: instVarName	"Answer the index of the named instance variable."	| index |	index := self instanceVariables == nil 		ifTrue: [0]		ifFalse: [self instanceVariables indexOf: instVarName].	index = 0 ifTrue: 		[^self superclass == nil 			ifTrue: [0]			ifFalse: [self superclass instVarIndexFor: instVarName]].	^self superclass == nil 			ifTrue: [index]		ifFalse: [index + self superclass instSize]! !!Trait method!isClassSide	^self == self classSide! !!Trait method!noteCompilationOf: aSelector meta: isMeta	"A hook allowing some classes to react to recompilation of certain selectors"! !!Trait method!reformatAll	"Reformat all methods in this class"	self methods do: [:method | method reformat]! !!Trait method!allSharedPools	"Answer an ordered collection  of the shared pools the receiver shares, including those defined  in the superclasses of the receiver."		^ OrderedCollection new! !!Trait method!notifyUsersOfRecategorizedSelector: element from: oldCategory to: newCategory	self users do: [:each |		each noteRecategorizedSelector: element from: oldCategory to: newCategory]! !!Trait method!subclassesDo: aBlock	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses."	^self subclasses do: aBlock! !!Trait method!fileOutCategory: aSymbol on: aFileStream moveSource: moveSource toFile: fileIndex 	"File a description of the receiver's category, aString, onto aFileStream. If 	moveSource, is true, then set the method source pointer to the new file position.	Note when this method is called with moveSource=true, it is condensing the	.sources file, and should only write one preamble per method category."	| selectors |	aFileStream cr.	selectors := self selectorsToFileOutCategory: aSymbol.	"Overridden to preserve author stamps in sources file regardless"	selectors do: [:sel |		self printMethodChunk: sel 			withPreamble: true			on: aFileStream 			moveSource: moveSource 			toFile: fileIndex].	^ self! !!Trait method!hasSharedPools	"Only a class may have shared pools"	^ false! !!Trait method!instVarNameForIndex: index	"Answer the named instance variable with index index or nil if none."	| superInstSize |	index > self instSize ifTrue: [^nil].	superInstSize := self superclass ifNil: [0] ifNotNil: [self superclass instSize].	index > superInstSize ifTrue:		[^self instanceVariables at: index - superInstSize].	self superclass ifNil: [^nil].	^self superclass instVarNameForIndex: index	"(Object allSubclasses select:		[:cls| cls instSize > cls superclass instSize and: [cls subclasses isEmpty and: [cls superclass instSize > 0]]]) collect:			[:cls| (1 to: cls instSize) collect: [:i| cls instVarNameForIndex: i]]"! !!Trait method!compile: code classified: heading 	"Compile the argument, code, as source code in the context of the 	receiver and install the result in the receiver's method dictionary under 	the classification indicated by the second argument, heading. nil is to be 	notified if an error occurs. The argument code is either a string or an 	object that converts to a string or a PositionableStream on an object that 	converts to a string."	^self		compile: code		classified: heading		notifying: nil! !!Trait method!copyCategory: cat from: class 	"Specify that one of the categories of messages for the receiver is cat, as 	found in the class, class. Copy each message found in this category."	self copyCategory: cat		from: class		classified: cat! !!Trait method!instanceSide	^ self theNonMetaClass! !!Trait method!renameMethodAllItem: aBuilder	^ (aBuilder item: #'Rename method (all)')			keyText: 'r, m' if: Nautilus useOldStyleKeys not;			keyText: 'r' if: Nautilus useOldStyleKeys;			action: [ | scroll target |				target := aBuilder model.				scroll := target methodWidget vScrollValue.				target refactor renameMethodFor: target selectedMethod originMethod.				target methodWidget vScrollValue: scroll ].! !!Trait method!classesThatImplementAllOf: selectorSet	"Return an array of any classes that implement all the messages in selectorSet."	| found remaining |	found := OrderedCollection new.	selectorSet do:		[:sel | (self includesSelector: sel) ifTrue: [found add: sel]].	found isEmpty		ifTrue: [^ self subclasses inject: Array new						into: [:subsThatDo :sub |							subsThatDo , (sub classesThatImplementAllOf: selectorSet)]]		ifFalse: [remaining := selectorSet copyWithoutAll: found.				remaining isEmpty ifTrue: [^ Array with: self].				^ self subclasses inject: Array new						into: [:subsThatDo :sub |							subsThatDo , (sub classesThatImplementAllOf: remaining)]]! !!Trait method!sourceCodeRefactoring: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Create cascade')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor createCascadeBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 0.				(aBuilder item: #'Extract method')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor extractBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 100.				(aBuilder item: #'Extract method to component')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor extractToComponentBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 200.			(aBuilder item: #'Extract to temporary')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor extractToTemporaryBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 300.				(aBuilder item: #'Inline method')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor inlineMethodBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 400.				(aBuilder item: #'Inline method from component')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor inlineMethodFromComponentBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 500.				(aBuilder item: #'Inline temporary')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor inlineTemporaryBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 600.				(aBuilder item: #'Move variable definition')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor moveVariableDefinitionBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 700.					(aBuilder item: #'Rename temporary')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor renameTemporaryNamed: target sourceTextArea selectedContents Between: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 800.								(aBuilder item: #'Split cascade')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor splitCascadeBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 900.							(aBuilder item: #'Temporary to instvar')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor temporaryToInstanceVariableNamed: target sourceTextArea selectedContents asString Between: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 1000;			withSeparatorAfter.					(aBuilder item: #'Undo')			order: 1100;			label: target refactor undoLabel;			action: [ target refactor undoOperation ];			enabled: target refactor undoEnabled;			parent: #'Source code refactoring'.		(aBuilder item: #'Redo')			order: 1200;			label: target refactor redoLabel;			action: [ target refactor redoOperation ];			enabled: target refactor redoEnabled;			parent: #'Source code refactoring';			withSeparatorAfter.! !!Trait method!duringTestCompileSilently: code storeSource: storeSource	^ self		duringTestCompileSilently: code		storeSource: storeSource		classified: ''! !!Trait method!whichCategoryIncludesSelector: aSelector 	"Answer the category of the argument, aSelector, in the organization of 	the receiver, or answer nil if the receiver does not inlcude this selector."	(self includesSelector: aSelector)		ifTrue: [^ self organization categoryOfElement: aSelector]		ifFalse: [^nil]! !!Trait method!classCommentBlank	| existingComment stream |	existingComment := self theNonMetaClass organization classComment.	existingComment isEmpty		ifFalse: [^existingComment].	stream := (String new: 100) writeStream.	stream		nextPutAll: 'A';		nextPutAll: (self name first isVowel ifTrue: ['n '] ifFalse: [' ']);		nextPutAll: self name;		nextPutAll: ' is xxxxxxxxx.'.			(self instVarNames size > 0)		 ifTrue: [stream cr; cr; nextPutAll: 'Instance Variables'.  ].			self instVarNames asSortedCollection do: [:each |		stream			cr; tab; nextPutAll: each;			nextPut: $:;			tab; tab;			nextPutAll: '<Object>'].	stream cr.	self instVarNames asSortedCollection do: [:each |		stream			cr; nextPutAll: each;			cr; tab; nextPutAll: '- xxxxx'; cr].	^stream contents! !!Trait method!noteMethodChanged: oldMethod to: newMethod	SystemAnnouncer uniqueInstance		methodChangedFrom: oldMethod to: newMethod ! !!Trait method!wantsRecompilationProgressReported	"Answer whether the receiver would like progress of its recompilation reported interactively to the user."	^ true! !!Trait method!copyAll: selArray from: class classified: cat 	"Install all the methods found in the method dictionary of the second 	argument, class, as the receiver's methods. Classify the messages under 	the third argument, cat."	selArray do: [:s |		(class includesLocalSelector: s) ifTrue: [			self copy: s				from: class				classified: cat ] ]! !!Trait method!isDefinedInPackage: aPackage	"returns true if aPackage contains the definitino of this class"		^ aPackage includesClass: self.! !!Trait method!refactoringMethod: aBuilder	(aBuilder item: #'Refactoring')		order: -100.				(self renameMethodAllItem: aBuilder)		order: -90;		withSeparatorAfter! !!Trait method!addSelector: selector withMethod: compiledMethod notifying: requestor	| priorMethodOrNil |	priorMethodOrNil := self compiledMethodAt: selector ifAbsent: [nil].	self addSelectorSilently: selector withMethod: compiledMethod.	priorMethodOrNil 		ifNil: [SystemAnnouncer uniqueInstance methodAdded: compiledMethod selector: selector inClass: self requestor: requestor]		ifNotNil: [SystemAnnouncer uniqueInstance methodChangedFrom: priorMethodOrNil to: compiledMethod selector: selector inClass: self requestor: requestor].! !!Trait method!updateInstances: oldInstances from: oldClass isMeta: isMeta	"Recreate any existing instances of the argument, oldClass, as instances of the receiver, which is a newly changed class. Permute variables as necessary. Return the array of old instances (none of which should be pointed to legally by anyone but the array)."	"If there are any contexts having an old instance as receiver it might crash the system because the layout has changed, and the method only knows about the old layout."	| map variable instSize newInstances |	oldInstances isEmpty ifTrue:[^#()]. "no instances to convert"	isMeta ifTrue: [		oldInstances size = 1 ifFalse:[^self error:'Metaclasses can only have one instance'].		self soleInstance class == self ifTrue:[			^self error:'Metaclasses can only have one instance']].	map := self instVarMappingFrom: oldClass.	variable := self isVariable.	instSize := self instSize.	newInstances := Array new: oldInstances size.	1 to: oldInstances size do:[:i|		newInstances at: i put: (			self newInstanceFrom: (oldInstances at: i) variable: variable size: instSize map: map)].	"Now perform a bulk mutation of old instances into new ones"	oldInstances elementsExchangeIdentityWith: newInstances.	^newInstances "which are now old"! !!Trait method!hasComment	"return whether this class truly has a comment other than the default"	| org |	org := self instanceSide organization.	^org classComment isEmptyOrNil not! !!Trait method!printOn: aStream 	aStream nextPutAll: self name! !!Trait method!selectorsToFileOutCategory: aSymbol	^ self organization listAtCategoryNamed: aSymbol! !!Trait method!noteMethodAdded: aMethod	SystemAnnouncer uniqueInstance		methodAdded: aMethod! !!Trait method!acceptsLoggingOfCompilation	"Answer whether the receiver's method submisions and class defintions should be logged to the changes file and to the current change set.  The metaclass follows the rule of the class itself	Weird name is so that it will come lexically before #compile, so that a clean build can make it through."	^ true! !!Trait method!classComment: aString	"Store the comment, aString or Text or RemoteString, associated with the class we are orgainzing.  Empty string gets stored only if had a non-empty one before."	^ self classComment: aString stamp: '<historical>'! !!Trait method!spaceUsed	^super spaceUsed + (self hasClassSide		ifTrue: [self classSide spaceUsed] 		ifFalse: [0])! !!Trait method!compile: code notifying: requestor 	"Refer to the comment in Behavior|compile:notifying:." 	^self compile: code		 classified: Protocol unclassified		 notifying: requestor! !!Trait method!notifyUsersOfChangedSelectors: aCollection	self users do: [:each |		each noteChangedSelectors: aCollection]! !!Trait method!allMethodCategoriesIntegratedThrough: mostGenericClass	"Answer a list of all the method categories of the receiver and all its superclasses, up through mostGenericClass"	self deprecated: 'Use allProtocolsUpTo:' on: '28 August 2013' in: #'Pharo3.0'.	^ self allProtocolsUpTo: mostGenericClass! !!Trait method!forceNewFrom: anArray    "Create a new instance of the class and fill    its instance variables up with the array."    | object max |    object := self new.    max := self instSize.    anArray doWithIndex: [:each :index |        index > max ifFalse:            [object instVarAt: index put: each]].    ^ object! !!Trait method!allUnreferencedClassVariables	"Answer a list of the names of all the receiver's unreferenced class vars, including those defined in superclasses"	^ self systemNavigation allUnreferencedClassVariablesOf: self! !!Trait method!sharedPoolsString	"Answer a string of my shared pool names separated by spaces."	^String streamContents: [ :stream |		self sharedPools 			do: [ :each |				stream nextPutAll: (self environment 					keyAtIdentityValue: each 					ifAbsent: [ 'private' ]) ]			separatedBy: [ stream space ] ]! !!Trait method!selectorsInCategory: aName 	"Answer a list of the selectors of the receiver that are in category named aName"		| aColl |	aColl := Set withAll: (self organization listAtCategoryNamed: aName).	^ aColl asArray sort! !!Trait method!isTestCase	^false! !!Trait method!compileSilently: code 	"Compile the code and classify the resulting method in the given category, leaving no trail in the system log, nor in any change set, nor in the 'recent submissions' list. This should only be used when you know for sure that the compilation will succeed."	^ self compileSilently: code classified: 'not defined category' notifying: nil.! !!Trait method!packageOrganizer	"Returns the organizer of this class"	^ RPackage organizer ! !!Trait method!fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex	"File a description of the receiver on aFileStream. If the boolean 	argument, moveSource, is true, then set the trailing bytes to the position 	of aFileStream and to fileIndex in order to indicate where to find the 	source code."	aFileStream nextChunkPut: self definition.	self organization		putCommentOnFile: aFileStream		numbered: fileIndex		moveSource: moveSource		forClass: self.	self organization realCategories do: 		[:heading |		self fileOutCategory: heading			on: aFileStream			moveSource: moveSource			toFile: fileIndex]! !!Trait method!instanceVariablesString	"Answer a string of my instance variable names separated by spaces."	^String streamContents: [ :stream |		self instVarNames 			do: [ :each | stream nextPutAll: each ]			separatedBy: [ stream space ] ]! !!Trait method!sourceCodeRefactoringMenu: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Format')		order: 1100;		keyText: 'Ctrl Shift f';		action: [ target refactor formatSourceCode ].			(aBuilder item: #'Source code refactoring')			order: 1101;			arguments: {};			withSeparatorAfter.! !!Trait method!copy: sel from: class classified: cat 	"Install the method associated with the first arugment, sel, a message 	selector, found in the method dictionary of the second argument, class, 	as one of the receiver's methods. Classify the message under the third 	argument, cat."	| code category |	"Useful when modifying an existing class"	code := class sourceCodeAt: sel.	code ifNotNil: 			[cat				ifNil: [category := class organization categoryOfElement: sel]				ifNotNil: [category := cat].			(self includesLocalSelector: sel)				ifTrue: [code asString = (self sourceCodeAt: sel) asString 							ifFalse: [self error: self name 										, ' ' 										, sel 										, ' will be redefined if you proceed.']].			self compile: code classified: category]! !!Trait method!copy: sel from: class 	"Install the method associated with the first argument, sel, a message 	selector, found in the method dictionary of the second argument, class, 	as one of the receiver's methods. Classify the message under -As yet not 	classified-."	self copy: sel		from: class		classified: nil! !!Trait method!packagesWithoutExtensions	^ Set new add: self package; yourself.! !!Trait method!addCategory: newName before: aCategory	^ self organization addCategory: newName before: aCategory ! !!Trait method!copyAllCategoriesFrom: aClass 	"Specify that the categories of messages for the receiver include all of 	those found in the class, aClass. Install each of the messages found in 	these categories into the method dictionary of the receiver, classified 	under the appropriate categories."	aClass organization categories do: [:cat | self copyCategory: cat from: aClass]! !!Trait method!numberOfMethods	"count all methods that are local (not comming from a trait)"	| num |	num := self localMethods size.	^ self isMeta  		ifTrue: [ num ]		ifFalse: [ num + self class numberOfMethods ] ! !!Trait method!variableWordSubclass: className uses: aTraitCompositionOrArray instanceVariableNames: instVarNames	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	^ self variableWordSubclass: className		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: cat! !!Trait method!superclass: sup methodDict: md format: ft name: nm organization: org instVarNames: nilOrArray classPool: pool sharedPools: poolSet 	"Answer an instance of me, a new class, using the arguments of the 	message as the needed information.	Must only be sent to a new instance; else we would need Object flushCache."	self superclass: sup.	self methodDict: md.	self setFormat: ft.	self setName: nm.	self instanceVariables: nilOrArray.	self classPool: pool.	self sharedPools: poolSet.	self organization: org.! !!Trait method!usesLocalPoolVarNamed: aString	"Return whether the receiver uses a pool variable named: aString which is defined locally"		self hasSharedPools		ifTrue: [ self sharedPools do: [:each | (each usesClassVarNamed: aString) 												ifTrue: [ ^true ]]]		ifFalse: [ ^false ].	^false! !!Trait method!hasSharedPools	"Returns whether the receiver uses shared pools directly (Does not take into account that it may inherit shared pool uses."	^ self sharedPools notEmpty! !!Trait method!variableSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have indexable pointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				variableSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!declare: varString 	"Declare class variables common to all instances. Answer whether 	recompilation is advisable."	| newVars conflicts |	newVars :=  (varString subStrings: ' ') collect: [:x | x asSymbol].	conflicts := false.		(self classPool keys reject: [:x | newVars includes: x]) do: [:var | self removeClassVarNamed: var].		(newVars reject: [:var | self classPool includesKey: var]) do: [:var | "adding"			"check if new vars defined elsewhere"			(self innerBindingOf: var) 				ifNotNil: [(DuplicatedVariableError new) variable: var;						signal: var , ' is defined elsewhere'.					conflicts := true]].	newVars notEmpty		ifTrue: 			[self classPool: self classPool.			"in case it was nil"			newVars do: [:var | self classPool declare: var from: Undeclared]].	^conflicts! !!Trait method!subclass: aName uses: aTraitComposition with: aBlock 	"Define (or redefine) a subclass by evaluating a block closure. 	Note (MartinDias): 		This is a workaround for the subclass creation API when a trait is specified. 		To fix it well, in Pharo 4, a bit deeper refactoring is required, delegating this responsibility		to SlotClassBuilder."	^ self environment 		at: aName		ifPresent: [ :old | 			| copyOfOld newClass |			copyOfOld := old copy.			"Modify the class and set the new trait composition"			newClass := aBlock value. 			newClass setTraitComposition: aTraitComposition asTraitComposition.			"Announce that the definition changed when there is a new trait composution. 			Note: It may be a re-announce if there was other change in the class definition, 			e.g. an instace variable added."			(newClass traitComposition syntacticallyEquals: copyOfOld traitComposition) ifFalse: [ 				SystemAnnouncer uniqueInstance 					classDefinitionChangedFrom: copyOfOld 					to: newClass ].			newClass ]		ifAbsent: [			"Create the class and set the trait composition"			aBlock value				setTraitComposition: aTraitComposition asTraitComposition;				yourself ].! !!Trait method!applyChangesOfNewTraitCompositionReplacing: oldComposition	| changedSelectors |	changedSelectors := super applyChangesOfNewTraitCompositionReplacing: oldComposition.	self classSide noteNewBaseTraitCompositionApplied: self traitComposition.	^ changedSelectors! !!Trait method!criticTheNonMetaclassClass	"Return the class of the receiver for the critic browser. This behavior may be folded later by changing the name of this method or using another one."		^ self ! !!Trait method!variableByteSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver) in which the subclass is to 	have indexable byte-sized nonpointer variables."	^self classBuilder		superclass: self		variableByteSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!hasClassSide	^self classSide notNil.! !!Trait method!removeFromChanges	"References to the receiver, a class, and its metaclass should no longer be included in the system ChangeSet."	ChangeSet current removeClassAndMetaClassChanges: self! !!Trait method!isValidTraitName: aSymbol	^(aSymbol isEmptyOrNil		or: [aSymbol first isLetter not		or: [aSymbol anySatisfy: [:character | character isAlphaNumeric not]]]) not! !!Trait method!removeFromSystem	"Forget the receiver from the Smalltalk global dictionary. Any existing 	instances will refer to an obsolete version of the receiver."	self removeFromSystem: true.! !!Trait method!removeSubclass: aSubclass 	"If the argument, aSubclass, is one of the receiver's subclasses, remove it."	self subclasses == nil ifFalse:		[self subclasses:  (self subclasses copyWithout: aSubclass).		self subclasses isEmpty ifTrue: [self subclasses: nil]].! !!Trait method!binding       "Answer a binding for the receiver, sharing if possible"      | binding |	binding := self environment associationAt: self name ifAbsent: [nil -> self].       ^binding value == self ifTrue: [binding] ifFalse: [nil -> self]! !!Trait method!weakSubclass: className uses: aTraitCompositionOrArray instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "		^ self weakSubclass: className		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames 		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!fileOut	"Create a file whose name is the name of the receiver with '.st' as the 	extension, and file a description of the receiver onto it."		| internalStream |	internalStream := (String new: 100) writeStream.	internalStream header; timeStamp.	self hasSharedPools ifTrue: [		self shouldFileOutPools			ifTrue: [self fileOutSharedPoolsOn: internalStream]].	self fileOutOn: internalStream moveSource: false toFile: 0.	internalStream trailer.	FileStream writeSourceCodeFrom: internalStream baseName: self name isSt: true! !!Trait method!usesPoolVarNamed: aString	"Return whether the receiver has a pool variable named: aString, taking into account superclasses too"		self allSharedPools do: [:each | (each usesClassVarNamed: aString) ifTrue: [^true]].	^false! !!Trait method!subclass: t uses: aTraitComposition 	| cls |	cls := self				subclass: t				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'Unclassified'.	cls setTraitComposition: aTraitComposition asTraitComposition.	^ cls! !!Trait method!hasMethods	"Answer a Boolean according to whether any methods are defined for the 	receiver (includes whether there are methods defined in the receiver's 	metaclass)."	^super hasMethods or: [self class hasMethods]! !!Trait method!subclass: aSubclassSymbol instanceVariableNames: instVarNames classVariableNames: classVarNames category: aCategorySymbol	"Added to allow for a simplified subclass creation experience. "	^ self		subclass: aSubclassSymbol		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: aCategorySymbol! !!Trait method!weakSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a subclass of an existing class (the receiver) in which the subclass is to have weak indexable pointer variables."	^self classBuilder		superclass: self		weakSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!superclass: aClass methodDictionary: mDict format: fmt	"Basic initialization of the receiver"	super superclass: aClass methodDictionary: mDict format: fmt.	self subclasses: nil. ! !!Trait method!subclassesDo: aBlock 	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses."	self subclasses size == 0 		ifFalse:[self subclasses do: aBlock]! !!Trait method!newSubclass	| i className |	i := 1.	[className := (self name , i printString) asSymbol.	 self environment includesKey: className]		whileTrue: [i := i + 1].	^ self subclass: className		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Unclassified'"Point newSubclass new"! !!Trait method!fileOutInitializerOn: aStream	^self class fileOutInitializerOn: aStream! !!Trait method!setName: aSymbol andRegisterInCategory: categorySymbol environment: aSystemDictionary	(self isValidTraitName: aSymbol) ifFalse: [TraitException signal: 'Invalid trait name'].		(self environment == aSystemDictionary		and: [self name = aSymbol			and: [self category = categorySymbol]]) ifTrue: [^self].			((aSystemDictionary includes: aSymbol) and: [(aSystemDictionary at: aSymbol) ~~ self])		ifTrue: [TraitException signal: 'The name ''' , aSymbol , ''' is already used'].	(self environment notNil and: [self name notNil and: [self name ~= aSymbol]]) ifTrue: [		self environment renameClass: self as: aSymbol].		self name: aSymbol.	self environment: aSystemDictionary.		self environment at: self name put: self.	self environment organization classify: self name under: categorySymbol.	^ true! !!Trait method!isAnonymous	^self getName isNil! !!Trait method!addSharedPool: aSharedPool 	"Add the argument, aSharedPool, as one of the receiver's shared pools. 	Create an error if the shared pool is already one of the pools.	This method will work with shared pools that are plain Dictionaries or thenewer SharedPool subclasses"	(self sharedPools includes: aSharedPool)		ifTrue: [^self error: 'This is already in my shared pool list'].	self sharedPools == nil		ifTrue: [self sharedPools: (OrderedCollection with: aSharedPool)]		ifFalse: [self sharedPools add: aSharedPool]! !!Trait method!unload	"Sent when a the class is removed.  Does nothing, but may be overridden by (class-side) subclasses."! !!Trait method!asRingDefinitionWithMethods: methodsBoolean withSuperclasses: supersBoolean withSubclasses: subsBoolean withPackages: packsBoolean	"Retrieves a ring class/trait based on the receiver.	The data loaded in the class/trait (active methods, superclasses, subclasses and packages) is requested by the users.	As it may need to traverse hierarchies for retrieving super and subclasses a ring slice is created as the container for every class, method and package.	To retrieve the slice:  aRGClass environment "	| rgClass rgSlice  rgPackageKeys |		rgSlice := RGSlice named: #fromImage.	packsBoolean ifTrue: [ 		rgPackageKeys := rgSlice loadPackagesFromImage ].	rgClass := self asRingDefinitionWithMethods: methodsBoolean withSuperclasses: supersBoolean withSubclasses: subsBoolean withPackageKeys: rgPackageKeys in: rgSlice.	rgSlice cleanEmptyPackages.	rgSlice loadTraitUsers.			^ rgClass! !!Trait method!subclass: t	^ self subclass: t instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Unclassified' ! !!Trait method!hasClassVarNamed: aString	"Return whether the receiver has a class variables (shared variables among its class and subclasses) named: aString"		^ self classVarNames includes: aString! !!Trait method!addClassVarNamed: aString 	"Add the argument, aString, as a class variable of the receiver.	Signal an error if the first character of aString is not capitalized,	or if it is already a variable named in the class."	| symbol oldState |	oldState := self copy.	aString first canBeGlobalVarInitial		ifFalse: [^self error: aString, ' class variable name should be capitalized; proceed to include anyway.'].	symbol := aString asSymbol.	self withAllSubclasses do: 		[:subclass | 		(subclass bindingOf: symbol) ifNotNil:[			^ self error: aString 				, ' is already used as a variable name in class ' 				, subclass name]].	(self classPool includesKey: symbol) ifFalse: 		["Pick up any refs in Undeclared"		self classPool declare: symbol from: Undeclared.		SystemAnnouncer uniqueInstance classDefinitionChangedFrom: oldState to: self]! !!Trait method!duplicateClassWithNewName: aSymbol	| copysName class newDefinition |	copysName := aSymbol asSymbol.	copysName = self name		ifTrue: [ ^ self ].	(Smalltalk globals includesKey: copysName)		ifTrue: [ ^ self error: copysName , ' already exists' ].	newDefinition := self definition copyReplaceAll: '#' , self name asString with: '#' , copysName asString.	class := self class compiler source: newDefinition; logged: true; evaluate.	class classSide instanceVariableNames: self classSide instanceVariablesString.	class copyAllCategoriesFrom: self.	class class copyAllCategoriesFrom: self class.	^ class! !!Trait method!weakSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have weak indexable pointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				weakSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!variableSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver) in which the subclass is to 	have indexable pointer variables."	^self classBuilder		superclass: self		variableSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!subclass: aTraitName uses: aTraitCompositionOrArray instanceVariableNames: instVarNames classVariableNames: classVarNames category: cat 	^ self		subclass: aTraitName		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: cat ! !!Trait method!rename: aString 	"The new name of the receiver is the argument, aString."	| oldName newName |	(newName := aString asSymbol) = (oldName := self name)		ifTrue: [^ self].	(self environment includesKey: newName)		ifTrue: [^ self error: newName , ' already exists'].	self setName: newName.	self environment renameClass: self from: oldName.	(Undeclared includesKey: newName)		ifTrue: [self inform: 'There are references to, ' , aString printString , 'from Undeclared. Check them after this change.'].! !!Trait method!classPoolFrom: aClass	"share the classPool with aClass."		self classPool: aClass classPool.! !!Trait method!isObsolete	"Return true if the receiver is obsolete."	^(self environment at: self name ifAbsent: [nil]) ~~ self! !!Trait method!variableByteSubclass: className uses: aTraitCompositionOrArray instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat		"Added to allow for a simplified subclass creation experience. "		^ self variableByteSubclass: className		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!fileOutPool: aPool onFileStream: aFileStream 	| aPoolName |	(aPool  isKindOf: SharedPool class) ifTrue:[^self notify: 'we do not fileout SharedPool type shared pools for now'].	aPoolName := self environment keyAtIdentityValue: aPool.	self crTrace: aPoolName.	aFileStream nextPutAll: 'Transcript show: ''' , aPoolName , '''; cr!!'; cr.	aFileStream nextPutAll: 'Smalltalk at: #' , aPoolName , ' put: Dictionary new!!'; cr.	aPool keys asSortedCollection do: [ :aKey | | aValue |		aValue := aPool at: aKey.		aFileStream nextPutAll: aPoolName , ' at: #''' , aKey asString , '''', ' put:  '.		(aValue isKindOf: Number)			ifTrue: [aValue printOn: aFileStream]			ifFalse: [aFileStream nextPutAll: '('.					aValue printOn: aFileStream.					aFileStream nextPutAll: ')'].		aFileStream nextPutAll: '!!'; cr].	aFileStream cr! !!Trait method!classVarNamed: aString	"Answer the content of the Class Variable"	^self classPool at: aString asSymbol ifAbsent: [self error: 'no such lass var']! !!Trait method!variableSubclass: aClassName uses: aTraitCompositionOrArray instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "		^ self variableSubclass: aClassName 		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames  		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!fileOutSharedPoolsOn: aFileStream	"file out the shared pools of this class after prompting the user about each pool"	| poolsToFileOut |	poolsToFileOut := self sharedPools select: 		[:aPool | (self shouldFileOutPool: (self environment keyAtIdentityValue: aPool))].	poolsToFileOut do: [:aPool | self fileOutPool: aPool onFileStream: aFileStream].	! !!Trait method!classVarNames	"Answer a collection of the names of the class variables defined in the receiver."	^self classPool keys asArray sort! !!Trait method!asFullRingDefinition	"A behavior is converted to a ring class including its variables, methods, direct superclass, direct subclasses and the package in which is loaded.	Active methods are generated and each knows its package as well.	Note that for its direct superclass and subclasses no full definitions are requested. If you need to traverse hierarchies use #asRingDefinitionWithMethods:withSuperclasses:withSubclasses:withPackages:"		| rgClass rgSuper rgSub rgMethod packageKeys |	rgClass:= self asRingDefinition.	rgClass package: (RGContainer packageOfClass: rgClass).		self superclass notNil 		ifTrue: [ 			rgSuper := self superclass asRingDefinition.			rgClass superclass: rgSuper ]		ifFalse: [  			self isTrait ifTrue: [ 				rgSuper := Trait asRingDefinition.				rgClass superclass: rgSuper. ]			].	self subclasses do:[ :each |		rgSub := each asRingDefinition.		rgSub superclass: rgClass ].		packageKeys := RGContainer packageKeys.	self methodsDo:[ :mth|  			rgMethod := mth asActiveRingDefinition.			rgClass addMethod: rgMethod.			rgMethod package: (RGContainer packageOfMethod: rgMethod using: packageKeys) ].	self theMetaClass methodsDo:[ :mth|  			rgMethod := mth asActiveRingDefinition.			rgClass theMetaClass addMethod: rgMethod.			rgMethod package: (RGContainer packageOfMethod: rgMethod using: packageKeys) ].		^ rgClass! !!Trait method!removeClassVarNamed: aString	"Remove the class variable whose name is the argument, aString, from     the names defined in the receiver, a class. Create an error notification if     aString is not a class variable or if it is still being used in the code of     the class."	| aSymbol |	aSymbol := aString asSymbol.	(self classPool includesKey: aSymbol)		ifFalse: [ ^ self error: aString , ' is not a class variable' ].	self withAllSubclasses		do: [ :subclass | 			(Array with: subclass with: subclass class)				do: [ :classOrMeta | 					(classOrMeta whichSelectorsReferTo: (self classPool associationAt: aSymbol)) isEmpty						ifFalse: [ 							InMidstOfFileinNotification signal								ifTrue: [ 									self crTrace: self name , ' (' , aString , ' is Undeclared) '.									^ Undeclared declare: aSymbol from: self classPool ]								ifFalse: [ 									(self										confirm:											(aString , ' is still used in code of class ' , classOrMeta name , '.\Is it okay to move it to Undeclared?') withCRs)										ifTrue: [ ^ Undeclared declare: aSymbol from: self classPool ]										ifFalse: [ ^ self ] ] ] ] ].	self classPool removeKey: aSymbol.	self classPool isEmpty		ifTrue: [ self classPool: nil ]! !!Trait method!externalName	"Answer a name by which the receiver can be known."	^ self name! !!Trait method!subclass: t instanceVariableNames: ins	^ self subclass: t instanceVariableNames: ins classVariableNames: '' poolDictionaries: '' category: 'Unclassified' ! !!Trait method!category	"Answer the system organization category for the receiver. First check whether the	category name stored in the ivar is still correct and only if this fails look it up	(latter is much more expensive)"	| result |	self basicCategory ifNotNil: [ :symbol |		((self environment organization listAtCategoryNamed: symbol) includes: self name)			ifTrue: [ ^symbol ] ].	self basicCategory: (result := self environment organization categoryOfElement: self name).	^result! !!Trait method!possibleVariablesFor: misspelled continuedFrom: oldResults	| results |	results := misspelled correctAgainstDictionary: self classPool continuedFrom: oldResults.	self sharedPools do: [:pool | 		results := misspelled correctAgainstDictionary: pool continuedFrom: results ].	self superclass == nil		ifTrue: 			[ ^ misspelled correctAgainstDictionary: self environment continuedFrom: results ]		ifFalse:			[ ^ self superclass possibleVariablesFor: misspelled continuedFrom: results ]! !!Trait method!innerBindingOf: aSymbol	"Answer the binding of some variable resolved in the scope of the receiver, or one of its superclass	but do not look up binding in receiver's environment.	Use #bindingOf: for looking up the variable binding in a full scope, including receiver's environment"	"First look in classVar dictionary."	(self classPool bindingOf: aSymbol) ifNotNil: [:binding | ^binding].	"Next look in shared pools."	self sharedPools do: [:pool | (pool bindingOf: aSymbol) ifNotNil: [:binding | ^binding]].	self superclass ifNotNil: [:supercl | ^ supercl innerBindingOf: aSymbol].		^ nil! !!Trait method!bindingOf: varName	"Answer the binding of some variable resolved in the scope of the receiver, or nil	if variable with such name is not defined"	"The lookup recurses up to superclasses looking inside their class and shared pools,	but not the environment, since two classes, even if they have ancestry relationship,	could use different environments.	That's why we doing an environment lookup only as a last step of symbol lookup 	and taking only the environment of receiver only, not any of it's superclass(es) "		| aSymbol |	aSymbol := varName asSymbol.	^ (self innerBindingOf: aSymbol) ifNil: [		 self environment bindingOf: aSymbol	]! !!Trait method!compileAll	super compileAll.	self class compileAll.! !!Trait method!shouldFileOutPools	"respond with true if the user wants to file out the shared pools"	^self confirm: 'FileOut selected sharedPools?'! !!Trait method!variableWordSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver) in which the subclass is to 	have indexable word-sized nonpointer variables."	^self classBuilder		superclass: self		variableWordSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!classBuilder		"Answer the object responsible of creating subclasses of myself in the system."			^ Smalltalk classBuilder! !!Trait method!name: aString traitComposition: aComposition methodDict: aMethodDict localSelectors: aSet organization: aClassOrganization	"Used by copy"		self name: aString.	self localSelectors: aSet.	self methodDict: aMethodDict.	self traitComposition: aComposition.	self organization: aClassOrganization! !!Trait method!variableWordSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have indexable word-sized nonpointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				variableWordSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!compileAllFrom: oldClass	"Recompile all the methods in the receiver's method dictionary (not the	subclasses). Also recompile the methods in the metaclass."	super compileAllFrom: oldClass.	self class compileAllFrom: oldClass class! !!Trait method!renameSilently: aName	 [ self rename: aName] fuelValueWithoutNotifications! !!Trait method!reformatAll 	"Reformat all methods in this class.	Leaves old code accessible to version browsing"	super reformatAll.		"me..."	self class reformatAll	"...and my metaclass"! !!Trait method!removeFromSystem: logged	"Forget the receiver from the Smalltalk global dictionary. Any existing 	instances will refer to an obsolete version of the receiver."		"keep the class name and category for triggering the system change message. If we wait to long, then we get obsolete information which is not what we want."	"tell class to deactivate and unload itself-- two separate events in the module system"	self unload.	self users do: [ :user | user removeFromComposition: self ].	self superclass ifNotNil:		["If we have no superclass there's nothing to be remembered"		self superclass addObsoleteSubclass: self].	self environment forgetClass: self logged: logged.	self obsolete.! !!Trait method!shouldFileOutPool: aPoolName	"respond with true if the user wants to file out aPoolName"	^self confirm: ('FileOut the sharedPool ', aPoolName, '?')! !!Trait method!allSharedPools	"Answer an ordered collection of the pools the receiver shares, including those defined  in the superclasses of the receiver."	| aSet | 	^self superclass == nil		ifTrue: [self sharedPools copy]		ifFalse: [aSet := self superclass allSharedPools.			aSet addAll: self sharedPools.			aSet]! !!Trait method!sharing: poolString 	"Set up sharedPools. Answer whether recompilation is advisable."	| oldPools |	oldPools := self sharedPools.	self sharedPools: OrderedCollection new.	(poolString subStrings: ' ') do: 		[:poolName | 		self sharedPools add: (self environment at: poolName asSymbol ifAbsent:[			(self confirm: 'The pool dictionary ', poolName,' does not exist.',						'\Do you want it automatically created?' withCRs)				ifTrue:[self environment at: poolName asSymbol put: Dictionary new]				ifFalse:[^self error: poolName,' does not exist']])].	self sharedPools isEmpty ifTrue: [self sharedPools: nil].	oldPools do: [:pool |				| found |				found := self sharedPools anySatisfy: [:p | p == pool].				found ifFalse: [^ true "A pool got deleted"]].	^ false! !!Trait method!removeInstVarNamed: aString 	"Remove the argument, aString, as one of the receiver's instance variables."	| newInstVarString |	(self instVarNames includes: aString)		ifFalse: [self error: aString , ' is not one of my instance variables'].	newInstVarString := ''.	(self instVarNames copyWithout: aString) do: 		[:varName | newInstVarString := newInstVarString , ' ' , varName].	^self classBuilder		name: self name		inEnvironment: self environment		subclassOf: self superclass		type: self typeOfClass		instanceVariableNames: newInstVarString		classVariableNames: self classVariablesString		poolDictionaries: self sharedPoolsString		category: self category! !!Trait method!removeFromSystemUnlogged	"Forget the receiver from the Smalltalk global dictionary. Any existing instances will refer to an obsolete version of the receiver.  Do not log the removal either to the current change set nor to the system changes log"	^self removeFromSystem: false! !!Trait method!sharedPoolOfVarNamed: aString	"Returns the SharedPool or nil from which the pool variable named aString is coming from."		 ^ self sharedPools 			detect: [:each | each usesClassVarNamed: aString ]			ifNone: [						self superclass == nil							ifTrue: [nil]							ifFalse: [self superclass sharedPoolOfVarNamed: aString]						]! !!Trait method!ensureClassPool	^self classPool.! !!Trait method!category: aString 	"Categorize the receiver under the system category, aString, removing it from 	any previous categorization."	| oldCategory |	oldCategory := self basicCategory.	aString isString		ifTrue: [			self basicCategory: aString asSymbol.			self environment organization classify: self name under: self basicCategory ]		ifFalse: [self errorCategoryName].	SystemAnnouncer uniqueInstance		class: self recategorizedFrom: oldCategory to: self basicCategory! !!Trait method!asHelpTopic	^SystemReference forClass: self! !!Trait method!variableByteSubclass: className instanceVariableNames: instvarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	^self variableByteSubclass: className		instanceVariableNames: instvarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: cat! !!Trait method!removeSharedPool: aDictionary 	"Remove the pool dictionary, aDictionary, as one of the receiver's pool 	dictionaries. Create an error notification if the dictionary is not one of 	the pools.	: Note that it removes the wrong one if there are two empty Dictionaries in the list."	| satisfiedSet workingSet aSubclass |	(self sharedPools includes: aDictionary)		ifFalse: [^self error: 'the dictionary is not in my pool'].	"first see if it is declared in a superclass in which case we can remove it."	(self selectSuperclasses: [:class | class sharedPools includes: aDictionary]) isEmpty		ifFalse: [self sharedPools remove: aDictionary.				self sharedPools isEmpty ifTrue: [self sharedPools: nil].				^self]. 	"second get all the subclasses that reference aDictionary through me rather than a 	superclass that is one of my subclasses."	workingSet := self subclasses asOrderedCollection.	satisfiedSet := Set new.	[workingSet isEmpty] whileFalse:		[aSubclass := workingSet removeFirst.		(aSubclass sharedPools includes: aDictionary)			ifFalse: 				[satisfiedSet add: aSubclass.				workingSet addAll: aSubclass subclasses]].	"for each of these, see if they refer to any of the variables in aDictionary because 	if they do, we can not remove the dictionary."	satisfiedSet add: self.	satisfiedSet do: 		[:sub | 		aDictionary associationsDo: 			[:aGlobal | 			(sub whichSelectorsReferTo: aGlobal) isEmpty 				ifFalse: [^self error: aGlobal key 								, ' is still used in code of class '								, sub name]]].	self sharedPools remove: aDictionary.	self sharedPools isEmpty ifTrue: [self sharedPools: nil]! !!Trait method!isClassOrTrait	^true! !!Trait method!allClassVarNames	"Answer a Set of the names of the receiver's class variables, including those	defined in the superclasses of the receiver."	| aSet |	self superclass == nil		ifTrue: 			[^self classVarNames asSet]  "This is the keys so it is a new Set."		ifFalse: 			[aSet := self superclass allClassVarNames.			aSet addAll: self classVarNames.			^aSet]! !!Trait method!subclass: aName uses: aTraitCompositionOrArray instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	^ self		subclass: aName		uses: aTraitCompositionOrArray		with: [ 			self				subclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!classVarNamed: aString put: anObject	"Store anObject in the class variable."		| symbol |	symbol := aString asSymbol.	(self classPool includesKey: symbol) ifFalse:  [^self error: 'no such lass var'].	self classPool at: symbol put: anObject.! !!Trait method!weakSubclass: className instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "		^ self weakSubclass: className 		instanceVariableNames: instVarNames 		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!variableWordSubclass: className instanceVariableNames: instVarNames	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	 	^ self variableWordSubclass: className		instanceVariableNames: instVarNames  		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!usesClassVarNamed: aString	"Return whether the receiver or its superclasses have a class variable named: aString"		^ self allClassVarNames includes: aString! !!Trait method!obsolete	"Change the receiver and all of its subclasses to an obsolete class."	self == Object 		ifTrue: [^self error: 'Object is NOT obsolete'].	self setName: 'AnObsolete' , self name.	Object class instSize + 1 to: self classSide instSize do:		[:i | self instVarAt: i put: nil]. "Store nil over class instVars."	self classPool: nil.	self sharedPools: nil.	self hasClassSide ifTrue: [ self theMetaClass obsolete].	super obsolete.! !!Trait method!isSelfEvaluating	^self isObsolete not! !!Trait method!variableSubclass: className instanceVariableNames: instVarNames classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	^ self variableSubclass: className		instanceVariableNames: instVarNames 		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!hasAbstractMethods	"Tells whether the receiver locally defines an abstract method, i.e., a method sending subclassResponsibility"	^ super hasAbstractMethods or: [self class hasAbstractMethods]! !!Trait method!fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex 	"File a description of the receiver on aFileStream. If the boolean argument,	moveSource, is true, then set the trailing bytes to the position of aFileStream and	to fileIndex in order to indicate where to find the source code."	^self fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex initializing: true! !!Trait method!variableByteSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have indexable byte-sized nonpointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				variableByteSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!superclassOrder: classes	"Arrange the classes in the collection, classes, in superclass order so the 	classes can be properly filed in. Do it in sets instead of ordered collections."	| all unprocessedClasses cache |	unprocessedClasses := classes asSet. 	cache := Dictionary new.	all := OrderedCollection new: unprocessedClasses size.	unprocessedClasses size timesRepeat: [ |nextClass|		nextClass := unprocessedClasses detect: [:aClass | self hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache].		all add: nextClass.		unprocessedClasses remove: nextClass].	^all! !!Trait method!template: aSystemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class."	^ self templateForSubclassOf: Object name category: aSystemCategoryName ! !!Trait method!templateForSubclassOf: priorClassName category: systemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class, given that the class previously looked at was as given"	^priorClassName asString, ' subclass: #NameOfSubclass	instanceVariableNames: ''''	classVariableNames: ''''	poolDictionaries: ''''	category: ''' , systemCategoryName asString , ''''! !!Trait method!allSuperclassesFor: aClass cache: cache 		^ cache at: aClass ifAbsentPut: [aClass allSuperclasses asArray]! !!Trait method!hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache 	^ (self hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache) and: [		aClass isMeta not or: [			self hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache]] ! !!Trait method!hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache 	^ (unprocessedClasses includesAnyOf: (self allSuperclassesFor: aClass cache: cache)) not	! !!Trait method!fileOutPool: aString	"file out the global pool named aString"		| internalStream |	internalStream := (String new: 1000) writeStream.	self new fileOutPool: (self environment at: aString asSymbol) onFileStream: internalStream.	FileStream writeSourceCodeFrom: internalStream baseName: aString isSt: true.! !!Trait method!rootsOfTheWorld	"return all classes that have a nil superclass"		^(Smalltalk globals select: [:each | each isBehavior and: [each superclass isNil]]) asOrderedCollection! !!Trait method!doesNotIncludeInstanceOrSuperclassesFor: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!superclassOrder: classes	"Arrange the classes in the collection, classes, in superclass order so the 	classes can be properly filed in. Do it in sets instead of ordered collections."	| all unprocessedClasses cache |	unprocessedClasses := classes asSet. 	cache := Dictionary new.	all := OrderedCollection new: unprocessedClasses size.	unprocessedClasses size timesRepeat: [ |nextClass|		nextClass := unprocessedClasses detect: [:aClass | self hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache].		all add: nextClass.		unprocessedClasses remove: nextClass].	^all! !!Trait method!template: aSystemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class."	^ self templateForSubclassOf: Object name category: aSystemCategoryName ! !!Trait method!templateForSubclassOf: priorClassName category: systemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class, given that the class previously looked at was as given"	^priorClassName asString, ' subclass: #NameOfSubclass	instanceVariableNames: ''''	classVariableNames: ''''	poolDictionaries: ''''	category: ''' , systemCategoryName asString , ''''! !!Trait method!allSuperclassesFor: aClass cache: cache 		^ cache at: aClass ifAbsentPut: [aClass allSuperclasses asArray]! !!Trait method!hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache 	^ (self hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache) and: [		aClass isMeta not or: [			self hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache]] ! !!Trait method!hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache 	^ (unprocessedClasses includesAnyOf: (self allSuperclassesFor: aClass cache: cache)) not	! !!Trait method!fileOutPool: aString	"file out the global pool named aString"		| internalStream |	internalStream := (String new: 1000) writeStream.	self new fileOutPool: (self environment at: aString asSymbol) onFileStream: internalStream.	FileStream writeSourceCodeFrom: internalStream baseName: aString isSt: true.! !!Trait method!rootsOfTheWorld	"return all classes that have a nil superclass"		^(Smalltalk globals select: [:each | each isBehavior and: [each superclass isNil]]) asOrderedCollection! !!Trait method!doesNotIncludeInstanceOrSuperclassesFor: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!canZapMethodDictionary	"Return true if it is safe to zap the method dictionary on #obsolete"	self soleInstance == nil		ifTrue:[^true]		ifFalse:[^self soleInstance canZapMethodDictionary]! !!Trait method!wantsChangeSetLogging	"Answer whether code submitted for the receiver should be remembered by the changeSet mechanism.The metaclass follows the rule of the class itself."	^ self theNonMetaClass wantsChangeSetLogging! !!Trait method!fileOutInitializerOn: aStream	(self includesSelector: #initialize) ifTrue: 		[aStream cr.		aStream nextChunkPut: self soleInstance name , ' initialize'].! !!Trait method!addObsoleteSubclass: aClass	"Do nothing."! !!Trait method!asFullRingDefinition	^ self theNonMetaClass asFullRingDefinition theMetaClass! !!Trait method!isSelfEvaluating	^self isObsolete not! !!Trait method!uses: aTraitCompositionOrArray	| copyOfOldTrait newComposition |	copyOfOldTrait := self copy.	newComposition := aTraitCompositionOrArray asTraitComposition.	self assertConsistantCompositionsForNew: newComposition.	self setTraitComposition: newComposition.	SystemAnnouncer uniqueInstance		traitDefinitionChangedFrom: copyOfOldTrait to: self.! !!Trait method!isMeta	^ true! !!Trait method!removeSubclass: aClass	"Do nothing."! !!Trait method!possibleVariablesFor: misspelled continuedFrom: oldResults	^ self theNonMetaClass possibleVariablesFor: misspelled continuedFrom: oldResults! !!Trait method!subclasses	"Answer the receiver's subclasses."	self theNonMetaClass == nil ifTrue:[^#()].	^self theNonMetaClass subclasses 		select:[:aSubclass| aSubclass isMeta not] 		thenCollect:[:aSubclass| aSubclass class]	"Metaclass allInstancesDo:		[:m | Compiler evaluate: 'subclasses:=nil' for: m logged: false]"! !!Trait method!nonTrivial 	"Answer whether the receiver has any methods or instance variables."	^ self instVarNames notEmpty or: [self hasMethods or: [self hasTraitComposition]]! !!Trait method!uses: aTraitCompositionOrArray instanceVariableNames: instVarString 	| newComposition newMetaClass copyOfOldMetaClass |		copyOfOldMetaClass := self copy.	newMetaClass := self instanceVariableNames: instVarString.		newComposition := aTraitCompositionOrArray asTraitComposition.	newMetaClass assertConsistantCompositionsForNew: newComposition.	newMetaClass setTraitComposition: newComposition.		SystemAnnouncer uniqueInstance		classDefinitionChangedFrom: copyOfOldMetaClass to: newMetaClass! !!Trait method!asRingDefinition	^ self theNonMetaClass asRingDefinition theMetaClass! !!Trait method!noteNewBaseTraitCompositionApplied: aTraitComposition	"The argument is the new trait composition of my base trait - add	the new traits or remove non existing traits on my class side composition.	(Each class trait in my composition has its base trait on the instance side	of the composition - manually added traits to the class side are always 	base traits.)"		| newComposition traitsFromInstanceSide |	traitsFromInstanceSide := self traitComposition traits		select: [:each | each isClassTrait]		thenCollect: [:each | each baseTrait].			newComposition := self traitComposition copyTraitExpression.	(traitsFromInstanceSide copyWithoutAll: aTraitComposition traits) do: [:each |		newComposition removeFromComposition: each classTrait].	(aTraitComposition traits copyWithoutAll: traitsFromInstanceSide) do: [:each |		newComposition add:  (each classTrait)].	self setTraitComposition: newComposition! !!Trait method!bindingOf: varName	^self theNonMetaClass classBindingOf: varName! !!Trait method!addSubclass: aClass	"Do nothing."! !!Trait method!subclassesDo: aBlock	"Evaluate aBlock for each of the receiver's immediate subclasses."	self theNonMetaClass subclassesDo:[:aSubclass|		"The following test is for Class class which has to exclude		the Metaclasses being subclasses of Class."		aSubclass isMeta ifFalse:[aBlock value: aSubclass class]].! !!Trait method!removeInstVarNamed: aString 	"Remove the argument, aString, as one of the receiver's instance variables."	| newArray newString |	(self instVarNames includes: aString)		ifFalse: [self error: aString , ' is not one of my instance variables'].	newArray := self instVarNames copyWithout: aString.	newString := ''.	newArray do: [:aString2 | newString := aString2 , ' ' , newString].	self instanceVariableNames: newString! !!Trait method!addInstVarNamed: aString 	"Add the argument, aString, as one of the receiver's instance variables."	| fullString |	fullString := String streamContents: [:strm |		self instVarNames do: [:aString2 | strm nextPutAll: aString2; space].		strm nextPutAll: aString].	self instanceVariableNames: fullString! !!Trait method!criticTheNonMetaclassClass	^self theNonMetaClass ! !!Trait method!classPool	"Answer the dictionary of class variables."	^self theNonMetaClass classPool! !!Trait method!sharedPools	^OrderedCollection new.! !!Trait method!isObsolete	"Return true if the receiver is obsolete"	^self soleInstance == nil "Either no thisClass"		or:[self soleInstance classSide ~~ self "or I am not the class of thisClass"			or:[self soleInstance isObsolete]] "or my instance is obsolete"! !!Trait method!assertConsistantCompositionsForNew: aTraitComposition	"Applying or modifying a trait composition on the class side	of a behavior has some restrictions."	| baseTraits notAddable message |	baseTraits := aTraitComposition traits select: [:each | each isBaseTrait].	baseTraits isEmpty ifFalse: [		notAddable := (baseTraits reject: [:each | each classSide methodDict isEmpty]).		notAddable isEmpty ifFalse: [			message := String streamContents: [:stream |				stream nextPutAll: 'You can not add the base trait(s)'; cr.				notAddable					do: [:each | stream nextPutAll: each name]					separatedBy: [ stream nextPutAll: ', '].				stream cr; nextPutAll: 'to this composition because it/they define(s) methods on the class side.'].		^TraitCompositionException signal: message]].			(self instanceSide traitComposition traits asSet =			(aTraitComposition traits				select: [:each | each isClassTrait]				thenCollect: [:each | each baseTrait]) asSet) ifFalse: [				^TraitCompositionException signal: 'You can not add or remove class side traits on				the class side of a composition. (But you can specify aliases or exclusions				for existing traits or add a trait which does not have any methods on the class side.)']! !!Trait method!acceptsLoggingOfCompilation	"Answer whether the receiver's method submisions and class defintions should be logged to the changes file and to the current change set.  The metaclass follows the rule of the class itself."	^ self theNonMetaClass acceptsLoggingOfCompilation! !!Trait method!wantsRecompilationProgressReported	"The metaclass follows the rule of the class itself."	^ self theNonMetaClass wantsRecompilationProgressReported! !!Trait method!obsoleteSubclasses	"Answer the receiver's subclasses."	self theNonMetaClass == nil ifTrue:[^#()].	^self theNonMetaClass obsoleteSubclasses 		select:[:aSubclass| aSubclass isMeta not] 		thenCollect:[:aSubclass| aSubclass class]	"Metaclass allInstancesDo:		[:m | Compiler evaluate: 'subclasses:=nil' for: m logged: false]"! !!Trait method!hasClassSide	^false! !!Trait method!classVarNames	"Answer a set of the names of the class variables defined in the receiver's instance."		self theNonMetaClass ifNil: [ ^ Set new ].	^self theNonMetaClass classVarNames! !!Trait method!category	^ self theNonMetaClass category! !!Trait method!isAnonymous	^self soleInstance isAnonymous ! !!Trait method!binding	"return an association that can be used as the binding	 To share it between methods, reuse an existing one if possible"	^self methodDict 		ifEmpty: [nil -> self]		ifNotEmpty: [:dict | dict anyOne classBinding]! !!Trait method!initializeFrom: anotherClassTrait	self traitComposition: self traitComposition copyTraitExpression.	self methodDict: self methodDict copy.	self localSelectors: self localSelectors copy.	self basicOrganization: self organization copy.! !----STARTUP----2015-01-17T00:48:47.784704+01:00 as /Users/craig/me/behavior/context/development/context/context.app/Contents/Resources/context processor.app/Contents/Resources/context/memories/CFE10A14-D883-4ACE-990A-0DDA86AA362B/CFE10A14-D883-4ACE-990A-0DDA86AA362B!!Class methodsFor: 'accessing' stamp: 'CraigLatta 1/17/2015 01:13' prior: 19810827!traitComposition	| index |		index := (		((self instVarAt: 7) isKindOf: Array)			ifTrue: [13]			ifFalse: [14]).				(self instVarAt: index) ifNil: [self instVarAt: index put: TraitComposition new].	^self instVarAt: index! !----QUIT/NOSAVE----2015-01-17T01:16:09.906155+01:00 CFE10A14-D883-4ACE-990A-0DDA86AA362B priorSource: 313985!----STARTUP----2015-01-17T01:16:23.899228+01:00 as /Users/craig/me/behavior/context/development/context/context.app/Contents/Resources/context processor.app/Contents/Resources/context/memories/CFE10A14-D883-4ACE-990A-0DDA86AA362B/CFE10A14-D883-4ACE-990A-0DDA86AA362B!!Class methodsFor: 'accessing' stamp: 'CraigLatta 1/17/2015 01:19' prior: 19810827!traitComposition	| index |		index := 1.	[(self instVarAt: index) class == TraitComposition] whileFalse: [index := index + 1].	(self instVarAt: index) ifNil: [self instVarAt: index put: TraitComposition new].	^self instVarAt: index! !----STARTUP----2015-01-17T01:27:03.747559+01:00 as /Users/craig/me/behavior/context/development/context/context.app/Contents/Resources/context processor.app/Contents/Resources/context/memories/CFE10A14-D883-4ACE-990A-0DDA86AA362B/CFE10A14-D883-4ACE-990A-0DDA86AA362B!----SNAPSHOT----2015-01-17T01:31:58.665474+01:00 CFE10A14-D883-4ACE-990A-0DDA86AA362B priorSource: 313985!!Class methodsFor: 'accessing' stamp: 'CraigLatta 1/17/2015 01:32' prior: 19810827!traitComposition	| index |		index := (		((self instVarAt: 8) class == ByteSymbol)			ifTrue: [13]			ifFalse: [14]).				(self instVarAt: index) ifNil: [self instVarAt: index put: TraitComposition new].	^self instVarAt: index! !!Trait method!commentInventory	"Answer a string with a count of the classes with and without comments 	for all the classes in the package of which this class is a member."	"Morph commentInventory"	^ self environment organization commentInventory: (self category copyUpTo: $-), '*'! !!Trait method!fileOutMethod: selector	"Write source code of a single method on a file.  Make up a name for the file."		| internalStream |	internalStream := (String new: 1000) writeStream.	self fileOutMethod: selector on: internalStream.	FileStream writeSourceCodeFrom: internalStream baseName: (self name , '-' , (selector copyReplaceAll: ':' with: '')) isSt: true.! !!Trait method!notifyOfRecategorizedSelector: element from: oldCategory to: newCategory	SystemAnnouncer uniqueInstance selector: element recategorizedFrom: oldCategory to: newCategory inClass: self.	SystemAnnouncer uniqueInstance 		suspendAllWhile: [self notifyUsersOfRecategorizedSelector: element from: oldCategory to: newCategory].! !!Trait method!classSide	^self theMetaClass.! !!Trait method!instVarMappingFrom: oldClass	"Return the mapping from instVars of oldClass to new class that is used for converting old instances of oldClass."	| oldInstVarNames |	oldInstVarNames := oldClass allInstVarNames.	^self allInstVarNames 			collect: [:instVarName | oldInstVarNames indexOf: instVarName].! !!Trait method!mcWorkingCopy	MCWorkingCopy managersForClass:  self do: [: package | ^ package ]! !!Trait method!updateOrganizationDescription: aTraitMethodDescription oldCategory: oldCategoryOrNil newCategory: newCategoryOrNil changedCategories: changedCategories	| sel effectiveCategory currentCategory |	sel := aTraitMethodDescription selector.		(self includesLocalSelector: sel) ifTrue: [ ^ self ].	 	currentCategory := self organization categoryOfElement: sel.	effectiveCategory := aTraitMethodDescription effectiveMethodCategoryCurrent: currentCategory new: newCategoryOrNil.		effectiveCategory ifNil: [ 		currentCategory ifNotNil: [ changedCategories add: currentCategory ].		^ self organization removeElement: sel ].			((currentCategory isNil 		or: [ 				currentCategory == Protocol ambiguous 				or: [ currentCategory == oldCategoryOrNil ] ])		and: [ currentCategory ~~ effectiveCategory ])		ifTrue: [ 			currentCategory ifNotNil: [ changedCategories add: currentCategory ].			self organization classify: sel under: effectiveCategory suppressIfDefault: false ]! !!Trait method!reorganize	"During fileIn, !!Rectangle reorganize!! allows Rectangle to seize control and treat the next chunk as its organization.  See the transfer of control where ReadWriteStream fileIn calls scanFrom:"	^self organization! !!Trait method!isInstanceSide	^self isClassSide not! !!Trait method!noteMethodRemoved: oldMethod	SystemAnnouncer uniqueInstance		methodRemoved: oldMethod! !!Trait method!obsolete	"Make the receiver obsolete."	self superclass removeSubclass: self.	self organization: nil.	super obsolete.! !!Trait method!removeInstVarNamed: aString 	"Remove the argument, aString, as one of the receiver's instance 	variables. Create an error notification if the argument is not found."	^self subclassResponsibility! !!Trait method!noteRecategorizedSelectors: aCollection oldComposition: aTraitComposition		aCollection do: [:each | | oldCategory newCategory | 		oldCategory := self organization categoryOfElement: each.		newCategory := (self traitComposition methodDescriptionForSelector: each) effectiveMethodCategory.		self noteRecategorizedSelector: each from: oldCategory to: newCategory]! !!Trait method!localMethods	"returns the methods of classes including the ones of the traits that the class uses" 	 	^ self methods select: [:each | self includesLocalSelector: each selector].! !!Trait method!wantsChangeSetLogging	"Answer whether code submitted for the receiver should be remembered by the changeSet mechanism."	^ true! !!Trait method!package	^ RPackage organizer packageOf: self.	! !!Trait method!correspondingForTest	"Return the unit test that correspond to me. If it does not exist, it returns myself. 	 Return the tested class if sent to a class"		| className |	className := (self inheritsFrom: TestCase)		ifTrue: [ self name copyReplaceAll: 'Test' with: '' ]		ifFalse: [ self name, 'Test' ].	^ Smalltalk 		at: className asSymbol 		ifAbsent: [ self ]	! !!Trait method!usesPoolVarNamed: aString	"Only classes may use a pool variable named: aString"		^ false! !!Trait method!logMethodSource: aText forMethod: aCompiledMethod inCategory: category withStamp: changeStamp	aCompiledMethod		putSource: aText		class: self		category: category		withStamp: changeStamp 		inFile: 2		priorMethod: (self					compiledMethodAt: aCompiledMethod selector					ifAbsent: [])! !!Trait method!duringTestCompileSilently: code storeSource: storeSource classified: aCategory	^ Author 		useAuthor: 'TestsAuthor'		during: [ [			self 				compile: code				classified: (aCategory ifNil: [ '' ])				withStamp: nil 				notifying: nil 				logSource: storeSource ] fuelValueWithoutNotifications ]! !!Trait method!organization: aClassOrg	"Install an instance of ClassOrganizer that represents the organization of the messages of the receiver."	aClassOrg ifNotNil: [aClassOrg setSubject: self].	self basicOrganization: aClassOrg.! !!Trait method!superclass: aClass methodDictionary: mDict format: fmt	"Basic initialization of the receiver"	super superclass: aClass methodDictionary: mDict format: fmt.	self instanceVariables: nil.	self organization: nil.! !!Trait method!hasClassSide	^self subclassResponsibility.! !!Trait method!isExtendedInPackage: aPackage	"returns true if aPackage defines an extension to this class"	^ aPackage extendsClass: self.! !!Trait method!uncategorizedSelectors	^ self selectorsInProtocol: Protocol unclassified! !!Trait method!copyCategory: cat from: aClass classified: newCat 	"Specify that one of the categories of messages for the receiver is the 	third argument, newCat. Copy each message found in the category cat in 	class aClass into this new category."	self copyAll: (aClass organization listAtCategoryNamed: cat)		from: aClass		classified: newCat! !!Trait method!methodsFor: categoryName 	"Answer a ClassCategoryReader for compiling the messages in the category, categoryName, of the receiver."	^ ClassCategoryReader new setClass: self category: categoryName asSymbol	"(False methodsFor: 'logical operations') inspect"! !!Trait method!sharedPoolOfVarNamed: aString	"Only classes may have shared pools"		^ nil! !!Trait method!compile: text classified: category notifying: requestor	| stamp |	stamp := self acceptsLoggingOfCompilation		ifTrue: [ Author changeStamp ]		ifFalse: [ nil ].	^ self		compile: text		classified: category		withStamp: stamp		notifying: requestor! !!Trait method!isMeta	^self isClassSide! !!Trait method!packageRefactoringMenu: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Rewrite Code')		order:  100;		withSeparatorAfter.		(aBuilder item: #'Rewrite Code')		action: [ target refactor rewriteCode ];		parent: #'Rewrite Code';		order: 0.	(aBuilder item: #'Search Code')		action: [ target refactor searchCode ];		parent: #'Rewrite Code';		order: 100.! !!Trait method!fileOutMethod: selector on: aStream		(selector == #Comment) ifTrue: [^ self inform: 'Sorry, cannot file out class comment in isolation.'].	(self includesSelector: selector) ifFalse: [^ self error: 'Selector ', selector asString, ' not found'].	aStream header; timeStamp.	self printMethodChunk: selector withPreamble: true		on: aStream moveSource: false toFile: 0.! !!Trait method!fileOutOrganizationOn: aFileStream	"File a description of the receiver's organization on aFileStream."	aFileStream cr; nextPut: $!!.	aFileStream nextChunkPut: self name, ' reorganize'; cr.	aFileStream nextChunkPut: self organization stringForFileOut ; cr! !!Trait method!linesOfCode 	"An approximate measure of lines of code.	Includes comments, but excludes blank lines."	| lines |	lines := self localMethods inject: 0 into: [:sum :each | sum + each linesOfCode]. 	^ self isMeta 		ifTrue: [lines]		ifFalse: [lines + self class linesOfCode]! !!Trait method!allSelectorsInProtocol: aName 	"Answer a list of all the methods of the receiver and all its 	superclasses that are in the protocol named aName"		| aColl |	aColl := OrderedCollection new.	self withAllSuperclasses do: [:aClass | 		aColl addAll: (aClass organization listAtCategoryNamed: aName) ].	^ aColl asSet asArray sort! !!Trait method!groupRefactoring: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Rewrite Code')		order:  100;		withSeparatorAfter.		(aBuilder item: #'Rewrite Code')		action: [ target refactor rewriteCode ];		parent: #'Rewrite Code';		order: 0.	(aBuilder item: #'Search Code')		action: [ target refactor searchCode ];		parent: #'Rewrite Code';		order: 100.! !!Trait method!errorCategoryName	self error: 'Category name must be a String'! !!Trait method!packages	"the extending packages of a class are the packages that extend it."		^  self extendingPackages asSet copy add: self package; yourself! !!Trait method!printCategoryChunk: category on: aFileStream withStamp: changeStamp priorMethod: priorMethod 	"Print a method category preamble.  This must have a category name.	It may have an author/date stamp, and it may have a prior source link.	If it has a prior source link, it MUST have a stamp, even if it is empty.""The current design is that changeStamps and prior source links are preserved in the changes file.  All fileOuts include changeStamps.  Condensing sources, however, eliminates all stamps (and links, natch)."	aFileStream cr; nextPut: $!!.	aFileStream nextChunkPut: (String streamContents:		[:strm |		strm nextPutAll: self name; nextPutAll: ' methodsFor: '; print: category asString.		(changeStamp ~~ nil and:			[changeStamp size > 0 or: [priorMethod ~~ nil]]) ifTrue:			[strm nextPutAll: ' stamp: '; print: changeStamp].		priorMethod ~~ nil ifTrue:			[strm nextPutAll: ' prior: '; print: priorMethod sourcePointer]]).	! !!Trait method!allProtocolsUpTo: mostGenericClass	"Answer a list of all the method protocols of the receiver and all its superclasses, up through mostGenericClass"	| otherClassCategories thisClassCategories lowercaseSortBlock  |			otherClassCategories := OrderedCollection new.	lowercaseSortBlock  := [ :a :b | a asLowercase <= b asLowercase ].		(self allSuperclassesIncluding: mostGenericClass) do: [ :aClass | 		 otherClassCategories addAll: aClass organization categories ].	otherClassCategories remove: 'no messages' ifAbsent: [  ].	thisClassCategories := self organization categories sorted: lowercaseSortBlock.														^ thisClassCategories , ((otherClassCategories asSet removeAllSuchThat: [ :each |								thisClassCategories includes: each ]) sorted: lowercaseSortBlock)! !!Trait method!instVarIndexFor: instVarName ifAbsent: aBlock	"Answer the index of the named instance variable."	| index |	index := self instanceVariables == nil 				ifTrue: [0]				ifFalse: [self instanceVariables indexOf: instVarName ifAbsent: [0]].	index = 0 ifTrue: 		[^self superclass == nil 			ifTrue: [aBlock value]			ifFalse: [self superclass instVarIndexFor: instVarName ifAbsent: aBlock]].	^self superclass == nil 			ifTrue: [index]		ifFalse: [index + self superclass instSize]! !!Trait method!noteRecategorizedSelector: aSymbol from: oldCategoryOrNil to: newCategoryOrNil	| changedCategories |	changedCategories := self updateOrganizationSelector: aSymbol oldCategory: oldCategoryOrNil newCategory: newCategoryOrNil.	changedCategories do: [:each |		(self organization isEmptyCategoryNamed: each) ifTrue: [self organization removeCategory: each]]! !!Trait method!uncategorizedMethods	self deprecated: 'Use uncategorizedSelectors' on: '28 August 2013' in: #'Pharo3.0'.	^ self uncategorizedSelectors ! !!Trait method!comment: aStringOrText stamp: aStamp	"Set the receiver's comment to be the argument, aStringOrText."	self instanceSide classComment: aStringOrText stamp: aStamp.! !!Trait method!isExtended	^ self extendingPackages isEmpty! !!Trait method!storeOn: aStream	"Classes and Metaclasses have global names."	aStream nextPutAll: self name! !!Trait method!usesLocalPoolVarNamed: aString	^false.! !!Trait method!manifestBuilderForRuleChecker: aRuleChecker	"Return the manifestsince the rulechecker is keeping a cache, we ask it back"	^ aRuleChecker manifestBuilderOfClass: self! !!Trait method!definitionForNautilus	^ self definition! !!Trait method!compile: text classified: category withStamp: changeStamp notifying: requestor	^ self		compile: text		classified: category		withStamp: changeStamp		notifying: requestor		logSource: self acceptsLoggingOfCompilation! !!Trait method!instVarNames	"Answer an Array of the receiver's instance variable names."	self instanceVariables == nil		ifTrue: [^#()]		ifFalse: [^self instanceVariables]! !!Trait method!noteAddedSelector: aSelector meta: isMeta	"A hook allowing some classes to react to adding of certain selectors"! !!Trait method!duringTestCompileSilently: code classified: aCategory	^ self 		duringTestCompileSilently: code		storeSource: true		classified: aCategory! !!Trait method!printMethodChunk: selector withPreamble: doPreamble on: outStream moveSource: moveSource toFile: fileIndex	"Copy the source code for the method associated with selector onto the fileStream.  If moveSource true, then also set the source code pointer of the method."	| preamble method oldPos newPos sourceFile endPos |	doPreamble		ifTrue: [ preamble := self name , ' methodsFor: ' , (self organization categoryOfElement: selector) asString printString ]		ifFalse: [ preamble := '' ].	method := self methodDict		at: selector		ifAbsent: [ 			outStream				nextPutAll: selector;				cr.			outStream				tab;				nextPutAll: '** ERROR!!  THIS SCRIPT IS MISSING ** ' translated;				cr;				cr.			outStream nextPutAll: '  '.			^ outStream ].		oldPos := method filePosition.			sourceFile := SourceFiles at: method fileIndex.			preamble size > 0				ifTrue: [ 					"Copy the preamble"					outStream copyPreamble: preamble from: sourceFile at: oldPos ]				ifFalse: [ sourceFile position: oldPos ].	"Copy the method chunk"			newPos := outStream position.			outStream copyMethodChunkFrom: sourceFile.			sourceFile skipSeparators.	"The following chunk may have ]style["			sourceFile peek == $]				ifTrue: [ 					outStream						cr;						copyMethodChunkFrom: sourceFile ].			moveSource				ifTrue: [ 					"Set the new method source pointer"					endPos := outStream position.					method setSourcePosition: newPos inFile: fileIndex ].	preamble size > 0		ifTrue: [ outStream nextChunkPut: ' ' ].	^ outStream cr! !!Trait method!fileOutChangedMessages: aSet on: aFileStream moveSource: moveSource toFile: fileIndex 	"File a description of the messages of this class that have been 	changed (i.e., are entered into the argument, aSet) onto aFileStream.  If 	moveSource, is true, then set the method source pointer to the new file position.	Note when this method is called with moveSource=true, it is condensing the	.changes file, and should only write a preamble for every method."	| org |	(org := self organization) realCategories do: 		[:cat | | sels | 		sels := (org listAtCategoryNamed: cat) select: [:sel | aSet includes: sel].		sels do:			[:sel |  self printMethodChunk: sel withPreamble: true on: aFileStream							moveSource: moveSource toFile: fileIndex]]! !!Trait method!fileOutChangedMessages: aSet on: aFileStream 	"File a description of the messages of the receiver that have been 	changed (i.e., are entered into the argument, aSet) onto aFileStream."	self fileOutChangedMessages: aSet		on: aFileStream		moveSource: false		toFile: 0! !!Trait method!allMethodsInCategory: aName 	"Answer a list of all the methods of the receiver and all its 	superclasses that are in the category named aName"	self deprecated: 'Use allSelectorsInProtocol: ' on: '28 August 2013' in: #'Pharo3.0'.	^ self allSelectorsInProtocol: aName! !!Trait method!notifyRepackage: selector method: compiledMethod oldProtocol: oldProtocol newProtocol: newProtocol	| oldPackage newPackage |		(newProtocol = oldProtocol)		ifTrue: [ ^ self ].			"This indirection is because we need to abstract RPackage from the kernel"	#RPackage asClassIfPresent: [ :rPackageClass | 			newPackage := rPackageClass organizer 				packageForProtocol: newProtocol 				inClass: self.			oldPackage := rPackageClass organizer 				packageForProtocol: oldProtocol 				inClass: self.						"Announce recategorization"			newPackage = oldPackage				ifFalse: [ 					SystemAnnouncer uniqueInstance 						methodRepackaged: compiledMethod 						from: oldPackage 						to: newPackage ] ].			SystemAnnouncer uniqueInstance		selector: selector		recategorizedFrom: oldProtocol		to: newProtocol		inClass: self! !!Trait method!instVarNamesAndOffsetsDo: aBinaryBlock	"This is part of the interface between the compiler and a class's instance or field names.	 The class should enumerate aBinaryBlock with the instance variable name strings and	 their integer offsets.  The order is important. Names evaluated later will override the	 same names occurring earlier."	| superInstSize |	(superInstSize := self superclass notNil ifTrue: [self superclass instSize] ifFalse: [0]) > 0 ifTrue:		[self superclass instVarNamesAndOffsetsDo: aBinaryBlock].	1 to: self instSize - superInstSize do:		[:i| aBinaryBlock value: (self instanceVariables at: i) value: i + superInstSize]! !!Trait method!criticNameOn: aStream	"This behavior may be folded later by changing the name of this method or using another one."		aStream 		<< self name 		<< ' (' 		<< self category 		<< ')' ! !!Trait method!comment: aStringOrText	"Set the receiver's comment to be the argument, aStringOrText."	self instanceSide classComment: aStringOrText.! !!Trait method!copyMethodDictionaryFrom: donorClass	"Copy the method dictionary of the donor class over to the receiver"	self methodDict: donorClass copyOfMethodDictionary.	self organization: donorClass organization deepCopy.! !!Trait method!fileOutCategory: catName 	| internalStream |	internalStream := (String new: 1000) writeStream.	internalStream header; timeStamp.	self fileOutCategory: catName on: internalStream moveSource: false toFile: 0.	internalStream trailer.	^ FileStream writeSourceCodeFrom: internalStream baseName: (self name , '-' , catName) isSt: true.! !!Trait method!selectorsInProtocol: aName 	"Answer a list of the selectors of the receiver that are in category named aName"		| aColl |	aColl := Set withAll: (self organization listAtCategoryNamed: aName).	^ aColl asArray sort! !!Trait method!addSelectorSilently: selector withMethod: compiledMethod	super addSelectorSilently: selector withMethod: compiledMethod.	self instanceSide noteAddedSelector: selector meta: self isMeta.! !!Trait method!removeSelector: selector 	"Remove the message whose selector is given from the method 	dictionary of the receiver, if it is there. Answer nil otherwise."		| priorMethod priorProtocol origin | 	priorMethod := self compiledMethodAt: selector ifAbsent: [^ nil].	origin := priorMethod origin.	priorProtocol := self whichCategoryIncludesSelector: selector.	super removeSelector: selector.	SystemAnnouncer uniqueInstance 		suspendAllWhile: [self updateOrganizationSelector: selector oldCategory: priorProtocol newCategory: nil].	SystemAnnouncer uniqueInstance 			methodRemoved: priorMethod selector: selector inProtocol: priorProtocol class: self origin: origin.! !!Trait method!classThatDefinesInstanceVariable: instVarName	(self instVarNames notNil and: [self instVarNames includes: instVarName asString]) ifTrue: [^ self]. 	^self superclass ifNotNil: [self superclass classThatDefinesInstanceVariable: instVarName]! !!Trait method!compileSilently: code classified: category	"Compile the code and classify the resulting method in the given category, leaving no trail in the system log, nor in any change set, nor in the 'recent submissions' list. This should only be used when you know for sure that the compilation will succeed."	^ self compileSilently: code classified: category notifying: nil.! !!Trait method!commentStamp: changeStamp prior: indexAndOffset	"Prior source link ignored when filing in."	^ ClassCommentReader new setClass: self				category: #Comment				changeStamp: changeStamp! !!Trait method!comment	"Answer the receiver's comment. (If missing, supply a template) "	| aString |	aString := self instanceSide organization classComment.	aString isEmpty ifFalse: [^ aString].	^self classCommentBlank! !!Trait method!allInstVarNamesEverywhere	"Answer the set of inst var names used by the receiver, all superclasses, and all subclasses"	| aList |	aList := OrderedCollection new.	(self allSuperclasses , self withAllSubclasses asOrderedCollection) do:		[:cls | aList addAll: cls instVarNames].	^ aList asSet	"BorderedMorph allInstVarNamesEverywhere"! !!Trait method!extendingPackages	"the extending packages of a class are the packages that extend it."	^ RPackage organizer extendingPackagesOf: self! !!Trait method!checkForInstVarsOK: instVarString	"Return true if instVarString does no include any names used in a subclass"	| instVarArray |	instVarArray := instVarString subStrings: ' '.	self allSubclasses do:		[:cl | cl instVarNames do:			[:n | (instVarArray includes: n)				ifTrue: [self error: n , ' is already used in ' , cl name.						^ false]]].	^ true! !!Trait method!fileOutOn: aFileStream 	"File a description of the receiver on aFileStream."	self fileOutOn: aFileStream		moveSource: false		toFile: 0! !!Trait method!moveChangesTo: newFile 	"Used in the process of condensing changes, this message requests that 	the source code of all methods of the receiver that have been changed 	should be moved to newFile."	| changes |	changes := self selectors select: [:sel | (self compiledMethodAt: sel) fileIndex > 1 ].	self		fileOutChangedMessages: changes		on: newFile		moveSource: true		toFile: 2! !!Trait method!hasInstVarNamed: aString	"Return true whether the receiver defines an instance variable named aString."		^ self instVarNames includes: aString! !!Trait method!putClassCommentToCondensedChangesFile: aFileStream	"Called when condensing changes.  If the receiver has a class comment, and if that class comment does not reside in the .sources file, then write it to the given filestream, with the resulting RemoteString being reachable from the source file #2.  Note that any existing backpointer into the .sources file is lost by this process -- a situation that maybe should be fixed someday."	| header aStamp aCommentRemoteStr |	self isMeta ifTrue: [^ self].  "bulletproofing only"	((aCommentRemoteStr := self organization commentRemoteStr) isNil or:		[aCommentRemoteStr sourceFileNumber = 1]) ifTrue: [^ self].	aFileStream cr; nextPut: $!!.	header := String streamContents: [:strm | strm nextPutAll: self name;		nextPutAll: ' commentStamp: '.		(aStamp := self organization commentStamp ifNil: ['<historical>']) storeOn: strm.		strm nextPutAll: ' prior: 0'].	aFileStream nextChunkPut: header.	aFileStream cr.	self organization classComment: (RemoteString newString: self organization classComment onFileNumber: 2 toFile: aFileStream) stamp: aStamp! !!Trait method!duringTestCompileSilently: code	^ self 		duringTestCompileSilently: code 		storeSource: true! !!Trait method!classVariablesString	"Answer a string of my class variable names separated by spaces."	^String streamContents: [ :stream | 		self classVarNames 			do: [ :each | stream nextPutAll: each ]			separatedBy: [ stream space ] ]! !!Trait method!newInstanceFrom: oldInstance variable: variable size: instSize map: map	"Create a new instance of the receiver based on the given old instance.	The supplied map contains a mapping of the old instVar names into	the receiver's instVars"	| new |	variable		ifTrue: [new := self basicNew: oldInstance basicSize]		ifFalse: [new := self basicNew].	1 to: instSize do: 		[:offset |  (map at: offset) > 0 ifTrue:			[new instVarAt: offset					put: (oldInstance instVarAt: (map at: offset))]].	variable 		ifTrue: [1 to: oldInstance basicSize do: 					[:offset |					new basicAt: offset put: (oldInstance basicAt: offset)]].	^new! !!Trait method!organization	"Answer the instance of ClassOrganizer that represents the organization 	of the messages of the receiver."	self basicOrganization		ifNil: [ self basicOrganization: (self isTrait						ifTrue: [ ClassOrganization new ]						ifFalse: [ ClassOrganization forClass: self ]) ].	^self basicOrganization setSubject: self.	"Making sure that subject is set correctly. It should not be necessary."		! !!Trait method!classComment: aString stamp: aStamp	"Store the comment, aString or Text or RemoteString, associated with the class we are organizing.  Empty string gets stored only if had a non-empty one before."	| pointer header file oldCommentRemoteString oldComment oldStamp |	oldComment := self organization classComment.	oldStamp := self organization commentStamp.	(aString isKindOf: RemoteString) ifTrue: [		SystemAnnouncer uniqueInstance 			class: self 			oldComment: oldComment 			newComment: aString string 			oldStamp: oldStamp 			newStamp: aStamp.		^ self organization classComment: aString stamp: aStamp].	oldCommentRemoteString := self organization commentRemoteStr.	(aString size = 0) & (oldCommentRemoteString isNil) ifTrue: [^ self organization classComment: nil].		"never had a class comment, no need to write empty string out"	pointer := oldCommentRemoteString 			ifNil: [0] 			ifNotNil: [oldCommentRemoteString sourcePointer].		(file := SourceFiles at: 2) ifNotNil: [		file setToEnd; cr; nextPut: $!!.	"directly"		"Should be saying (file command: 'H3') for HTML, but ignoring it here"		header := String streamContents: [:strm | strm nextPutAll: self name;			nextPutAll: ' commentStamp: '.			aStamp storeOn: strm.			strm nextPutAll: ' prior: '; nextPutAll: pointer printString].		file nextChunkPut: header].		self organization 		classComment: (RemoteString newString: aString onFileNumber: 2) 		stamp: aStamp.		SystemAnnouncer uniqueInstance 		class: self 		oldComment: oldComment 		newComment: aString 		oldStamp: oldStamp 		newStamp: aStamp! !!Trait method!compile: text classified: category withStamp: changeStamp notifying: requestor logSource: logSource 	| method |	method := self compiler		source: text;		requestor: requestor;		category: category;		failBlock:  [ ^nil ];		compile.			logSource ifTrue: [		self 			logMethodSource: (requestor ifNotNil: [ :r | r text ] ifNil: [ text ]) "the requestor text might have been changed by the compiler and may be different thant text argument"			forMethod: method			inCategory: category 			withStamp: changeStamp].			self 		addAndClassifySelector: method selector 		withMethod: method 		inProtocol: category 		notifying: requestor.				self instanceSide 		noteCompilationOf: method selector 		meta: self isClassSide.	^ method selector! !!Trait method!classThatDefinesClassVariable: classVarName	"Answer the class that defines the given class variable"	(self classPool includesKey: classVarName asSymbol) ifTrue: [^ self]. 	^self superclass ifNotNil: [self superclass classThatDefinesClassVariable: classVarName]! !!Trait method!zapOrganization	"Remove the organization of this class by message categories.	This is typically done to save space in small systems.  Classes and methods	created or filed in subsequently will, nonetheless, be organized"	self organization: nil.	self isClassSide ifFalse: [self classSide zapOrganization]! !!Trait method!compileSilently: code classified: category notifying: requestor	"Compile the code and classify the resulting method in the given category, leaving no trail in the system log, nor in any change set, nor in the 'recent submissions' list. This should only be used when you know for sure that the compilation will succeed."	^ SystemAnnouncer uniqueInstance 		suspendAllWhile: [self compile: code classified: category notifying: requestor].! !!Trait method!authors	"Returns a bag representing the author frequency based on the latest version of the methods of the receiver."	^(self methods, self class methods) collect: [ :each | each author ] as: Bag .		! !!Trait method!commentStamp: changeStamp	self organization commentStamp: changeStamp.	^ self commentStamp: changeStamp prior: 0! !!Trait method!criticClass	"Return the class of the receiver for the critic browser. This behavior may be folded later by changing the name of this method or using another one."		^ self! !!Trait method!packageFromOrganizer: anOrganizer	"returns the package that defines this class"	^ anOrganizer packageOf: self.! !!Trait method!instanceVariableNamesDo: anUnaryBlock	"This is part of the interface between the compiler and a class's instance or field names.	 The class should enumerate anUnaryBlock with the instance variable name strings.  The order is important. Names evaluated later will override the	 same names occurring earlier."	| superInstSize |	(superInstSize := self superclass notNil ifTrue: [self superclass instSize] ifFalse: [0]) > 0 ifTrue:		[self superclass instanceVariableNamesDo: anUnaryBlock].	1 to: self instSize - superInstSize do:		[:i| anUnaryBlock value: (self instanceVariables at: i)]! !!Trait method!printSubclassesOn: aStream level: level 	"As part of the algorithm for printing a description of the receiver, print the	subclass on the file stream, aStream, indenting level times."	| subclassNames |	aStream crtab: level.	aStream nextPutAll: self name.	aStream space; print: self instVarNames.	self == Class		ifTrue: 			[aStream crtab: level + 1; nextPutAll: '[ ... all the Metaclasses ... ]'.			^self].	subclassNames := self subclasses asSortedCollection:[:c1 :c2| c1 name <= c2 name].	"Print subclasses in alphabetical order"	subclassNames do:		[:subclass | subclass printSubclassesOn: aStream level: level + 1]! !!Trait method!applyChangesOfNewTraitCompositionReplacing: oldComposition	| changedSelectors oldMethodDict |	oldMethodDict := self methodDict copy.	changedSelectors := super applyChangesOfNewTraitCompositionReplacing: oldComposition.	self noteRecategorizedSelectors: changedSelectors oldComposition: oldComposition.	self noteChangesFrom: oldMethodDict.	^ changedSelectors.! !!Trait method!removeCategory: aString 	"Remove each of the messages categorized under aString in the method 	dictionary of the receiver. Then remove the category aString."	self deprecated: 'Use removeProtocol:' on: '28 August 2013' in: #'Pharo3.0'.	self removeProtocol: aString! !!Trait method!updateOrganizationDescription: each oldCategory: newCategoryOrNil newCategory: oldCategoryOrNil changed: changedCategories	| sel effectiveCategory currentCategory |		sel := each selector.	(self includesLocalSelector: sel) ifTrue: [ ^ self ].		currentCategory := self organization categoryOfElement: sel.	effectiveCategory := each 		effectiveMethodCategoryCurrent: currentCategory 		new: newCategoryOrNil.		effectiveCategory 		ifNil: [ 			currentCategory ifNotNil: [ changedCategories add: currentCategory ].			self organization removeElement: sel.			^ self ].			(currentCategory isNil 		or: [ currentCategory == Protocol ambiguous 		or: [ currentCategory == oldCategoryOrNil ] ])	ifFalse: [ ^ self ].		(currentCategory ~~ effectiveCategory)		ifTrue: [ 			currentCategory ifNotNil: [ changedCategories add: currentCategory ].			self organization classify: sel under: effectiveCategory suppressIfDefault: false ]! !!Trait method!removeProtocol: aString 	"Remove each of the messages categorized under aString in the method 	dictionary of the receiver. Then remove the category aString."	| categoryName |	categoryName := aString asSymbol.	(self organization listAtCategoryNamed: categoryName) do:		[:sel | self removeSelector: sel].	self organization removeCategory: categoryName! !!Trait method!codeRewritingClass: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Rewrite Code')		action: [ target refactor rewriteCode ];		parent: #'Code Rewriting';		order: 0.	(aBuilder item: #'Search Code')		action: [ target refactor searchCode ];		parent: #'Code Rewriting';		order: 100.			(aBuilder item: #'Type class')		action: [ target refactor typeClass ];		parent: #'Code Rewriting';		order: 200;		withSeparatorAfter.			(aBuilder item: #'Category Regex')		action: [ target refactor categoryRegex ];		parent: #'Code Rewriting';		order: 300.			(aBuilder item: #'Class Regex')		action: [ target refactor classRegex ];		parent: #'Code Rewriting';		order: 400.			(aBuilder item: #'Protocol Regex')		action: [ target refactor protocolRegex ];		parent: #'Code Rewriting';		order: 500.			(aBuilder item: #'Source Regex')		action: [ target refactor sourceRegex ];		parent: #'Code Rewriting';		order: 600;		withSeparatorAfter.! !!Trait method!copyAll: selArray from: class 	"Install all the methods found in the method dictionary of the second 	argument, class, as the receiver's methods. Classify the messages under 	-As yet not classified-."	self copyAll: selArray		from: class		classified: nil! !!Trait method!methodsInCategory: aName 	"Answer a list of the methods of the receiver that are in category named aName"	self deprecated: 'Use selectorsInProtocol: instead' on: '28 August 2013' in: #'Pharo3.0'.	^ self selectorsInProtocol: aName! !!Trait method!updateInstancesFrom: oldClass	"Recreate any existing instances of the argument, oldClass, as instances of 	the receiver, which is a newly changed class. Permute variables as 	necessary. Return the array of old instances (none of which should be	pointed to legally by anyone but the array)."	"ar 7/15/1999: The updating below is possibly dangerous. If there are any	contexts having an old instance as receiver it might crash the system if	the new receiver in which the context is executed has a different layout.	See bottom below for a simple example:"	| oldInstances |	oldInstances := oldClass allInstances asArray.	oldInstances := self updateInstances: oldInstances from: oldClass isMeta: self isMeta.	^oldInstances"	| crashingBlock class |	class := Object subclass: #CrashTestDummy		instanceVariableNames: 'instVar'		classVariableNames: ''		poolDictionaries: ''		category: 'Crash-Test'.	class compile:'instVar: value instVar := value'.	class compile:'crashingBlock ^[instVar]'.	crashingBlock := (class new) instVar: 42; crashingBlock.	Object subclass: #CrashTestDummy		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Crash-Test'.	crashingBlock.	crashingBlock value.	"! !!Trait method!instVarIndexFor: instVarName	"Answer the index of the named instance variable."	| index |	index := self instanceVariables == nil 		ifTrue: [0]		ifFalse: [self instanceVariables indexOf: instVarName].	index = 0 ifTrue: 		[^self superclass == nil 			ifTrue: [0]			ifFalse: [self superclass instVarIndexFor: instVarName]].	^self superclass == nil 			ifTrue: [index]		ifFalse: [index + self superclass instSize]! !!Trait method!isClassSide	^self == self classSide! !!Trait method!noteCompilationOf: aSelector meta: isMeta	"A hook allowing some classes to react to recompilation of certain selectors"! !!Trait method!reformatAll	"Reformat all methods in this class"	self methods do: [:method | method reformat]! !!Trait method!allSharedPools	"Answer an ordered collection  of the shared pools the receiver shares, including those defined  in the superclasses of the receiver."		^ OrderedCollection new! !!Trait method!notifyUsersOfRecategorizedSelector: element from: oldCategory to: newCategory	self users do: [:each |		each noteRecategorizedSelector: element from: oldCategory to: newCategory]! !!Trait method!subclassesDo: aBlock	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses."	^self subclasses do: aBlock! !!Trait method!fileOutCategory: aSymbol on: aFileStream moveSource: moveSource toFile: fileIndex 	"File a description of the receiver's category, aString, onto aFileStream. If 	moveSource, is true, then set the method source pointer to the new file position.	Note when this method is called with moveSource=true, it is condensing the	.sources file, and should only write one preamble per method category."	| selectors |	aFileStream cr.	selectors := self selectorsToFileOutCategory: aSymbol.	"Overridden to preserve author stamps in sources file regardless"	selectors do: [:sel |		self printMethodChunk: sel 			withPreamble: true			on: aFileStream 			moveSource: moveSource 			toFile: fileIndex].	^ self! !!Trait method!hasSharedPools	"Only a class may have shared pools"	^ false! !!Trait method!instVarNameForIndex: index	"Answer the named instance variable with index index or nil if none."	| superInstSize |	index > self instSize ifTrue: [^nil].	superInstSize := self superclass ifNil: [0] ifNotNil: [self superclass instSize].	index > superInstSize ifTrue:		[^self instanceVariables at: index - superInstSize].	self superclass ifNil: [^nil].	^self superclass instVarNameForIndex: index	"(Object allSubclasses select:		[:cls| cls instSize > cls superclass instSize and: [cls subclasses isEmpty and: [cls superclass instSize > 0]]]) collect:			[:cls| (1 to: cls instSize) collect: [:i| cls instVarNameForIndex: i]]"! !!Trait method!compile: code classified: heading 	"Compile the argument, code, as source code in the context of the 	receiver and install the result in the receiver's method dictionary under 	the classification indicated by the second argument, heading. nil is to be 	notified if an error occurs. The argument code is either a string or an 	object that converts to a string or a PositionableStream on an object that 	converts to a string."	^self		compile: code		classified: heading		notifying: nil! !!Trait method!copyCategory: cat from: class 	"Specify that one of the categories of messages for the receiver is cat, as 	found in the class, class. Copy each message found in this category."	self copyCategory: cat		from: class		classified: cat! !!Trait method!instanceSide	^ self theNonMetaClass! !!Trait method!renameMethodAllItem: aBuilder	^ (aBuilder item: #'Rename method (all)')			keyText: 'r, m' if: Nautilus useOldStyleKeys not;			keyText: 'r' if: Nautilus useOldStyleKeys;			action: [ | scroll target |				target := aBuilder model.				scroll := target methodWidget vScrollValue.				target refactor renameMethodFor: target selectedMethod originMethod.				target methodWidget vScrollValue: scroll ].! !!Trait method!classesThatImplementAllOf: selectorSet	"Return an array of any classes that implement all the messages in selectorSet."	| found remaining |	found := OrderedCollection new.	selectorSet do:		[:sel | (self includesSelector: sel) ifTrue: [found add: sel]].	found isEmpty		ifTrue: [^ self subclasses inject: Array new						into: [:subsThatDo :sub |							subsThatDo , (sub classesThatImplementAllOf: selectorSet)]]		ifFalse: [remaining := selectorSet copyWithoutAll: found.				remaining isEmpty ifTrue: [^ Array with: self].				^ self subclasses inject: Array new						into: [:subsThatDo :sub |							subsThatDo , (sub classesThatImplementAllOf: remaining)]]! !!Trait method!sourceCodeRefactoring: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Create cascade')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor createCascadeBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 0.				(aBuilder item: #'Extract method')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor extractBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 100.				(aBuilder item: #'Extract method to component')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor extractToComponentBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 200.			(aBuilder item: #'Extract to temporary')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor extractToTemporaryBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 300.				(aBuilder item: #'Inline method')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor inlineMethodBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 400.				(aBuilder item: #'Inline method from component')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor inlineMethodFromComponentBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 500.				(aBuilder item: #'Inline temporary')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor inlineTemporaryBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 600.				(aBuilder item: #'Move variable definition')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor moveVariableDefinitionBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 700.					(aBuilder item: #'Rename temporary')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor renameTemporaryNamed: target sourceTextArea selectedContents Between: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 800.								(aBuilder item: #'Split cascade')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor splitCascadeBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 900.							(aBuilder item: #'Temporary to instvar')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor temporaryToInstanceVariableNamed: target sourceTextArea selectedContents asString Between: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 1000;			withSeparatorAfter.					(aBuilder item: #'Undo')			order: 1100;			label: target refactor undoLabel;			action: [ target refactor undoOperation ];			enabled: target refactor undoEnabled;			parent: #'Source code refactoring'.		(aBuilder item: #'Redo')			order: 1200;			label: target refactor redoLabel;			action: [ target refactor redoOperation ];			enabled: target refactor redoEnabled;			parent: #'Source code refactoring';			withSeparatorAfter.! !!Trait method!duringTestCompileSilently: code storeSource: storeSource	^ self		duringTestCompileSilently: code		storeSource: storeSource		classified: ''! !!Trait method!whichCategoryIncludesSelector: aSelector 	"Answer the category of the argument, aSelector, in the organization of 	the receiver, or answer nil if the receiver does not inlcude this selector."	(self includesSelector: aSelector)		ifTrue: [^ self organization categoryOfElement: aSelector]		ifFalse: [^nil]! !!Trait method!classCommentBlank	| existingComment stream |	existingComment := self theNonMetaClass organization classComment.	existingComment isEmpty		ifFalse: [^existingComment].	stream := (String new: 100) writeStream.	stream		nextPutAll: 'A';		nextPutAll: (self name first isVowel ifTrue: ['n '] ifFalse: [' ']);		nextPutAll: self name;		nextPutAll: ' is xxxxxxxxx.'.			(self instVarNames size > 0)		 ifTrue: [stream cr; cr; nextPutAll: 'Instance Variables'.  ].			self instVarNames asSortedCollection do: [:each |		stream			cr; tab; nextPutAll: each;			nextPut: $:;			tab; tab;			nextPutAll: '<Object>'].	stream cr.	self instVarNames asSortedCollection do: [:each |		stream			cr; nextPutAll: each;			cr; tab; nextPutAll: '- xxxxx'; cr].	^stream contents! !!Trait method!noteMethodChanged: oldMethod to: newMethod	SystemAnnouncer uniqueInstance		methodChangedFrom: oldMethod to: newMethod ! !!Trait method!wantsRecompilationProgressReported	"Answer whether the receiver would like progress of its recompilation reported interactively to the user."	^ true! !!Trait method!copyAll: selArray from: class classified: cat 	"Install all the methods found in the method dictionary of the second 	argument, class, as the receiver's methods. Classify the messages under 	the third argument, cat."	selArray do: [:s |		(class includesLocalSelector: s) ifTrue: [			self copy: s				from: class				classified: cat ] ]! !!Trait method!isDefinedInPackage: aPackage	"returns true if aPackage contains the definitino of this class"		^ aPackage includesClass: self.! !!Trait method!refactoringMethod: aBuilder	(aBuilder item: #'Refactoring')		order: -100.				(self renameMethodAllItem: aBuilder)		order: -90;		withSeparatorAfter! !!Trait method!addSelector: selector withMethod: compiledMethod notifying: requestor	| priorMethodOrNil |	priorMethodOrNil := self compiledMethodAt: selector ifAbsent: [nil].	self addSelectorSilently: selector withMethod: compiledMethod.	priorMethodOrNil 		ifNil: [SystemAnnouncer uniqueInstance methodAdded: compiledMethod selector: selector inClass: self requestor: requestor]		ifNotNil: [SystemAnnouncer uniqueInstance methodChangedFrom: priorMethodOrNil to: compiledMethod selector: selector inClass: self requestor: requestor].! !!Trait method!updateInstances: oldInstances from: oldClass isMeta: isMeta	"Recreate any existing instances of the argument, oldClass, as instances of the receiver, which is a newly changed class. Permute variables as necessary. Return the array of old instances (none of which should be pointed to legally by anyone but the array)."	"If there are any contexts having an old instance as receiver it might crash the system because the layout has changed, and the method only knows about the old layout."	| map variable instSize newInstances |	oldInstances isEmpty ifTrue:[^#()]. "no instances to convert"	isMeta ifTrue: [		oldInstances size = 1 ifFalse:[^self error:'Metaclasses can only have one instance'].		self soleInstance class == self ifTrue:[			^self error:'Metaclasses can only have one instance']].	map := self instVarMappingFrom: oldClass.	variable := self isVariable.	instSize := self instSize.	newInstances := Array new: oldInstances size.	1 to: oldInstances size do:[:i|		newInstances at: i put: (			self newInstanceFrom: (oldInstances at: i) variable: variable size: instSize map: map)].	"Now perform a bulk mutation of old instances into new ones"	oldInstances elementsExchangeIdentityWith: newInstances.	^newInstances "which are now old"! !!Trait method!hasComment	"return whether this class truly has a comment other than the default"	| org |	org := self instanceSide organization.	^org classComment isEmptyOrNil not! !!Trait method!printOn: aStream 	aStream nextPutAll: self name! !!Trait method!selectorsToFileOutCategory: aSymbol	^ self organization listAtCategoryNamed: aSymbol! !!Trait method!noteMethodAdded: aMethod	SystemAnnouncer uniqueInstance		methodAdded: aMethod! !!Trait method!acceptsLoggingOfCompilation	"Answer whether the receiver's method submisions and class defintions should be logged to the changes file and to the current change set.  The metaclass follows the rule of the class itself	Weird name is so that it will come lexically before #compile, so that a clean build can make it through."	^ true! !!Trait method!classComment: aString	"Store the comment, aString or Text or RemoteString, associated with the class we are orgainzing.  Empty string gets stored only if had a non-empty one before."	^ self classComment: aString stamp: '<historical>'! !!Trait method!spaceUsed	^super spaceUsed + (self hasClassSide		ifTrue: [self classSide spaceUsed] 		ifFalse: [0])! !!Trait method!compile: code notifying: requestor 	"Refer to the comment in Behavior|compile:notifying:." 	^self compile: code		 classified: Protocol unclassified		 notifying: requestor! !!Trait method!notifyUsersOfChangedSelectors: aCollection	self users do: [:each |		each noteChangedSelectors: aCollection]! !!Trait method!allMethodCategoriesIntegratedThrough: mostGenericClass	"Answer a list of all the method categories of the receiver and all its superclasses, up through mostGenericClass"	self deprecated: 'Use allProtocolsUpTo:' on: '28 August 2013' in: #'Pharo3.0'.	^ self allProtocolsUpTo: mostGenericClass! !!Trait method!forceNewFrom: anArray    "Create a new instance of the class and fill    its instance variables up with the array."    | object max |    object := self new.    max := self instSize.    anArray doWithIndex: [:each :index |        index > max ifFalse:            [object instVarAt: index put: each]].    ^ object! !!Trait method!allUnreferencedClassVariables	"Answer a list of the names of all the receiver's unreferenced class vars, including those defined in superclasses"	^ self systemNavigation allUnreferencedClassVariablesOf: self! !!Trait method!sharedPoolsString	"Answer a string of my shared pool names separated by spaces."	^String streamContents: [ :stream |		self sharedPools 			do: [ :each |				stream nextPutAll: (self environment 					keyAtIdentityValue: each 					ifAbsent: [ 'private' ]) ]			separatedBy: [ stream space ] ]! !!Trait method!selectorsInCategory: aName 	"Answer a list of the selectors of the receiver that are in category named aName"		| aColl |	aColl := Set withAll: (self organization listAtCategoryNamed: aName).	^ aColl asArray sort! !!Trait method!isTestCase	^false! !!Trait method!compileSilently: code 	"Compile the code and classify the resulting method in the given category, leaving no trail in the system log, nor in any change set, nor in the 'recent submissions' list. This should only be used when you know for sure that the compilation will succeed."	^ self compileSilently: code classified: 'not defined category' notifying: nil.! !!Trait method!packageOrganizer	"Returns the organizer of this class"	^ RPackage organizer ! !!Trait method!fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex	"File a description of the receiver on aFileStream. If the boolean 	argument, moveSource, is true, then set the trailing bytes to the position 	of aFileStream and to fileIndex in order to indicate where to find the 	source code."	aFileStream nextChunkPut: self definition.	self organization		putCommentOnFile: aFileStream		numbered: fileIndex		moveSource: moveSource		forClass: self.	self organization realCategories do: 		[:heading |		self fileOutCategory: heading			on: aFileStream			moveSource: moveSource			toFile: fileIndex]! !!Trait method!instanceVariablesString	"Answer a string of my instance variable names separated by spaces."	^String streamContents: [ :stream |		self instVarNames 			do: [ :each | stream nextPutAll: each ]			separatedBy: [ stream space ] ]! !!Trait method!sourceCodeRefactoringMenu: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Format')		order: 1100;		keyText: 'Ctrl Shift f';		action: [ target refactor formatSourceCode ].			(aBuilder item: #'Source code refactoring')			order: 1101;			arguments: {};			withSeparatorAfter.! !!Trait method!copy: sel from: class classified: cat 	"Install the method associated with the first arugment, sel, a message 	selector, found in the method dictionary of the second argument, class, 	as one of the receiver's methods. Classify the message under the third 	argument, cat."	| code category |	"Useful when modifying an existing class"	code := class sourceCodeAt: sel.	code ifNotNil: 			[cat				ifNil: [category := class organization categoryOfElement: sel]				ifNotNil: [category := cat].			(self includesLocalSelector: sel)				ifTrue: [code asString = (self sourceCodeAt: sel) asString 							ifFalse: [self error: self name 										, ' ' 										, sel 										, ' will be redefined if you proceed.']].			self compile: code classified: category]! !!Trait method!copy: sel from: class 	"Install the method associated with the first argument, sel, a message 	selector, found in the method dictionary of the second argument, class, 	as one of the receiver's methods. Classify the message under -As yet not 	classified-."	self copy: sel		from: class		classified: nil! !!Trait method!packagesWithoutExtensions	^ Set new add: self package; yourself.! !!Trait method!addCategory: newName before: aCategory	^ self organization addCategory: newName before: aCategory ! !!Trait method!copyAllCategoriesFrom: aClass 	"Specify that the categories of messages for the receiver include all of 	those found in the class, aClass. Install each of the messages found in 	these categories into the method dictionary of the receiver, classified 	under the appropriate categories."	aClass organization categories do: [:cat | self copyCategory: cat from: aClass]! !!Trait method!numberOfMethods	"count all methods that are local (not comming from a trait)"	| num |	num := self localMethods size.	^ self isMeta  		ifTrue: [ num ]		ifFalse: [ num + self class numberOfMethods ] ! !!Trait method!variableWordSubclass: className uses: aTraitCompositionOrArray instanceVariableNames: instVarNames	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	^ self variableWordSubclass: className		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: cat! !!Trait method!superclass: sup methodDict: md format: ft name: nm organization: org instVarNames: nilOrArray classPool: pool sharedPools: poolSet 	"Answer an instance of me, a new class, using the arguments of the 	message as the needed information.	Must only be sent to a new instance; else we would need Object flushCache."	self superclass: sup.	self methodDict: md.	self setFormat: ft.	self setName: nm.	self instanceVariables: nilOrArray.	self classPool: pool.	self sharedPools: poolSet.	self organization: org.! !!Trait method!usesLocalPoolVarNamed: aString	"Return whether the receiver uses a pool variable named: aString which is defined locally"		self hasSharedPools		ifTrue: [ self sharedPools do: [:each | (each usesClassVarNamed: aString) 												ifTrue: [ ^true ]]]		ifFalse: [ ^false ].	^false! !!Trait method!hasSharedPools	"Returns whether the receiver uses shared pools directly (Does not take into account that it may inherit shared pool uses."	^ self sharedPools notEmpty! !!Trait method!variableSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have indexable pointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				variableSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!declare: varString 	"Declare class variables common to all instances. Answer whether 	recompilation is advisable."	| newVars conflicts |	newVars :=  (varString subStrings: ' ') collect: [:x | x asSymbol].	conflicts := false.		(self classPool keys reject: [:x | newVars includes: x]) do: [:var | self removeClassVarNamed: var].		(newVars reject: [:var | self classPool includesKey: var]) do: [:var | "adding"			"check if new vars defined elsewhere"			(self innerBindingOf: var) 				ifNotNil: [(DuplicatedVariableError new) variable: var;						signal: var , ' is defined elsewhere'.					conflicts := true]].	newVars notEmpty		ifTrue: 			[self classPool: self classPool.			"in case it was nil"			newVars do: [:var | self classPool declare: var from: Undeclared]].	^conflicts! !!Trait method!subclass: aName uses: aTraitComposition with: aBlock 	"Define (or redefine) a subclass by evaluating a block closure. 	Note (MartinDias): 		This is a workaround for the subclass creation API when a trait is specified. 		To fix it well, in Pharo 4, a bit deeper refactoring is required, delegating this responsibility		to SlotClassBuilder."	^ self environment 		at: aName		ifPresent: [ :old | 			| copyOfOld newClass |			copyOfOld := old copy.			"Modify the class and set the new trait composition"			newClass := aBlock value. 			newClass setTraitComposition: aTraitComposition asTraitComposition.			"Announce that the definition changed when there is a new trait composution. 			Note: It may be a re-announce if there was other change in the class definition, 			e.g. an instace variable added."			(newClass traitComposition syntacticallyEquals: copyOfOld traitComposition) ifFalse: [ 				SystemAnnouncer uniqueInstance 					classDefinitionChangedFrom: copyOfOld 					to: newClass ].			newClass ]		ifAbsent: [			"Create the class and set the trait composition"			aBlock value				setTraitComposition: aTraitComposition asTraitComposition;				yourself ].! !!Trait method!applyChangesOfNewTraitCompositionReplacing: oldComposition	| changedSelectors |	changedSelectors := super applyChangesOfNewTraitCompositionReplacing: oldComposition.	self classSide noteNewBaseTraitCompositionApplied: self traitComposition.	^ changedSelectors! !!Trait method!criticTheNonMetaclassClass	"Return the class of the receiver for the critic browser. This behavior may be folded later by changing the name of this method or using another one."		^ self ! !!Trait method!variableByteSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver) in which the subclass is to 	have indexable byte-sized nonpointer variables."	^self classBuilder		superclass: self		variableByteSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!hasClassSide	^self classSide notNil.! !!Trait method!removeFromChanges	"References to the receiver, a class, and its metaclass should no longer be included in the system ChangeSet."	ChangeSet current removeClassAndMetaClassChanges: self! !!Trait method!isValidTraitName: aSymbol	^(aSymbol isEmptyOrNil		or: [aSymbol first isLetter not		or: [aSymbol anySatisfy: [:character | character isAlphaNumeric not]]]) not! !!Trait method!removeFromSystem	"Forget the receiver from the Smalltalk global dictionary. Any existing 	instances will refer to an obsolete version of the receiver."	self removeFromSystem: true.! !!Trait method!removeSubclass: aSubclass 	"If the argument, aSubclass, is one of the receiver's subclasses, remove it."	self subclasses == nil ifFalse:		[self subclasses:  (self subclasses copyWithout: aSubclass).		self subclasses isEmpty ifTrue: [self subclasses: nil]].! !!Trait method!binding       "Answer a binding for the receiver, sharing if possible"      | binding |	binding := self environment associationAt: self name ifAbsent: [nil -> self].       ^binding value == self ifTrue: [binding] ifFalse: [nil -> self]! !!Trait method!weakSubclass: className uses: aTraitCompositionOrArray instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "		^ self weakSubclass: className		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames 		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!fileOut	"Create a file whose name is the name of the receiver with '.st' as the 	extension, and file a description of the receiver onto it."		| internalStream |	internalStream := (String new: 100) writeStream.	internalStream header; timeStamp.	self hasSharedPools ifTrue: [		self shouldFileOutPools			ifTrue: [self fileOutSharedPoolsOn: internalStream]].	self fileOutOn: internalStream moveSource: false toFile: 0.	internalStream trailer.	FileStream writeSourceCodeFrom: internalStream baseName: self name isSt: true! !!Trait method!usesPoolVarNamed: aString	"Return whether the receiver has a pool variable named: aString, taking into account superclasses too"		self allSharedPools do: [:each | (each usesClassVarNamed: aString) ifTrue: [^true]].	^false! !!Trait method!subclass: t uses: aTraitComposition 	| cls |	cls := self				subclass: t				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'Unclassified'.	cls setTraitComposition: aTraitComposition asTraitComposition.	^ cls! !!Trait method!hasMethods	"Answer a Boolean according to whether any methods are defined for the 	receiver (includes whether there are methods defined in the receiver's 	metaclass)."	^super hasMethods or: [self class hasMethods]! !!Trait method!subclass: aSubclassSymbol instanceVariableNames: instVarNames classVariableNames: classVarNames category: aCategorySymbol	"Added to allow for a simplified subclass creation experience. "	^ self		subclass: aSubclassSymbol		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: aCategorySymbol! !!Trait method!weakSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a subclass of an existing class (the receiver) in which the subclass is to have weak indexable pointer variables."	^self classBuilder		superclass: self		weakSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!superclass: aClass methodDictionary: mDict format: fmt	"Basic initialization of the receiver"	super superclass: aClass methodDictionary: mDict format: fmt.	self subclasses: nil. ! !!Trait method!subclassesDo: aBlock 	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses."	self subclasses size == 0 		ifFalse:[self subclasses do: aBlock]! !!Trait method!newSubclass	| i className |	i := 1.	[className := (self name , i printString) asSymbol.	 self environment includesKey: className]		whileTrue: [i := i + 1].	^ self subclass: className		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Unclassified'"Point newSubclass new"! !!Trait method!fileOutInitializerOn: aStream	^self class fileOutInitializerOn: aStream! !!Trait method!setName: aSymbol andRegisterInCategory: categorySymbol environment: aSystemDictionary	(self isValidTraitName: aSymbol) ifFalse: [TraitException signal: 'Invalid trait name'].		(self environment == aSystemDictionary		and: [self name = aSymbol			and: [self category = categorySymbol]]) ifTrue: [^self].			((aSystemDictionary includes: aSymbol) and: [(aSystemDictionary at: aSymbol) ~~ self])		ifTrue: [TraitException signal: 'The name ''' , aSymbol , ''' is already used'].	(self environment notNil and: [self name notNil and: [self name ~= aSymbol]]) ifTrue: [		self environment renameClass: self as: aSymbol].		self name: aSymbol.	self environment: aSystemDictionary.		self environment at: self name put: self.	self environment organization classify: self name under: categorySymbol.	^ true! !!Trait method!isAnonymous	^self getName isNil! !!Trait method!addSharedPool: aSharedPool 	"Add the argument, aSharedPool, as one of the receiver's shared pools. 	Create an error if the shared pool is already one of the pools.	This method will work with shared pools that are plain Dictionaries or thenewer SharedPool subclasses"	(self sharedPools includes: aSharedPool)		ifTrue: [^self error: 'This is already in my shared pool list'].	self sharedPools == nil		ifTrue: [self sharedPools: (OrderedCollection with: aSharedPool)]		ifFalse: [self sharedPools add: aSharedPool]! !!Trait method!unload	"Sent when a the class is removed.  Does nothing, but may be overridden by (class-side) subclasses."! !!Trait method!asRingDefinitionWithMethods: methodsBoolean withSuperclasses: supersBoolean withSubclasses: subsBoolean withPackages: packsBoolean	"Retrieves a ring class/trait based on the receiver.	The data loaded in the class/trait (active methods, superclasses, subclasses and packages) is requested by the users.	As it may need to traverse hierarchies for retrieving super and subclasses a ring slice is created as the container for every class, method and package.	To retrieve the slice:  aRGClass environment "	| rgClass rgSlice  rgPackageKeys |		rgSlice := RGSlice named: #fromImage.	packsBoolean ifTrue: [ 		rgPackageKeys := rgSlice loadPackagesFromImage ].	rgClass := self asRingDefinitionWithMethods: methodsBoolean withSuperclasses: supersBoolean withSubclasses: subsBoolean withPackageKeys: rgPackageKeys in: rgSlice.	rgSlice cleanEmptyPackages.	rgSlice loadTraitUsers.			^ rgClass! !!Trait method!subclass: t	^ self subclass: t instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Unclassified' ! !!Trait method!hasClassVarNamed: aString	"Return whether the receiver has a class variables (shared variables among its class and subclasses) named: aString"		^ self classVarNames includes: aString! !!Trait method!addClassVarNamed: aString 	"Add the argument, aString, as a class variable of the receiver.	Signal an error if the first character of aString is not capitalized,	or if it is already a variable named in the class."	| symbol oldState |	oldState := self copy.	aString first canBeGlobalVarInitial		ifFalse: [^self error: aString, ' class variable name should be capitalized; proceed to include anyway.'].	symbol := aString asSymbol.	self withAllSubclasses do: 		[:subclass | 		(subclass bindingOf: symbol) ifNotNil:[			^ self error: aString 				, ' is already used as a variable name in class ' 				, subclass name]].	(self classPool includesKey: symbol) ifFalse: 		["Pick up any refs in Undeclared"		self classPool declare: symbol from: Undeclared.		SystemAnnouncer uniqueInstance classDefinitionChangedFrom: oldState to: self]! !!Trait method!duplicateClassWithNewName: aSymbol	| copysName class newDefinition |	copysName := aSymbol asSymbol.	copysName = self name		ifTrue: [ ^ self ].	(Smalltalk globals includesKey: copysName)		ifTrue: [ ^ self error: copysName , ' already exists' ].	newDefinition := self definition copyReplaceAll: '#' , self name asString with: '#' , copysName asString.	class := self class compiler source: newDefinition; logged: true; evaluate.	class classSide instanceVariableNames: self classSide instanceVariablesString.	class copyAllCategoriesFrom: self.	class class copyAllCategoriesFrom: self class.	^ class! !!Trait method!weakSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have weak indexable pointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				weakSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!variableSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver) in which the subclass is to 	have indexable pointer variables."	^self classBuilder		superclass: self		variableSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!subclass: aTraitName uses: aTraitCompositionOrArray instanceVariableNames: instVarNames classVariableNames: classVarNames category: cat 	^ self		subclass: aTraitName		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: cat ! !!Trait method!rename: aString 	"The new name of the receiver is the argument, aString."	| oldName newName |	(newName := aString asSymbol) = (oldName := self name)		ifTrue: [^ self].	(self environment includesKey: newName)		ifTrue: [^ self error: newName , ' already exists'].	self setName: newName.	self environment renameClass: self from: oldName.	(Undeclared includesKey: newName)		ifTrue: [self inform: 'There are references to, ' , aString printString , 'from Undeclared. Check them after this change.'].! !!Trait method!classPoolFrom: aClass	"share the classPool with aClass."		self classPool: aClass classPool.! !!Trait method!isObsolete	"Return true if the receiver is obsolete."	^(self environment at: self name ifAbsent: [nil]) ~~ self! !!Trait method!variableByteSubclass: className uses: aTraitCompositionOrArray instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat		"Added to allow for a simplified subclass creation experience. "		^ self variableByteSubclass: className		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!fileOutPool: aPool onFileStream: aFileStream 	| aPoolName |	(aPool  isKindOf: SharedPool class) ifTrue:[^self notify: 'we do not fileout SharedPool type shared pools for now'].	aPoolName := self environment keyAtIdentityValue: aPool.	self crTrace: aPoolName.	aFileStream nextPutAll: 'Transcript show: ''' , aPoolName , '''; cr!!'; cr.	aFileStream nextPutAll: 'Smalltalk at: #' , aPoolName , ' put: Dictionary new!!'; cr.	aPool keys asSortedCollection do: [ :aKey | | aValue |		aValue := aPool at: aKey.		aFileStream nextPutAll: aPoolName , ' at: #''' , aKey asString , '''', ' put:  '.		(aValue isKindOf: Number)			ifTrue: [aValue printOn: aFileStream]			ifFalse: [aFileStream nextPutAll: '('.					aValue printOn: aFileStream.					aFileStream nextPutAll: ')'].		aFileStream nextPutAll: '!!'; cr].	aFileStream cr! !!Trait method!classVarNamed: aString	"Answer the content of the Class Variable"	^self classPool at: aString asSymbol ifAbsent: [self error: 'no such lass var']! !!Trait method!variableSubclass: aClassName uses: aTraitCompositionOrArray instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "		^ self variableSubclass: aClassName 		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames  		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!fileOutSharedPoolsOn: aFileStream	"file out the shared pools of this class after prompting the user about each pool"	| poolsToFileOut |	poolsToFileOut := self sharedPools select: 		[:aPool | (self shouldFileOutPool: (self environment keyAtIdentityValue: aPool))].	poolsToFileOut do: [:aPool | self fileOutPool: aPool onFileStream: aFileStream].	! !!Trait method!classVarNames	"Answer a collection of the names of the class variables defined in the receiver."	^self classPool keys asArray sort! !!Trait method!asFullRingDefinition	"A behavior is converted to a ring class including its variables, methods, direct superclass, direct subclasses and the package in which is loaded.	Active methods are generated and each knows its package as well.	Note that for its direct superclass and subclasses no full definitions are requested. If you need to traverse hierarchies use #asRingDefinitionWithMethods:withSuperclasses:withSubclasses:withPackages:"		| rgClass rgSuper rgSub rgMethod packageKeys |	rgClass:= self asRingDefinition.	rgClass package: (RGContainer packageOfClass: rgClass).		self superclass notNil 		ifTrue: [ 			rgSuper := self superclass asRingDefinition.			rgClass superclass: rgSuper ]		ifFalse: [  			self isTrait ifTrue: [ 				rgSuper := Trait asRingDefinition.				rgClass superclass: rgSuper. ]			].	self subclasses do:[ :each |		rgSub := each asRingDefinition.		rgSub superclass: rgClass ].		packageKeys := RGContainer packageKeys.	self methodsDo:[ :mth|  			rgMethod := mth asActiveRingDefinition.			rgClass addMethod: rgMethod.			rgMethod package: (RGContainer packageOfMethod: rgMethod using: packageKeys) ].	self theMetaClass methodsDo:[ :mth|  			rgMethod := mth asActiveRingDefinition.			rgClass theMetaClass addMethod: rgMethod.			rgMethod package: (RGContainer packageOfMethod: rgMethod using: packageKeys) ].		^ rgClass! !!Trait method!removeClassVarNamed: aString	"Remove the class variable whose name is the argument, aString, from     the names defined in the receiver, a class. Create an error notification if     aString is not a class variable or if it is still being used in the code of     the class."	| aSymbol |	aSymbol := aString asSymbol.	(self classPool includesKey: aSymbol)		ifFalse: [ ^ self error: aString , ' is not a class variable' ].	self withAllSubclasses		do: [ :subclass | 			(Array with: subclass with: subclass class)				do: [ :classOrMeta | 					(classOrMeta whichSelectorsReferTo: (self classPool associationAt: aSymbol)) isEmpty						ifFalse: [ 							InMidstOfFileinNotification signal								ifTrue: [ 									self crTrace: self name , ' (' , aString , ' is Undeclared) '.									^ Undeclared declare: aSymbol from: self classPool ]								ifFalse: [ 									(self										confirm:											(aString , ' is still used in code of class ' , classOrMeta name , '.\Is it okay to move it to Undeclared?') withCRs)										ifTrue: [ ^ Undeclared declare: aSymbol from: self classPool ]										ifFalse: [ ^ self ] ] ] ] ].	self classPool removeKey: aSymbol.	self classPool isEmpty		ifTrue: [ self classPool: nil ]! !!Trait method!externalName	"Answer a name by which the receiver can be known."	^ self name! !!Trait method!subclass: t instanceVariableNames: ins	^ self subclass: t instanceVariableNames: ins classVariableNames: '' poolDictionaries: '' category: 'Unclassified' ! !!Trait method!category	"Answer the system organization category for the receiver. First check whether the	category name stored in the ivar is still correct and only if this fails look it up	(latter is much more expensive)"	| result |	self basicCategory ifNotNil: [ :symbol |		((self environment organization listAtCategoryNamed: symbol) includes: self name)			ifTrue: [ ^symbol ] ].	self basicCategory: (result := self environment organization categoryOfElement: self name).	^result! !!Trait method!possibleVariablesFor: misspelled continuedFrom: oldResults	| results |	results := misspelled correctAgainstDictionary: self classPool continuedFrom: oldResults.	self sharedPools do: [:pool | 		results := misspelled correctAgainstDictionary: pool continuedFrom: results ].	self superclass == nil		ifTrue: 			[ ^ misspelled correctAgainstDictionary: self environment continuedFrom: results ]		ifFalse:			[ ^ self superclass possibleVariablesFor: misspelled continuedFrom: results ]! !!Trait method!innerBindingOf: aSymbol	"Answer the binding of some variable resolved in the scope of the receiver, or one of its superclass	but do not look up binding in receiver's environment.	Use #bindingOf: for looking up the variable binding in a full scope, including receiver's environment"	"First look in classVar dictionary."	(self classPool bindingOf: aSymbol) ifNotNil: [:binding | ^binding].	"Next look in shared pools."	self sharedPools do: [:pool | (pool bindingOf: aSymbol) ifNotNil: [:binding | ^binding]].	self superclass ifNotNil: [:supercl | ^ supercl innerBindingOf: aSymbol].		^ nil! !!Trait method!bindingOf: varName	"Answer the binding of some variable resolved in the scope of the receiver, or nil	if variable with such name is not defined"	"The lookup recurses up to superclasses looking inside their class and shared pools,	but not the environment, since two classes, even if they have ancestry relationship,	could use different environments.	That's why we doing an environment lookup only as a last step of symbol lookup 	and taking only the environment of receiver only, not any of it's superclass(es) "		| aSymbol |	aSymbol := varName asSymbol.	^ (self innerBindingOf: aSymbol) ifNil: [		 self environment bindingOf: aSymbol	]! !!Trait method!compileAll	super compileAll.	self class compileAll.! !!Trait method!shouldFileOutPools	"respond with true if the user wants to file out the shared pools"	^self confirm: 'FileOut selected sharedPools?'! !!Trait method!variableWordSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver) in which the subclass is to 	have indexable word-sized nonpointer variables."	^self classBuilder		superclass: self		variableWordSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!classBuilder		"Answer the object responsible of creating subclasses of myself in the system."			^ Smalltalk classBuilder! !!Trait method!name: aString traitComposition: aComposition methodDict: aMethodDict localSelectors: aSet organization: aClassOrganization	"Used by copy"		self name: aString.	self localSelectors: aSet.	self methodDict: aMethodDict.	self traitComposition: aComposition.	self organization: aClassOrganization! !!Trait method!variableWordSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have indexable word-sized nonpointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				variableWordSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!compileAllFrom: oldClass	"Recompile all the methods in the receiver's method dictionary (not the	subclasses). Also recompile the methods in the metaclass."	super compileAllFrom: oldClass.	self class compileAllFrom: oldClass class! !!Trait method!renameSilently: aName	 [ self rename: aName] fuelValueWithoutNotifications! !!Trait method!reformatAll 	"Reformat all methods in this class.	Leaves old code accessible to version browsing"	super reformatAll.		"me..."	self class reformatAll	"...and my metaclass"! !!Trait method!removeFromSystem: logged	"Forget the receiver from the Smalltalk global dictionary. Any existing 	instances will refer to an obsolete version of the receiver."		"keep the class name and category for triggering the system change message. If we wait to long, then we get obsolete information which is not what we want."	"tell class to deactivate and unload itself-- two separate events in the module system"	self unload.	self users do: [ :user | user removeFromComposition: self ].	self superclass ifNotNil:		["If we have no superclass there's nothing to be remembered"		self superclass addObsoleteSubclass: self].	self environment forgetClass: self logged: logged.	self obsolete.! !!Trait method!shouldFileOutPool: aPoolName	"respond with true if the user wants to file out aPoolName"	^self confirm: ('FileOut the sharedPool ', aPoolName, '?')! !!Trait method!allSharedPools	"Answer an ordered collection of the pools the receiver shares, including those defined  in the superclasses of the receiver."	| aSet | 	^self superclass == nil		ifTrue: [self sharedPools copy]		ifFalse: [aSet := self superclass allSharedPools.			aSet addAll: self sharedPools.			aSet]! !!Trait method!sharing: poolString 	"Set up sharedPools. Answer whether recompilation is advisable."	| oldPools |	oldPools := self sharedPools.	self sharedPools: OrderedCollection new.	(poolString subStrings: ' ') do: 		[:poolName | 		self sharedPools add: (self environment at: poolName asSymbol ifAbsent:[			(self confirm: 'The pool dictionary ', poolName,' does not exist.',						'\Do you want it automatically created?' withCRs)				ifTrue:[self environment at: poolName asSymbol put: Dictionary new]				ifFalse:[^self error: poolName,' does not exist']])].	self sharedPools isEmpty ifTrue: [self sharedPools: nil].	oldPools do: [:pool |				| found |				found := self sharedPools anySatisfy: [:p | p == pool].				found ifFalse: [^ true "A pool got deleted"]].	^ false! !!Trait method!removeInstVarNamed: aString 	"Remove the argument, aString, as one of the receiver's instance variables."	| newInstVarString |	(self instVarNames includes: aString)		ifFalse: [self error: aString , ' is not one of my instance variables'].	newInstVarString := ''.	(self instVarNames copyWithout: aString) do: 		[:varName | newInstVarString := newInstVarString , ' ' , varName].	^self classBuilder		name: self name		inEnvironment: self environment		subclassOf: self superclass		type: self typeOfClass		instanceVariableNames: newInstVarString		classVariableNames: self classVariablesString		poolDictionaries: self sharedPoolsString		category: self category! !!Trait method!removeFromSystemUnlogged	"Forget the receiver from the Smalltalk global dictionary. Any existing instances will refer to an obsolete version of the receiver.  Do not log the removal either to the current change set nor to the system changes log"	^self removeFromSystem: false! !!Trait method!sharedPoolOfVarNamed: aString	"Returns the SharedPool or nil from which the pool variable named aString is coming from."		 ^ self sharedPools 			detect: [:each | each usesClassVarNamed: aString ]			ifNone: [						self superclass == nil							ifTrue: [nil]							ifFalse: [self superclass sharedPoolOfVarNamed: aString]						]! !!Trait method!ensureClassPool	^self classPool.! !!Trait method!category: aString 	"Categorize the receiver under the system category, aString, removing it from 	any previous categorization."	| oldCategory |	oldCategory := self basicCategory.	aString isString		ifTrue: [			self basicCategory: aString asSymbol.			self environment organization classify: self name under: self basicCategory ]		ifFalse: [self errorCategoryName].	SystemAnnouncer uniqueInstance		class: self recategorizedFrom: oldCategory to: self basicCategory! !!Trait method!asHelpTopic	^SystemReference forClass: self! !!Trait method!variableByteSubclass: className instanceVariableNames: instvarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	^self variableByteSubclass: className		instanceVariableNames: instvarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: cat! !!Trait method!removeSharedPool: aDictionary 	"Remove the pool dictionary, aDictionary, as one of the receiver's pool 	dictionaries. Create an error notification if the dictionary is not one of 	the pools.	: Note that it removes the wrong one if there are two empty Dictionaries in the list."	| satisfiedSet workingSet aSubclass |	(self sharedPools includes: aDictionary)		ifFalse: [^self error: 'the dictionary is not in my pool'].	"first see if it is declared in a superclass in which case we can remove it."	(self selectSuperclasses: [:class | class sharedPools includes: aDictionary]) isEmpty		ifFalse: [self sharedPools remove: aDictionary.				self sharedPools isEmpty ifTrue: [self sharedPools: nil].				^self]. 	"second get all the subclasses that reference aDictionary through me rather than a 	superclass that is one of my subclasses."	workingSet := self subclasses asOrderedCollection.	satisfiedSet := Set new.	[workingSet isEmpty] whileFalse:		[aSubclass := workingSet removeFirst.		(aSubclass sharedPools includes: aDictionary)			ifFalse: 				[satisfiedSet add: aSubclass.				workingSet addAll: aSubclass subclasses]].	"for each of these, see if they refer to any of the variables in aDictionary because 	if they do, we can not remove the dictionary."	satisfiedSet add: self.	satisfiedSet do: 		[:sub | 		aDictionary associationsDo: 			[:aGlobal | 			(sub whichSelectorsReferTo: aGlobal) isEmpty 				ifFalse: [^self error: aGlobal key 								, ' is still used in code of class '								, sub name]]].	self sharedPools remove: aDictionary.	self sharedPools isEmpty ifTrue: [self sharedPools: nil]! !!Trait method!isClassOrTrait	^true! !!Trait method!allClassVarNames	"Answer a Set of the names of the receiver's class variables, including those	defined in the superclasses of the receiver."	| aSet |	self superclass == nil		ifTrue: 			[^self classVarNames asSet]  "This is the keys so it is a new Set."		ifFalse: 			[aSet := self superclass allClassVarNames.			aSet addAll: self classVarNames.			^aSet]! !!Trait method!subclass: aName uses: aTraitCompositionOrArray instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	^ self		subclass: aName		uses: aTraitCompositionOrArray		with: [ 			self				subclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!classVarNamed: aString put: anObject	"Store anObject in the class variable."		| symbol |	symbol := aString asSymbol.	(self classPool includesKey: symbol) ifFalse:  [^self error: 'no such lass var'].	self classPool at: symbol put: anObject.! !!Trait method!weakSubclass: className instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "		^ self weakSubclass: className 		instanceVariableNames: instVarNames 		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!variableWordSubclass: className instanceVariableNames: instVarNames	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	 	^ self variableWordSubclass: className		instanceVariableNames: instVarNames  		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!usesClassVarNamed: aString	"Return whether the receiver or its superclasses have a class variable named: aString"		^ self allClassVarNames includes: aString! !!Trait method!obsolete	"Change the receiver and all of its subclasses to an obsolete class."	self == Object 		ifTrue: [^self error: 'Object is NOT obsolete'].	self setName: 'AnObsolete' , self name.	Object class instSize + 1 to: self classSide instSize do:		[:i | self instVarAt: i put: nil]. "Store nil over class instVars."	self classPool: nil.	self sharedPools: nil.	self hasClassSide ifTrue: [ self theMetaClass obsolete].	super obsolete.! !!Trait method!isSelfEvaluating	^self isObsolete not! !!Trait method!variableSubclass: className instanceVariableNames: instVarNames classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	^ self variableSubclass: className		instanceVariableNames: instVarNames 		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!hasAbstractMethods	"Tells whether the receiver locally defines an abstract method, i.e., a method sending subclassResponsibility"	^ super hasAbstractMethods or: [self class hasAbstractMethods]! !!Trait method!fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex 	"File a description of the receiver on aFileStream. If the boolean argument,	moveSource, is true, then set the trailing bytes to the position of aFileStream and	to fileIndex in order to indicate where to find the source code."	^self fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex initializing: true! !!Trait method!variableByteSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have indexable byte-sized nonpointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				variableByteSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!superclassOrder: classes	"Arrange the classes in the collection, classes, in superclass order so the 	classes can be properly filed in. Do it in sets instead of ordered collections."	| all unprocessedClasses cache |	unprocessedClasses := classes asSet. 	cache := Dictionary new.	all := OrderedCollection new: unprocessedClasses size.	unprocessedClasses size timesRepeat: [ |nextClass|		nextClass := unprocessedClasses detect: [:aClass | self hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache].		all add: nextClass.		unprocessedClasses remove: nextClass].	^all! !!Trait method!template: aSystemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class."	^ self templateForSubclassOf: Object name category: aSystemCategoryName ! !!Trait method!templateForSubclassOf: priorClassName category: systemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class, given that the class previously looked at was as given"	^priorClassName asString, ' subclass: #NameOfSubclass	instanceVariableNames: ''''	classVariableNames: ''''	poolDictionaries: ''''	category: ''' , systemCategoryName asString , ''''! !!Trait method!allSuperclassesFor: aClass cache: cache 		^ cache at: aClass ifAbsentPut: [aClass allSuperclasses asArray]! !!Trait method!hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache 	^ (self hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache) and: [		aClass isMeta not or: [			self hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache]] ! !!Trait method!hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache 	^ (unprocessedClasses includesAnyOf: (self allSuperclassesFor: aClass cache: cache)) not	! !!Trait method!fileOutPool: aString	"file out the global pool named aString"		| internalStream |	internalStream := (String new: 1000) writeStream.	self new fileOutPool: (self environment at: aString asSymbol) onFileStream: internalStream.	FileStream writeSourceCodeFrom: internalStream baseName: aString isSt: true.! !!Trait method!rootsOfTheWorld	"return all classes that have a nil superclass"		^(Smalltalk globals select: [:each | each isBehavior and: [each superclass isNil]]) asOrderedCollection! !!Trait method!doesNotIncludeInstanceOrSuperclassesFor: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!superclassOrder: classes	"Arrange the classes in the collection, classes, in superclass order so the 	classes can be properly filed in. Do it in sets instead of ordered collections."	| all unprocessedClasses cache |	unprocessedClasses := classes asSet. 	cache := Dictionary new.	all := OrderedCollection new: unprocessedClasses size.	unprocessedClasses size timesRepeat: [ |nextClass|		nextClass := unprocessedClasses detect: [:aClass | self hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache].		all add: nextClass.		unprocessedClasses remove: nextClass].	^all! !!Trait method!template: aSystemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class."	^ self templateForSubclassOf: Object name category: aSystemCategoryName ! !!Trait method!templateForSubclassOf: priorClassName category: systemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class, given that the class previously looked at was as given"	^priorClassName asString, ' subclass: #NameOfSubclass	instanceVariableNames: ''''	classVariableNames: ''''	poolDictionaries: ''''	category: ''' , systemCategoryName asString , ''''! !!Trait method!allSuperclassesFor: aClass cache: cache 		^ cache at: aClass ifAbsentPut: [aClass allSuperclasses asArray]! !!Trait method!hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache 	^ (self hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache) and: [		aClass isMeta not or: [			self hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache]] ! !!Trait method!hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache 	^ (unprocessedClasses includesAnyOf: (self allSuperclassesFor: aClass cache: cache)) not	! !!Trait method!fileOutPool: aString	"file out the global pool named aString"		| internalStream |	internalStream := (String new: 1000) writeStream.	self new fileOutPool: (self environment at: aString asSymbol) onFileStream: internalStream.	FileStream writeSourceCodeFrom: internalStream baseName: aString isSt: true.! !!Trait method!rootsOfTheWorld	"return all classes that have a nil superclass"		^(Smalltalk globals select: [:each | each isBehavior and: [each superclass isNil]]) asOrderedCollection! !!Trait method!doesNotIncludeInstanceOrSuperclassesFor: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!canZapMethodDictionary	"Return true if it is safe to zap the method dictionary on #obsolete"	self soleInstance == nil		ifTrue:[^true]		ifFalse:[^self soleInstance canZapMethodDictionary]! !!Trait method!wantsChangeSetLogging	"Answer whether code submitted for the receiver should be remembered by the changeSet mechanism.The metaclass follows the rule of the class itself."	^ self theNonMetaClass wantsChangeSetLogging! !!Trait method!fileOutInitializerOn: aStream	(self includesSelector: #initialize) ifTrue: 		[aStream cr.		aStream nextChunkPut: self soleInstance name , ' initialize'].! !!Trait method!addObsoleteSubclass: aClass	"Do nothing."! !!Trait method!asFullRingDefinition	^ self theNonMetaClass asFullRingDefinition theMetaClass! !!Trait method!isSelfEvaluating	^self isObsolete not! !!Trait method!uses: aTraitCompositionOrArray	| copyOfOldTrait newComposition |	copyOfOldTrait := self copy.	newComposition := aTraitCompositionOrArray asTraitComposition.	self assertConsistantCompositionsForNew: newComposition.	self setTraitComposition: newComposition.	SystemAnnouncer uniqueInstance		traitDefinitionChangedFrom: copyOfOldTrait to: self.! !!Trait method!isMeta	^ true! !!Trait method!removeSubclass: aClass	"Do nothing."! !!Trait method!possibleVariablesFor: misspelled continuedFrom: oldResults	^ self theNonMetaClass possibleVariablesFor: misspelled continuedFrom: oldResults! !!Trait method!subclasses	"Answer the receiver's subclasses."	self theNonMetaClass == nil ifTrue:[^#()].	^self theNonMetaClass subclasses 		select:[:aSubclass| aSubclass isMeta not] 		thenCollect:[:aSubclass| aSubclass class]	"Metaclass allInstancesDo:		[:m | Compiler evaluate: 'subclasses:=nil' for: m logged: false]"! !!Trait method!nonTrivial 	"Answer whether the receiver has any methods or instance variables."	^ self instVarNames notEmpty or: [self hasMethods or: [self hasTraitComposition]]! !!Trait method!uses: aTraitCompositionOrArray instanceVariableNames: instVarString 	| newComposition newMetaClass copyOfOldMetaClass |		copyOfOldMetaClass := self copy.	newMetaClass := self instanceVariableNames: instVarString.		newComposition := aTraitCompositionOrArray asTraitComposition.	newMetaClass assertConsistantCompositionsForNew: newComposition.	newMetaClass setTraitComposition: newComposition.		SystemAnnouncer uniqueInstance		classDefinitionChangedFrom: copyOfOldMetaClass to: newMetaClass! !!Trait method!asRingDefinition	^ self theNonMetaClass asRingDefinition theMetaClass! !!Trait method!noteNewBaseTraitCompositionApplied: aTraitComposition	"The argument is the new trait composition of my base trait - add	the new traits or remove non existing traits on my class side composition.	(Each class trait in my composition has its base trait on the instance side	of the composition - manually added traits to the class side are always 	base traits.)"		| newComposition traitsFromInstanceSide |	traitsFromInstanceSide := self traitComposition traits		select: [:each | each isClassTrait]		thenCollect: [:each | each baseTrait].			newComposition := self traitComposition copyTraitExpression.	(traitsFromInstanceSide copyWithoutAll: aTraitComposition traits) do: [:each |		newComposition removeFromComposition: each classTrait].	(aTraitComposition traits copyWithoutAll: traitsFromInstanceSide) do: [:each |		newComposition add:  (each classTrait)].	self setTraitComposition: newComposition! !!Trait method!bindingOf: varName	^self theNonMetaClass classBindingOf: varName! !!Trait method!addSubclass: aClass	"Do nothing."! !!Trait method!subclassesDo: aBlock	"Evaluate aBlock for each of the receiver's immediate subclasses."	self theNonMetaClass subclassesDo:[:aSubclass|		"The following test is for Class class which has to exclude		the Metaclasses being subclasses of Class."		aSubclass isMeta ifFalse:[aBlock value: aSubclass class]].! !!Trait method!removeInstVarNamed: aString 	"Remove the argument, aString, as one of the receiver's instance variables."	| newArray newString |	(self instVarNames includes: aString)		ifFalse: [self error: aString , ' is not one of my instance variables'].	newArray := self instVarNames copyWithout: aString.	newString := ''.	newArray do: [:aString2 | newString := aString2 , ' ' , newString].	self instanceVariableNames: newString! !!Trait method!addInstVarNamed: aString 	"Add the argument, aString, as one of the receiver's instance variables."	| fullString |	fullString := String streamContents: [:strm |		self instVarNames do: [:aString2 | strm nextPutAll: aString2; space].		strm nextPutAll: aString].	self instanceVariableNames: fullString! !!Trait method!criticTheNonMetaclassClass	^self theNonMetaClass ! !!Trait method!classPool	"Answer the dictionary of class variables."	^self theNonMetaClass classPool! !!Trait method!sharedPools	^OrderedCollection new.! !!Trait method!isObsolete	"Return true if the receiver is obsolete"	^self soleInstance == nil "Either no thisClass"		or:[self soleInstance classSide ~~ self "or I am not the class of thisClass"			or:[self soleInstance isObsolete]] "or my instance is obsolete"! !!Trait method!assertConsistantCompositionsForNew: aTraitComposition	"Applying or modifying a trait composition on the class side	of a behavior has some restrictions."	| baseTraits notAddable message |	baseTraits := aTraitComposition traits select: [:each | each isBaseTrait].	baseTraits isEmpty ifFalse: [		notAddable := (baseTraits reject: [:each | each classSide methodDict isEmpty]).		notAddable isEmpty ifFalse: [			message := String streamContents: [:stream |				stream nextPutAll: 'You can not add the base trait(s)'; cr.				notAddable					do: [:each | stream nextPutAll: each name]					separatedBy: [ stream nextPutAll: ', '].				stream cr; nextPutAll: 'to this composition because it/they define(s) methods on the class side.'].		^TraitCompositionException signal: message]].			(self instanceSide traitComposition traits asSet =			(aTraitComposition traits				select: [:each | each isClassTrait]				thenCollect: [:each | each baseTrait]) asSet) ifFalse: [				^TraitCompositionException signal: 'You can not add or remove class side traits on				the class side of a composition. (But you can specify aliases or exclusions				for existing traits or add a trait which does not have any methods on the class side.)']! !!Trait method!acceptsLoggingOfCompilation	"Answer whether the receiver's method submisions and class defintions should be logged to the changes file and to the current change set.  The metaclass follows the rule of the class itself."	^ self theNonMetaClass acceptsLoggingOfCompilation! !!Trait method!wantsRecompilationProgressReported	"The metaclass follows the rule of the class itself."	^ self theNonMetaClass wantsRecompilationProgressReported! !!Trait method!obsoleteSubclasses	"Answer the receiver's subclasses."	self theNonMetaClass == nil ifTrue:[^#()].	^self theNonMetaClass obsoleteSubclasses 		select:[:aSubclass| aSubclass isMeta not] 		thenCollect:[:aSubclass| aSubclass class]	"Metaclass allInstancesDo:		[:m | Compiler evaluate: 'subclasses:=nil' for: m logged: false]"! !!Trait method!hasClassSide	^false! !!Trait method!classVarNames	"Answer a set of the names of the class variables defined in the receiver's instance."		self theNonMetaClass ifNil: [ ^ Set new ].	^self theNonMetaClass classVarNames! !!Trait method!category	^ self theNonMetaClass category! !!Trait method!isAnonymous	^self soleInstance isAnonymous ! !!Trait method!binding	"return an association that can be used as the binding	 To share it between methods, reuse an existing one if possible"	^self methodDict 		ifEmpty: [nil -> self]		ifNotEmpty: [:dict | dict anyOne classBinding]! !!Trait method!initializeFrom: anotherClassTrait	self traitComposition: self traitComposition copyTraitExpression.	self methodDict: self methodDict copy.	self localSelectors: self localSelectors copy.	self basicOrganization: self organization copy.! !----STARTUP----2015-01-17T01:45:51.385321+01:00 as /Users/craig/me/behavior/context/development/context/context.app/Contents/Resources/context processor.app/Contents/Resources/context/memories/CFE10A14-D883-4ACE-990A-0DDA86AA362B/CFE10A14-D883-4ACE-990A-0DDA86AA362B!!Class methodsFor: 'accessing' stamp: 'CraigLatta 1/17/2015 01:51' prior: 19810827!traitComposition	| index |		index := (		((self instVarAt: 8) class == ByteSymbol)			ifTrue: [13]			ifFalse: [14]).				(self instVarAt: index) ifNil: [self instVarAt: index put: TraitComposition new].	^self instVarAt: index! !----STARTUP----2015-01-17T01:58:02.361208+01:00 as /Users/craig/me/behavior/context/development/context/context.app/Contents/Resources/context processor.app/Contents/Resources/context/memories/CFE10A14-D883-4ACE-990A-0DDA86AA362B/CFE10A14-D883-4ACE-990A-0DDA86AA362B!----SNAPSHOT----2015-01-17T02:03:51.152002+01:00 CFE10A14-D883-4ACE-990A-0DDA86AA362B priorSource: 531162!!Class methodsFor: 'accessing' stamp: 'CraigLatta 1/17/2015 02:03' prior: 19810827!traitComposition	| index |		index := 10.		[(self instVarAt: index) class == SystemDictionary] whileFalse: [index := index + 1].	index := index + 2.				(self instVarAt: index) ifNil: [self instVarAt: index put: TraitComposition new].	^self instVarAt: index! !!Trait method!commentInventory	"Answer a string with a count of the classes with and without comments 	for all the classes in the package of which this class is a member."	"Morph commentInventory"	^ self environment organization commentInventory: (self category copyUpTo: $-), '*'! !!Trait method!fileOutMethod: selector	"Write source code of a single method on a file.  Make up a name for the file."		| internalStream |	internalStream := (String new: 1000) writeStream.	self fileOutMethod: selector on: internalStream.	FileStream writeSourceCodeFrom: internalStream baseName: (self name , '-' , (selector copyReplaceAll: ':' with: '')) isSt: true.! !!Trait method!notifyOfRecategorizedSelector: element from: oldCategory to: newCategory	SystemAnnouncer uniqueInstance selector: element recategorizedFrom: oldCategory to: newCategory inClass: self.	SystemAnnouncer uniqueInstance 		suspendAllWhile: [self notifyUsersOfRecategorizedSelector: element from: oldCategory to: newCategory].! !!Trait method!classSide	^self theMetaClass.! !!Trait method!instVarMappingFrom: oldClass	"Return the mapping from instVars of oldClass to new class that is used for converting old instances of oldClass."	| oldInstVarNames |	oldInstVarNames := oldClass allInstVarNames.	^self allInstVarNames 			collect: [:instVarName | oldInstVarNames indexOf: instVarName].! !!Trait method!mcWorkingCopy	MCWorkingCopy managersForClass:  self do: [: package | ^ package ]! !!Trait method!updateOrganizationDescription: aTraitMethodDescription oldCategory: oldCategoryOrNil newCategory: newCategoryOrNil changedCategories: changedCategories	| sel effectiveCategory currentCategory |	sel := aTraitMethodDescription selector.		(self includesLocalSelector: sel) ifTrue: [ ^ self ].	 	currentCategory := self organization categoryOfElement: sel.	effectiveCategory := aTraitMethodDescription effectiveMethodCategoryCurrent: currentCategory new: newCategoryOrNil.		effectiveCategory ifNil: [ 		currentCategory ifNotNil: [ changedCategories add: currentCategory ].		^ self organization removeElement: sel ].			((currentCategory isNil 		or: [ 				currentCategory == Protocol ambiguous 				or: [ currentCategory == oldCategoryOrNil ] ])		and: [ currentCategory ~~ effectiveCategory ])		ifTrue: [ 			currentCategory ifNotNil: [ changedCategories add: currentCategory ].			self organization classify: sel under: effectiveCategory suppressIfDefault: false ]! !!Trait method!reorganize	"During fileIn, !!Rectangle reorganize!! allows Rectangle to seize control and treat the next chunk as its organization.  See the transfer of control where ReadWriteStream fileIn calls scanFrom:"	^self organization! !!Trait method!isInstanceSide	^self isClassSide not! !!Trait method!noteMethodRemoved: oldMethod	SystemAnnouncer uniqueInstance		methodRemoved: oldMethod! !!Trait method!obsolete	"Make the receiver obsolete."	self superclass removeSubclass: self.	self organization: nil.	super obsolete.! !!Trait method!removeInstVarNamed: aString 	"Remove the argument, aString, as one of the receiver's instance 	variables. Create an error notification if the argument is not found."	^self subclassResponsibility! !!Trait method!noteRecategorizedSelectors: aCollection oldComposition: aTraitComposition		aCollection do: [:each | | oldCategory newCategory | 		oldCategory := self organization categoryOfElement: each.		newCategory := (self traitComposition methodDescriptionForSelector: each) effectiveMethodCategory.		self noteRecategorizedSelector: each from: oldCategory to: newCategory]! !!Trait method!localMethods	"returns the methods of classes including the ones of the traits that the class uses" 	 	^ self methods select: [:each | self includesLocalSelector: each selector].! !!Trait method!wantsChangeSetLogging	"Answer whether code submitted for the receiver should be remembered by the changeSet mechanism."	^ true! !!Trait method!package	^ RPackage organizer packageOf: self.	! !!Trait method!correspondingForTest	"Return the unit test that correspond to me. If it does not exist, it returns myself. 	 Return the tested class if sent to a class"		| className |	className := (self inheritsFrom: TestCase)		ifTrue: [ self name copyReplaceAll: 'Test' with: '' ]		ifFalse: [ self name, 'Test' ].	^ Smalltalk 		at: className asSymbol 		ifAbsent: [ self ]	! !!Trait method!usesPoolVarNamed: aString	"Only classes may use a pool variable named: aString"		^ false! !!Trait method!logMethodSource: aText forMethod: aCompiledMethod inCategory: category withStamp: changeStamp	aCompiledMethod		putSource: aText		class: self		category: category		withStamp: changeStamp 		inFile: 2		priorMethod: (self					compiledMethodAt: aCompiledMethod selector					ifAbsent: [])! !!Trait method!duringTestCompileSilently: code storeSource: storeSource classified: aCategory	^ Author 		useAuthor: 'TestsAuthor'		during: [ [			self 				compile: code				classified: (aCategory ifNil: [ '' ])				withStamp: nil 				notifying: nil 				logSource: storeSource ] fuelValueWithoutNotifications ]! !!Trait method!organization: aClassOrg	"Install an instance of ClassOrganizer that represents the organization of the messages of the receiver."	aClassOrg ifNotNil: [aClassOrg setSubject: self].	self basicOrganization: aClassOrg.! !!Trait method!superclass: aClass methodDictionary: mDict format: fmt	"Basic initialization of the receiver"	super superclass: aClass methodDictionary: mDict format: fmt.	self instanceVariables: nil.	self organization: nil.! !!Trait method!hasClassSide	^self subclassResponsibility.! !!Trait method!isExtendedInPackage: aPackage	"returns true if aPackage defines an extension to this class"	^ aPackage extendsClass: self.! !!Trait method!uncategorizedSelectors	^ self selectorsInProtocol: Protocol unclassified! !!Trait method!copyCategory: cat from: aClass classified: newCat 	"Specify that one of the categories of messages for the receiver is the 	third argument, newCat. Copy each message found in the category cat in 	class aClass into this new category."	self copyAll: (aClass organization listAtCategoryNamed: cat)		from: aClass		classified: newCat! !!Trait method!methodsFor: categoryName 	"Answer a ClassCategoryReader for compiling the messages in the category, categoryName, of the receiver."	^ ClassCategoryReader new setClass: self category: categoryName asSymbol	"(False methodsFor: 'logical operations') inspect"! !!Trait method!sharedPoolOfVarNamed: aString	"Only classes may have shared pools"		^ nil! !!Trait method!compile: text classified: category notifying: requestor	| stamp |	stamp := self acceptsLoggingOfCompilation		ifTrue: [ Author changeStamp ]		ifFalse: [ nil ].	^ self		compile: text		classified: category		withStamp: stamp		notifying: requestor! !!Trait method!isMeta	^self isClassSide! !!Trait method!packageRefactoringMenu: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Rewrite Code')		order:  100;		withSeparatorAfter.		(aBuilder item: #'Rewrite Code')		action: [ target refactor rewriteCode ];		parent: #'Rewrite Code';		order: 0.	(aBuilder item: #'Search Code')		action: [ target refactor searchCode ];		parent: #'Rewrite Code';		order: 100.! !!Trait method!fileOutMethod: selector on: aStream		(selector == #Comment) ifTrue: [^ self inform: 'Sorry, cannot file out class comment in isolation.'].	(self includesSelector: selector) ifFalse: [^ self error: 'Selector ', selector asString, ' not found'].	aStream header; timeStamp.	self printMethodChunk: selector withPreamble: true		on: aStream moveSource: false toFile: 0.! !!Trait method!fileOutOrganizationOn: aFileStream	"File a description of the receiver's organization on aFileStream."	aFileStream cr; nextPut: $!!.	aFileStream nextChunkPut: self name, ' reorganize'; cr.	aFileStream nextChunkPut: self organization stringForFileOut ; cr! !!Trait method!linesOfCode 	"An approximate measure of lines of code.	Includes comments, but excludes blank lines."	| lines |	lines := self localMethods inject: 0 into: [:sum :each | sum + each linesOfCode]. 	^ self isMeta 		ifTrue: [lines]		ifFalse: [lines + self class linesOfCode]! !!Trait method!allSelectorsInProtocol: aName 	"Answer a list of all the methods of the receiver and all its 	superclasses that are in the protocol named aName"		| aColl |	aColl := OrderedCollection new.	self withAllSuperclasses do: [:aClass | 		aColl addAll: (aClass organization listAtCategoryNamed: aName) ].	^ aColl asSet asArray sort! !!Trait method!groupRefactoring: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Rewrite Code')		order:  100;		withSeparatorAfter.		(aBuilder item: #'Rewrite Code')		action: [ target refactor rewriteCode ];		parent: #'Rewrite Code';		order: 0.	(aBuilder item: #'Search Code')		action: [ target refactor searchCode ];		parent: #'Rewrite Code';		order: 100.! !!Trait method!errorCategoryName	self error: 'Category name must be a String'! !!Trait method!packages	"the extending packages of a class are the packages that extend it."		^  self extendingPackages asSet copy add: self package; yourself! !!Trait method!printCategoryChunk: category on: aFileStream withStamp: changeStamp priorMethod: priorMethod 	"Print a method category preamble.  This must have a category name.	It may have an author/date stamp, and it may have a prior source link.	If it has a prior source link, it MUST have a stamp, even if it is empty.""The current design is that changeStamps and prior source links are preserved in the changes file.  All fileOuts include changeStamps.  Condensing sources, however, eliminates all stamps (and links, natch)."	aFileStream cr; nextPut: $!!.	aFileStream nextChunkPut: (String streamContents:		[:strm |		strm nextPutAll: self name; nextPutAll: ' methodsFor: '; print: category asString.		(changeStamp ~~ nil and:			[changeStamp size > 0 or: [priorMethod ~~ nil]]) ifTrue:			[strm nextPutAll: ' stamp: '; print: changeStamp].		priorMethod ~~ nil ifTrue:			[strm nextPutAll: ' prior: '; print: priorMethod sourcePointer]]).	! !!Trait method!allProtocolsUpTo: mostGenericClass	"Answer a list of all the method protocols of the receiver and all its superclasses, up through mostGenericClass"	| otherClassCategories thisClassCategories lowercaseSortBlock  |			otherClassCategories := OrderedCollection new.	lowercaseSortBlock  := [ :a :b | a asLowercase <= b asLowercase ].		(self allSuperclassesIncluding: mostGenericClass) do: [ :aClass | 		 otherClassCategories addAll: aClass organization categories ].	otherClassCategories remove: 'no messages' ifAbsent: [  ].	thisClassCategories := self organization categories sorted: lowercaseSortBlock.														^ thisClassCategories , ((otherClassCategories asSet removeAllSuchThat: [ :each |								thisClassCategories includes: each ]) sorted: lowercaseSortBlock)! !!Trait method!instVarIndexFor: instVarName ifAbsent: aBlock	"Answer the index of the named instance variable."	| index |	index := self instanceVariables == nil 				ifTrue: [0]				ifFalse: [self instanceVariables indexOf: instVarName ifAbsent: [0]].	index = 0 ifTrue: 		[^self superclass == nil 			ifTrue: [aBlock value]			ifFalse: [self superclass instVarIndexFor: instVarName ifAbsent: aBlock]].	^self superclass == nil 			ifTrue: [index]		ifFalse: [index + self superclass instSize]! !!Trait method!noteRecategorizedSelector: aSymbol from: oldCategoryOrNil to: newCategoryOrNil	| changedCategories |	changedCategories := self updateOrganizationSelector: aSymbol oldCategory: oldCategoryOrNil newCategory: newCategoryOrNil.	changedCategories do: [:each |		(self organization isEmptyCategoryNamed: each) ifTrue: [self organization removeCategory: each]]! !!Trait method!uncategorizedMethods	self deprecated: 'Use uncategorizedSelectors' on: '28 August 2013' in: #'Pharo3.0'.	^ self uncategorizedSelectors ! !!Trait method!comment: aStringOrText stamp: aStamp	"Set the receiver's comment to be the argument, aStringOrText."	self instanceSide classComment: aStringOrText stamp: aStamp.! !!Trait method!isExtended	^ self extendingPackages isEmpty! !!Trait method!storeOn: aStream	"Classes and Metaclasses have global names."	aStream nextPutAll: self name! !!Trait method!usesLocalPoolVarNamed: aString	^false.! !!Trait method!manifestBuilderForRuleChecker: aRuleChecker	"Return the manifestsince the rulechecker is keeping a cache, we ask it back"	^ aRuleChecker manifestBuilderOfClass: self! !!Trait method!definitionForNautilus	^ self definition! !!Trait method!compile: text classified: category withStamp: changeStamp notifying: requestor	^ self		compile: text		classified: category		withStamp: changeStamp		notifying: requestor		logSource: self acceptsLoggingOfCompilation! !!Trait method!instVarNames	"Answer an Array of the receiver's instance variable names."	self instanceVariables == nil		ifTrue: [^#()]		ifFalse: [^self instanceVariables]! !!Trait method!noteAddedSelector: aSelector meta: isMeta	"A hook allowing some classes to react to adding of certain selectors"! !!Trait method!duringTestCompileSilently: code classified: aCategory	^ self 		duringTestCompileSilently: code		storeSource: true		classified: aCategory! !!Trait method!printMethodChunk: selector withPreamble: doPreamble on: outStream moveSource: moveSource toFile: fileIndex	"Copy the source code for the method associated with selector onto the fileStream.  If moveSource true, then also set the source code pointer of the method."	| preamble method oldPos newPos sourceFile endPos |	doPreamble		ifTrue: [ preamble := self name , ' methodsFor: ' , (self organization categoryOfElement: selector) asString printString ]		ifFalse: [ preamble := '' ].	method := self methodDict		at: selector		ifAbsent: [ 			outStream				nextPutAll: selector;				cr.			outStream				tab;				nextPutAll: '** ERROR!!  THIS SCRIPT IS MISSING ** ' translated;				cr;				cr.			outStream nextPutAll: '  '.			^ outStream ].		oldPos := method filePosition.			sourceFile := SourceFiles at: method fileIndex.			preamble size > 0				ifTrue: [ 					"Copy the preamble"					outStream copyPreamble: preamble from: sourceFile at: oldPos ]				ifFalse: [ sourceFile position: oldPos ].	"Copy the method chunk"			newPos := outStream position.			outStream copyMethodChunkFrom: sourceFile.			sourceFile skipSeparators.	"The following chunk may have ]style["			sourceFile peek == $]				ifTrue: [ 					outStream						cr;						copyMethodChunkFrom: sourceFile ].			moveSource				ifTrue: [ 					"Set the new method source pointer"					endPos := outStream position.					method setSourcePosition: newPos inFile: fileIndex ].	preamble size > 0		ifTrue: [ outStream nextChunkPut: ' ' ].	^ outStream cr! !!Trait method!fileOutChangedMessages: aSet on: aFileStream moveSource: moveSource toFile: fileIndex 	"File a description of the messages of this class that have been 	changed (i.e., are entered into the argument, aSet) onto aFileStream.  If 	moveSource, is true, then set the method source pointer to the new file position.	Note when this method is called with moveSource=true, it is condensing the	.changes file, and should only write a preamble for every method."	| org |	(org := self organization) realCategories do: 		[:cat | | sels | 		sels := (org listAtCategoryNamed: cat) select: [:sel | aSet includes: sel].		sels do:			[:sel |  self printMethodChunk: sel withPreamble: true on: aFileStream							moveSource: moveSource toFile: fileIndex]]! !!Trait method!fileOutChangedMessages: aSet on: aFileStream 	"File a description of the messages of the receiver that have been 	changed (i.e., are entered into the argument, aSet) onto aFileStream."	self fileOutChangedMessages: aSet		on: aFileStream		moveSource: false		toFile: 0! !!Trait method!allMethodsInCategory: aName 	"Answer a list of all the methods of the receiver and all its 	superclasses that are in the category named aName"	self deprecated: 'Use allSelectorsInProtocol: ' on: '28 August 2013' in: #'Pharo3.0'.	^ self allSelectorsInProtocol: aName! !!Trait method!notifyRepackage: selector method: compiledMethod oldProtocol: oldProtocol newProtocol: newProtocol	| oldPackage newPackage |		(newProtocol = oldProtocol)		ifTrue: [ ^ self ].			"This indirection is because we need to abstract RPackage from the kernel"	#RPackage asClassIfPresent: [ :rPackageClass | 			newPackage := rPackageClass organizer 				packageForProtocol: newProtocol 				inClass: self.			oldPackage := rPackageClass organizer 				packageForProtocol: oldProtocol 				inClass: self.						"Announce recategorization"			newPackage = oldPackage				ifFalse: [ 					SystemAnnouncer uniqueInstance 						methodRepackaged: compiledMethod 						from: oldPackage 						to: newPackage ] ].			SystemAnnouncer uniqueInstance		selector: selector		recategorizedFrom: oldProtocol		to: newProtocol		inClass: self! !!Trait method!instVarNamesAndOffsetsDo: aBinaryBlock	"This is part of the interface between the compiler and a class's instance or field names.	 The class should enumerate aBinaryBlock with the instance variable name strings and	 their integer offsets.  The order is important. Names evaluated later will override the	 same names occurring earlier."	| superInstSize |	(superInstSize := self superclass notNil ifTrue: [self superclass instSize] ifFalse: [0]) > 0 ifTrue:		[self superclass instVarNamesAndOffsetsDo: aBinaryBlock].	1 to: self instSize - superInstSize do:		[:i| aBinaryBlock value: (self instanceVariables at: i) value: i + superInstSize]! !!Trait method!criticNameOn: aStream	"This behavior may be folded later by changing the name of this method or using another one."		aStream 		<< self name 		<< ' (' 		<< self category 		<< ')' ! !!Trait method!comment: aStringOrText	"Set the receiver's comment to be the argument, aStringOrText."	self instanceSide classComment: aStringOrText.! !!Trait method!copyMethodDictionaryFrom: donorClass	"Copy the method dictionary of the donor class over to the receiver"	self methodDict: donorClass copyOfMethodDictionary.	self organization: donorClass organization deepCopy.! !!Trait method!fileOutCategory: catName 	| internalStream |	internalStream := (String new: 1000) writeStream.	internalStream header; timeStamp.	self fileOutCategory: catName on: internalStream moveSource: false toFile: 0.	internalStream trailer.	^ FileStream writeSourceCodeFrom: internalStream baseName: (self name , '-' , catName) isSt: true.! !!Trait method!selectorsInProtocol: aName 	"Answer a list of the selectors of the receiver that are in category named aName"		| aColl |	aColl := Set withAll: (self organization listAtCategoryNamed: aName).	^ aColl asArray sort! !!Trait method!addSelectorSilently: selector withMethod: compiledMethod	super addSelectorSilently: selector withMethod: compiledMethod.	self instanceSide noteAddedSelector: selector meta: self isMeta.! !!Trait method!removeSelector: selector 	"Remove the message whose selector is given from the method 	dictionary of the receiver, if it is there. Answer nil otherwise."		| priorMethod priorProtocol origin | 	priorMethod := self compiledMethodAt: selector ifAbsent: [^ nil].	origin := priorMethod origin.	priorProtocol := self whichCategoryIncludesSelector: selector.	super removeSelector: selector.	SystemAnnouncer uniqueInstance 		suspendAllWhile: [self updateOrganizationSelector: selector oldCategory: priorProtocol newCategory: nil].	SystemAnnouncer uniqueInstance 			methodRemoved: priorMethod selector: selector inProtocol: priorProtocol class: self origin: origin.! !!Trait method!classThatDefinesInstanceVariable: instVarName	(self instVarNames notNil and: [self instVarNames includes: instVarName asString]) ifTrue: [^ self]. 	^self superclass ifNotNil: [self superclass classThatDefinesInstanceVariable: instVarName]! !!Trait method!compileSilently: code classified: category	"Compile the code and classify the resulting method in the given category, leaving no trail in the system log, nor in any change set, nor in the 'recent submissions' list. This should only be used when you know for sure that the compilation will succeed."	^ self compileSilently: code classified: category notifying: nil.! !!Trait method!commentStamp: changeStamp prior: indexAndOffset	"Prior source link ignored when filing in."	^ ClassCommentReader new setClass: self				category: #Comment				changeStamp: changeStamp! !!Trait method!comment	"Answer the receiver's comment. (If missing, supply a template) "	| aString |	aString := self instanceSide organization classComment.	aString isEmpty ifFalse: [^ aString].	^self classCommentBlank! !!Trait method!allInstVarNamesEverywhere	"Answer the set of inst var names used by the receiver, all superclasses, and all subclasses"	| aList |	aList := OrderedCollection new.	(self allSuperclasses , self withAllSubclasses asOrderedCollection) do:		[:cls | aList addAll: cls instVarNames].	^ aList asSet	"BorderedMorph allInstVarNamesEverywhere"! !!Trait method!extendingPackages	"the extending packages of a class are the packages that extend it."	^ RPackage organizer extendingPackagesOf: self! !!Trait method!checkForInstVarsOK: instVarString	"Return true if instVarString does no include any names used in a subclass"	| instVarArray |	instVarArray := instVarString subStrings: ' '.	self allSubclasses do:		[:cl | cl instVarNames do:			[:n | (instVarArray includes: n)				ifTrue: [self error: n , ' is already used in ' , cl name.						^ false]]].	^ true! !!Trait method!fileOutOn: aFileStream 	"File a description of the receiver on aFileStream."	self fileOutOn: aFileStream		moveSource: false		toFile: 0! !!Trait method!moveChangesTo: newFile 	"Used in the process of condensing changes, this message requests that 	the source code of all methods of the receiver that have been changed 	should be moved to newFile."	| changes |	changes := self selectors select: [:sel | (self compiledMethodAt: sel) fileIndex > 1 ].	self		fileOutChangedMessages: changes		on: newFile		moveSource: true		toFile: 2! !!Trait method!hasInstVarNamed: aString	"Return true whether the receiver defines an instance variable named aString."		^ self instVarNames includes: aString! !!Trait method!putClassCommentToCondensedChangesFile: aFileStream	"Called when condensing changes.  If the receiver has a class comment, and if that class comment does not reside in the .sources file, then write it to the given filestream, with the resulting RemoteString being reachable from the source file #2.  Note that any existing backpointer into the .sources file is lost by this process -- a situation that maybe should be fixed someday."	| header aStamp aCommentRemoteStr |	self isMeta ifTrue: [^ self].  "bulletproofing only"	((aCommentRemoteStr := self organization commentRemoteStr) isNil or:		[aCommentRemoteStr sourceFileNumber = 1]) ifTrue: [^ self].	aFileStream cr; nextPut: $!!.	header := String streamContents: [:strm | strm nextPutAll: self name;		nextPutAll: ' commentStamp: '.		(aStamp := self organization commentStamp ifNil: ['<historical>']) storeOn: strm.		strm nextPutAll: ' prior: 0'].	aFileStream nextChunkPut: header.	aFileStream cr.	self organization classComment: (RemoteString newString: self organization classComment onFileNumber: 2 toFile: aFileStream) stamp: aStamp! !!Trait method!duringTestCompileSilently: code	^ self 		duringTestCompileSilently: code 		storeSource: true! !!Trait method!classVariablesString	"Answer a string of my class variable names separated by spaces."	^String streamContents: [ :stream | 		self classVarNames 			do: [ :each | stream nextPutAll: each ]			separatedBy: [ stream space ] ]! !!Trait method!newInstanceFrom: oldInstance variable: variable size: instSize map: map	"Create a new instance of the receiver based on the given old instance.	The supplied map contains a mapping of the old instVar names into	the receiver's instVars"	| new |	variable		ifTrue: [new := self basicNew: oldInstance basicSize]		ifFalse: [new := self basicNew].	1 to: instSize do: 		[:offset |  (map at: offset) > 0 ifTrue:			[new instVarAt: offset					put: (oldInstance instVarAt: (map at: offset))]].	variable 		ifTrue: [1 to: oldInstance basicSize do: 					[:offset |					new basicAt: offset put: (oldInstance basicAt: offset)]].	^new! !!Trait method!organization	"Answer the instance of ClassOrganizer that represents the organization 	of the messages of the receiver."	self basicOrganization		ifNil: [ self basicOrganization: (self isTrait						ifTrue: [ ClassOrganization new ]						ifFalse: [ ClassOrganization forClass: self ]) ].	^self basicOrganization setSubject: self.	"Making sure that subject is set correctly. It should not be necessary."		! !!Trait method!classComment: aString stamp: aStamp	"Store the comment, aString or Text or RemoteString, associated with the class we are organizing.  Empty string gets stored only if had a non-empty one before."	| pointer header file oldCommentRemoteString oldComment oldStamp |	oldComment := self organization classComment.	oldStamp := self organization commentStamp.	(aString isKindOf: RemoteString) ifTrue: [		SystemAnnouncer uniqueInstance 			class: self 			oldComment: oldComment 			newComment: aString string 			oldStamp: oldStamp 			newStamp: aStamp.		^ self organization classComment: aString stamp: aStamp].	oldCommentRemoteString := self organization commentRemoteStr.	(aString size = 0) & (oldCommentRemoteString isNil) ifTrue: [^ self organization classComment: nil].		"never had a class comment, no need to write empty string out"	pointer := oldCommentRemoteString 			ifNil: [0] 			ifNotNil: [oldCommentRemoteString sourcePointer].		(file := SourceFiles at: 2) ifNotNil: [		file setToEnd; cr; nextPut: $!!.	"directly"		"Should be saying (file command: 'H3') for HTML, but ignoring it here"		header := String streamContents: [:strm | strm nextPutAll: self name;			nextPutAll: ' commentStamp: '.			aStamp storeOn: strm.			strm nextPutAll: ' prior: '; nextPutAll: pointer printString].		file nextChunkPut: header].		self organization 		classComment: (RemoteString newString: aString onFileNumber: 2) 		stamp: aStamp.		SystemAnnouncer uniqueInstance 		class: self 		oldComment: oldComment 		newComment: aString 		oldStamp: oldStamp 		newStamp: aStamp! !!Trait method!compile: text classified: category withStamp: changeStamp notifying: requestor logSource: logSource 	| method |	method := self compiler		source: text;		requestor: requestor;		category: category;		failBlock:  [ ^nil ];		compile.			logSource ifTrue: [		self 			logMethodSource: (requestor ifNotNil: [ :r | r text ] ifNil: [ text ]) "the requestor text might have been changed by the compiler and may be different thant text argument"			forMethod: method			inCategory: category 			withStamp: changeStamp].			self 		addAndClassifySelector: method selector 		withMethod: method 		inProtocol: category 		notifying: requestor.				self instanceSide 		noteCompilationOf: method selector 		meta: self isClassSide.	^ method selector! !!Trait method!classThatDefinesClassVariable: classVarName	"Answer the class that defines the given class variable"	(self classPool includesKey: classVarName asSymbol) ifTrue: [^ self]. 	^self superclass ifNotNil: [self superclass classThatDefinesClassVariable: classVarName]! !!Trait method!zapOrganization	"Remove the organization of this class by message categories.	This is typically done to save space in small systems.  Classes and methods	created or filed in subsequently will, nonetheless, be organized"	self organization: nil.	self isClassSide ifFalse: [self classSide zapOrganization]! !!Trait method!compileSilently: code classified: category notifying: requestor	"Compile the code and classify the resulting method in the given category, leaving no trail in the system log, nor in any change set, nor in the 'recent submissions' list. This should only be used when you know for sure that the compilation will succeed."	^ SystemAnnouncer uniqueInstance 		suspendAllWhile: [self compile: code classified: category notifying: requestor].! !!Trait method!authors	"Returns a bag representing the author frequency based on the latest version of the methods of the receiver."	^(self methods, self class methods) collect: [ :each | each author ] as: Bag .		! !!Trait method!commentStamp: changeStamp	self organization commentStamp: changeStamp.	^ self commentStamp: changeStamp prior: 0! !!Trait method!criticClass	"Return the class of the receiver for the critic browser. This behavior may be folded later by changing the name of this method or using another one."		^ self! !!Trait method!packageFromOrganizer: anOrganizer	"returns the package that defines this class"	^ anOrganizer packageOf: self.! !!Trait method!instanceVariableNamesDo: anUnaryBlock	"This is part of the interface between the compiler and a class's instance or field names.	 The class should enumerate anUnaryBlock with the instance variable name strings.  The order is important. Names evaluated later will override the	 same names occurring earlier."	| superInstSize |	(superInstSize := self superclass notNil ifTrue: [self superclass instSize] ifFalse: [0]) > 0 ifTrue:		[self superclass instanceVariableNamesDo: anUnaryBlock].	1 to: self instSize - superInstSize do:		[:i| anUnaryBlock value: (self instanceVariables at: i)]! !!Trait method!printSubclassesOn: aStream level: level 	"As part of the algorithm for printing a description of the receiver, print the	subclass on the file stream, aStream, indenting level times."	| subclassNames |	aStream crtab: level.	aStream nextPutAll: self name.	aStream space; print: self instVarNames.	self == Class		ifTrue: 			[aStream crtab: level + 1; nextPutAll: '[ ... all the Metaclasses ... ]'.			^self].	subclassNames := self subclasses asSortedCollection:[:c1 :c2| c1 name <= c2 name].	"Print subclasses in alphabetical order"	subclassNames do:		[:subclass | subclass printSubclassesOn: aStream level: level + 1]! !!Trait method!applyChangesOfNewTraitCompositionReplacing: oldComposition	| changedSelectors oldMethodDict |	oldMethodDict := self methodDict copy.	changedSelectors := super applyChangesOfNewTraitCompositionReplacing: oldComposition.	self noteRecategorizedSelectors: changedSelectors oldComposition: oldComposition.	self noteChangesFrom: oldMethodDict.	^ changedSelectors.! !!Trait method!removeCategory: aString 	"Remove each of the messages categorized under aString in the method 	dictionary of the receiver. Then remove the category aString."	self deprecated: 'Use removeProtocol:' on: '28 August 2013' in: #'Pharo3.0'.	self removeProtocol: aString! !!Trait method!updateOrganizationDescription: each oldCategory: newCategoryOrNil newCategory: oldCategoryOrNil changed: changedCategories	| sel effectiveCategory currentCategory |		sel := each selector.	(self includesLocalSelector: sel) ifTrue: [ ^ self ].		currentCategory := self organization categoryOfElement: sel.	effectiveCategory := each 		effectiveMethodCategoryCurrent: currentCategory 		new: newCategoryOrNil.		effectiveCategory 		ifNil: [ 			currentCategory ifNotNil: [ changedCategories add: currentCategory ].			self organization removeElement: sel.			^ self ].			(currentCategory isNil 		or: [ currentCategory == Protocol ambiguous 		or: [ currentCategory == oldCategoryOrNil ] ])	ifFalse: [ ^ self ].		(currentCategory ~~ effectiveCategory)		ifTrue: [ 			currentCategory ifNotNil: [ changedCategories add: currentCategory ].			self organization classify: sel under: effectiveCategory suppressIfDefault: false ]! !!Trait method!removeProtocol: aString 	"Remove each of the messages categorized under aString in the method 	dictionary of the receiver. Then remove the category aString."	| categoryName |	categoryName := aString asSymbol.	(self organization listAtCategoryNamed: categoryName) do:		[:sel | self removeSelector: sel].	self organization removeCategory: categoryName! !!Trait method!codeRewritingClass: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Rewrite Code')		action: [ target refactor rewriteCode ];		parent: #'Code Rewriting';		order: 0.	(aBuilder item: #'Search Code')		action: [ target refactor searchCode ];		parent: #'Code Rewriting';		order: 100.			(aBuilder item: #'Type class')		action: [ target refactor typeClass ];		parent: #'Code Rewriting';		order: 200;		withSeparatorAfter.			(aBuilder item: #'Category Regex')		action: [ target refactor categoryRegex ];		parent: #'Code Rewriting';		order: 300.			(aBuilder item: #'Class Regex')		action: [ target refactor classRegex ];		parent: #'Code Rewriting';		order: 400.			(aBuilder item: #'Protocol Regex')		action: [ target refactor protocolRegex ];		parent: #'Code Rewriting';		order: 500.			(aBuilder item: #'Source Regex')		action: [ target refactor sourceRegex ];		parent: #'Code Rewriting';		order: 600;		withSeparatorAfter.! !!Trait method!copyAll: selArray from: class 	"Install all the methods found in the method dictionary of the second 	argument, class, as the receiver's methods. Classify the messages under 	-As yet not classified-."	self copyAll: selArray		from: class		classified: nil! !!Trait method!methodsInCategory: aName 	"Answer a list of the methods of the receiver that are in category named aName"	self deprecated: 'Use selectorsInProtocol: instead' on: '28 August 2013' in: #'Pharo3.0'.	^ self selectorsInProtocol: aName! !!Trait method!updateInstancesFrom: oldClass	"Recreate any existing instances of the argument, oldClass, as instances of 	the receiver, which is a newly changed class. Permute variables as 	necessary. Return the array of old instances (none of which should be	pointed to legally by anyone but the array)."	"ar 7/15/1999: The updating below is possibly dangerous. If there are any	contexts having an old instance as receiver it might crash the system if	the new receiver in which the context is executed has a different layout.	See bottom below for a simple example:"	| oldInstances |	oldInstances := oldClass allInstances asArray.	oldInstances := self updateInstances: oldInstances from: oldClass isMeta: self isMeta.	^oldInstances"	| crashingBlock class |	class := Object subclass: #CrashTestDummy		instanceVariableNames: 'instVar'		classVariableNames: ''		poolDictionaries: ''		category: 'Crash-Test'.	class compile:'instVar: value instVar := value'.	class compile:'crashingBlock ^[instVar]'.	crashingBlock := (class new) instVar: 42; crashingBlock.	Object subclass: #CrashTestDummy		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Crash-Test'.	crashingBlock.	crashingBlock value.	"! !!Trait method!instVarIndexFor: instVarName	"Answer the index of the named instance variable."	| index |	index := self instanceVariables == nil 		ifTrue: [0]		ifFalse: [self instanceVariables indexOf: instVarName].	index = 0 ifTrue: 		[^self superclass == nil 			ifTrue: [0]			ifFalse: [self superclass instVarIndexFor: instVarName]].	^self superclass == nil 			ifTrue: [index]		ifFalse: [index + self superclass instSize]! !!Trait method!isClassSide	^self == self classSide! !!Trait method!noteCompilationOf: aSelector meta: isMeta	"A hook allowing some classes to react to recompilation of certain selectors"! !!Trait method!reformatAll	"Reformat all methods in this class"	self methods do: [:method | method reformat]! !!Trait method!allSharedPools	"Answer an ordered collection  of the shared pools the receiver shares, including those defined  in the superclasses of the receiver."		^ OrderedCollection new! !!Trait method!notifyUsersOfRecategorizedSelector: element from: oldCategory to: newCategory	self users do: [:each |		each noteRecategorizedSelector: element from: oldCategory to: newCategory]! !!Trait method!subclassesDo: aBlock	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses."	^self subclasses do: aBlock! !!Trait method!fileOutCategory: aSymbol on: aFileStream moveSource: moveSource toFile: fileIndex 	"File a description of the receiver's category, aString, onto aFileStream. If 	moveSource, is true, then set the method source pointer to the new file position.	Note when this method is called with moveSource=true, it is condensing the	.sources file, and should only write one preamble per method category."	| selectors |	aFileStream cr.	selectors := self selectorsToFileOutCategory: aSymbol.	"Overridden to preserve author stamps in sources file regardless"	selectors do: [:sel |		self printMethodChunk: sel 			withPreamble: true			on: aFileStream 			moveSource: moveSource 			toFile: fileIndex].	^ self! !!Trait method!hasSharedPools	"Only a class may have shared pools"	^ false! !!Trait method!instVarNameForIndex: index	"Answer the named instance variable with index index or nil if none."	| superInstSize |	index > self instSize ifTrue: [^nil].	superInstSize := self superclass ifNil: [0] ifNotNil: [self superclass instSize].	index > superInstSize ifTrue:		[^self instanceVariables at: index - superInstSize].	self superclass ifNil: [^nil].	^self superclass instVarNameForIndex: index	"(Object allSubclasses select:		[:cls| cls instSize > cls superclass instSize and: [cls subclasses isEmpty and: [cls superclass instSize > 0]]]) collect:			[:cls| (1 to: cls instSize) collect: [:i| cls instVarNameForIndex: i]]"! !!Trait method!compile: code classified: heading 	"Compile the argument, code, as source code in the context of the 	receiver and install the result in the receiver's method dictionary under 	the classification indicated by the second argument, heading. nil is to be 	notified if an error occurs. The argument code is either a string or an 	object that converts to a string or a PositionableStream on an object that 	converts to a string."	^self		compile: code		classified: heading		notifying: nil! !!Trait method!copyCategory: cat from: class 	"Specify that one of the categories of messages for the receiver is cat, as 	found in the class, class. Copy each message found in this category."	self copyCategory: cat		from: class		classified: cat! !!Trait method!instanceSide	^ self theNonMetaClass! !!Trait method!renameMethodAllItem: aBuilder	^ (aBuilder item: #'Rename method (all)')			keyText: 'r, m' if: Nautilus useOldStyleKeys not;			keyText: 'r' if: Nautilus useOldStyleKeys;			action: [ | scroll target |				target := aBuilder model.				scroll := target methodWidget vScrollValue.				target refactor renameMethodFor: target selectedMethod originMethod.				target methodWidget vScrollValue: scroll ].! !!Trait method!classesThatImplementAllOf: selectorSet	"Return an array of any classes that implement all the messages in selectorSet."	| found remaining |	found := OrderedCollection new.	selectorSet do:		[:sel | (self includesSelector: sel) ifTrue: [found add: sel]].	found isEmpty		ifTrue: [^ self subclasses inject: Array new						into: [:subsThatDo :sub |							subsThatDo , (sub classesThatImplementAllOf: selectorSet)]]		ifFalse: [remaining := selectorSet copyWithoutAll: found.				remaining isEmpty ifTrue: [^ Array with: self].				^ self subclasses inject: Array new						into: [:subsThatDo :sub |							subsThatDo , (sub classesThatImplementAllOf: remaining)]]! !!Trait method!sourceCodeRefactoring: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Create cascade')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor createCascadeBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 0.				(aBuilder item: #'Extract method')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor extractBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 100.				(aBuilder item: #'Extract method to component')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor extractToComponentBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 200.			(aBuilder item: #'Extract to temporary')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor extractToTemporaryBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 300.				(aBuilder item: #'Inline method')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor inlineMethodBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 400.				(aBuilder item: #'Inline method from component')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor inlineMethodFromComponentBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 500.				(aBuilder item: #'Inline temporary')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor inlineTemporaryBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 600.				(aBuilder item: #'Move variable definition')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor moveVariableDefinitionBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 700.					(aBuilder item: #'Rename temporary')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor renameTemporaryNamed: target sourceTextArea selectedContents Between: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 800.								(aBuilder item: #'Split cascade')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor splitCascadeBetween: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 900.							(aBuilder item: #'Temporary to instvar')			action: [ 				target okToChange ifFalse: [ ^ target ].				target refactor temporaryToInstanceVariableNamed: target sourceTextArea selectedContents asString Between: target sourceTextArea selectionInterval from: target selectedMethod ];			parent: #'Source code refactoring';			order: 1000;			withSeparatorAfter.					(aBuilder item: #'Undo')			order: 1100;			label: target refactor undoLabel;			action: [ target refactor undoOperation ];			enabled: target refactor undoEnabled;			parent: #'Source code refactoring'.		(aBuilder item: #'Redo')			order: 1200;			label: target refactor redoLabel;			action: [ target refactor redoOperation ];			enabled: target refactor redoEnabled;			parent: #'Source code refactoring';			withSeparatorAfter.! !!Trait method!duringTestCompileSilently: code storeSource: storeSource	^ self		duringTestCompileSilently: code		storeSource: storeSource		classified: ''! !!Trait method!whichCategoryIncludesSelector: aSelector 	"Answer the category of the argument, aSelector, in the organization of 	the receiver, or answer nil if the receiver does not inlcude this selector."	(self includesSelector: aSelector)		ifTrue: [^ self organization categoryOfElement: aSelector]		ifFalse: [^nil]! !!Trait method!classCommentBlank	| existingComment stream |	existingComment := self theNonMetaClass organization classComment.	existingComment isEmpty		ifFalse: [^existingComment].	stream := (String new: 100) writeStream.	stream		nextPutAll: 'A';		nextPutAll: (self name first isVowel ifTrue: ['n '] ifFalse: [' ']);		nextPutAll: self name;		nextPutAll: ' is xxxxxxxxx.'.			(self instVarNames size > 0)		 ifTrue: [stream cr; cr; nextPutAll: 'Instance Variables'.  ].			self instVarNames asSortedCollection do: [:each |		stream			cr; tab; nextPutAll: each;			nextPut: $:;			tab; tab;			nextPutAll: '<Object>'].	stream cr.	self instVarNames asSortedCollection do: [:each |		stream			cr; nextPutAll: each;			cr; tab; nextPutAll: '- xxxxx'; cr].	^stream contents! !!Trait method!noteMethodChanged: oldMethod to: newMethod	SystemAnnouncer uniqueInstance		methodChangedFrom: oldMethod to: newMethod ! !!Trait method!wantsRecompilationProgressReported	"Answer whether the receiver would like progress of its recompilation reported interactively to the user."	^ true! !!Trait method!copyAll: selArray from: class classified: cat 	"Install all the methods found in the method dictionary of the second 	argument, class, as the receiver's methods. Classify the messages under 	the third argument, cat."	selArray do: [:s |		(class includesLocalSelector: s) ifTrue: [			self copy: s				from: class				classified: cat ] ]! !!Trait method!isDefinedInPackage: aPackage	"returns true if aPackage contains the definitino of this class"		^ aPackage includesClass: self.! !!Trait method!refactoringMethod: aBuilder	(aBuilder item: #'Refactoring')		order: -100.				(self renameMethodAllItem: aBuilder)		order: -90;		withSeparatorAfter! !!Trait method!addSelector: selector withMethod: compiledMethod notifying: requestor	| priorMethodOrNil |	priorMethodOrNil := self compiledMethodAt: selector ifAbsent: [nil].	self addSelectorSilently: selector withMethod: compiledMethod.	priorMethodOrNil 		ifNil: [SystemAnnouncer uniqueInstance methodAdded: compiledMethod selector: selector inClass: self requestor: requestor]		ifNotNil: [SystemAnnouncer uniqueInstance methodChangedFrom: priorMethodOrNil to: compiledMethod selector: selector inClass: self requestor: requestor].! !!Trait method!updateInstances: oldInstances from: oldClass isMeta: isMeta	"Recreate any existing instances of the argument, oldClass, as instances of the receiver, which is a newly changed class. Permute variables as necessary. Return the array of old instances (none of which should be pointed to legally by anyone but the array)."	"If there are any contexts having an old instance as receiver it might crash the system because the layout has changed, and the method only knows about the old layout."	| map variable instSize newInstances |	oldInstances isEmpty ifTrue:[^#()]. "no instances to convert"	isMeta ifTrue: [		oldInstances size = 1 ifFalse:[^self error:'Metaclasses can only have one instance'].		self soleInstance class == self ifTrue:[			^self error:'Metaclasses can only have one instance']].	map := self instVarMappingFrom: oldClass.	variable := self isVariable.	instSize := self instSize.	newInstances := Array new: oldInstances size.	1 to: oldInstances size do:[:i|		newInstances at: i put: (			self newInstanceFrom: (oldInstances at: i) variable: variable size: instSize map: map)].	"Now perform a bulk mutation of old instances into new ones"	oldInstances elementsExchangeIdentityWith: newInstances.	^newInstances "which are now old"! !!Trait method!hasComment	"return whether this class truly has a comment other than the default"	| org |	org := self instanceSide organization.	^org classComment isEmptyOrNil not! !!Trait method!printOn: aStream 	aStream nextPutAll: self name! !!Trait method!selectorsToFileOutCategory: aSymbol	^ self organization listAtCategoryNamed: aSymbol! !!Trait method!noteMethodAdded: aMethod	SystemAnnouncer uniqueInstance		methodAdded: aMethod! !!Trait method!acceptsLoggingOfCompilation	"Answer whether the receiver's method submisions and class defintions should be logged to the changes file and to the current change set.  The metaclass follows the rule of the class itself	Weird name is so that it will come lexically before #compile, so that a clean build can make it through."	^ true! !!Trait method!classComment: aString	"Store the comment, aString or Text or RemoteString, associated with the class we are orgainzing.  Empty string gets stored only if had a non-empty one before."	^ self classComment: aString stamp: '<historical>'! !!Trait method!spaceUsed	^super spaceUsed + (self hasClassSide		ifTrue: [self classSide spaceUsed] 		ifFalse: [0])! !!Trait method!compile: code notifying: requestor 	"Refer to the comment in Behavior|compile:notifying:." 	^self compile: code		 classified: Protocol unclassified		 notifying: requestor! !!Trait method!notifyUsersOfChangedSelectors: aCollection	self users do: [:each |		each noteChangedSelectors: aCollection]! !!Trait method!allMethodCategoriesIntegratedThrough: mostGenericClass	"Answer a list of all the method categories of the receiver and all its superclasses, up through mostGenericClass"	self deprecated: 'Use allProtocolsUpTo:' on: '28 August 2013' in: #'Pharo3.0'.	^ self allProtocolsUpTo: mostGenericClass! !!Trait method!forceNewFrom: anArray    "Create a new instance of the class and fill    its instance variables up with the array."    | object max |    object := self new.    max := self instSize.    anArray doWithIndex: [:each :index |        index > max ifFalse:            [object instVarAt: index put: each]].    ^ object! !!Trait method!allUnreferencedClassVariables	"Answer a list of the names of all the receiver's unreferenced class vars, including those defined in superclasses"	^ self systemNavigation allUnreferencedClassVariablesOf: self! !!Trait method!sharedPoolsString	"Answer a string of my shared pool names separated by spaces."	^String streamContents: [ :stream |		self sharedPools 			do: [ :each |				stream nextPutAll: (self environment 					keyAtIdentityValue: each 					ifAbsent: [ 'private' ]) ]			separatedBy: [ stream space ] ]! !!Trait method!selectorsInCategory: aName 	"Answer a list of the selectors of the receiver that are in category named aName"		| aColl |	aColl := Set withAll: (self organization listAtCategoryNamed: aName).	^ aColl asArray sort! !!Trait method!isTestCase	^false! !!Trait method!compileSilently: code 	"Compile the code and classify the resulting method in the given category, leaving no trail in the system log, nor in any change set, nor in the 'recent submissions' list. This should only be used when you know for sure that the compilation will succeed."	^ self compileSilently: code classified: 'not defined category' notifying: nil.! !!Trait method!packageOrganizer	"Returns the organizer of this class"	^ RPackage organizer ! !!Trait method!fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex	"File a description of the receiver on aFileStream. If the boolean 	argument, moveSource, is true, then set the trailing bytes to the position 	of aFileStream and to fileIndex in order to indicate where to find the 	source code."	aFileStream nextChunkPut: self definition.	self organization		putCommentOnFile: aFileStream		numbered: fileIndex		moveSource: moveSource		forClass: self.	self organization realCategories do: 		[:heading |		self fileOutCategory: heading			on: aFileStream			moveSource: moveSource			toFile: fileIndex]! !!Trait method!instanceVariablesString	"Answer a string of my instance variable names separated by spaces."	^String streamContents: [ :stream |		self instVarNames 			do: [ :each | stream nextPutAll: each ]			separatedBy: [ stream space ] ]! !!Trait method!sourceCodeRefactoringMenu: aBuilder	| target |	target := aBuilder model.		(aBuilder item: #'Format')		order: 1100;		keyText: 'Ctrl Shift f';		action: [ target refactor formatSourceCode ].			(aBuilder item: #'Source code refactoring')			order: 1101;			arguments: {};			withSeparatorAfter.! !!Trait method!copy: sel from: class classified: cat 	"Install the method associated with the first arugment, sel, a message 	selector, found in the method dictionary of the second argument, class, 	as one of the receiver's methods. Classify the message under the third 	argument, cat."	| code category |	"Useful when modifying an existing class"	code := class sourceCodeAt: sel.	code ifNotNil: 			[cat				ifNil: [category := class organization categoryOfElement: sel]				ifNotNil: [category := cat].			(self includesLocalSelector: sel)				ifTrue: [code asString = (self sourceCodeAt: sel) asString 							ifFalse: [self error: self name 										, ' ' 										, sel 										, ' will be redefined if you proceed.']].			self compile: code classified: category]! !!Trait method!copy: sel from: class 	"Install the method associated with the first argument, sel, a message 	selector, found in the method dictionary of the second argument, class, 	as one of the receiver's methods. Classify the message under -As yet not 	classified-."	self copy: sel		from: class		classified: nil! !!Trait method!packagesWithoutExtensions	^ Set new add: self package; yourself.! !!Trait method!addCategory: newName before: aCategory	^ self organization addCategory: newName before: aCategory ! !!Trait method!copyAllCategoriesFrom: aClass 	"Specify that the categories of messages for the receiver include all of 	those found in the class, aClass. Install each of the messages found in 	these categories into the method dictionary of the receiver, classified 	under the appropriate categories."	aClass organization categories do: [:cat | self copyCategory: cat from: aClass]! !!Trait method!numberOfMethods	"count all methods that are local (not comming from a trait)"	| num |	num := self localMethods size.	^ self isMeta  		ifTrue: [ num ]		ifFalse: [ num + self class numberOfMethods ] ! !!Trait method!variableWordSubclass: className uses: aTraitCompositionOrArray instanceVariableNames: instVarNames	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	^ self variableWordSubclass: className		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: cat! !!Trait method!superclass: sup methodDict: md format: ft name: nm organization: org instVarNames: nilOrArray classPool: pool sharedPools: poolSet 	"Answer an instance of me, a new class, using the arguments of the 	message as the needed information.	Must only be sent to a new instance; else we would need Object flushCache."	self superclass: sup.	self methodDict: md.	self setFormat: ft.	self setName: nm.	self instanceVariables: nilOrArray.	self classPool: pool.	self sharedPools: poolSet.	self organization: org.! !!Trait method!usesLocalPoolVarNamed: aString	"Return whether the receiver uses a pool variable named: aString which is defined locally"		self hasSharedPools		ifTrue: [ self sharedPools do: [:each | (each usesClassVarNamed: aString) 												ifTrue: [ ^true ]]]		ifFalse: [ ^false ].	^false! !!Trait method!hasSharedPools	"Returns whether the receiver uses shared pools directly (Does not take into account that it may inherit shared pool uses."	^ self sharedPools notEmpty! !!Trait method!variableSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have indexable pointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				variableSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!declare: varString 	"Declare class variables common to all instances. Answer whether 	recompilation is advisable."	| newVars conflicts |	newVars :=  (varString subStrings: ' ') collect: [:x | x asSymbol].	conflicts := false.		(self classPool keys reject: [:x | newVars includes: x]) do: [:var | self removeClassVarNamed: var].		(newVars reject: [:var | self classPool includesKey: var]) do: [:var | "adding"			"check if new vars defined elsewhere"			(self innerBindingOf: var) 				ifNotNil: [(DuplicatedVariableError new) variable: var;						signal: var , ' is defined elsewhere'.					conflicts := true]].	newVars notEmpty		ifTrue: 			[self classPool: self classPool.			"in case it was nil"			newVars do: [:var | self classPool declare: var from: Undeclared]].	^conflicts! !!Trait method!subclass: aName uses: aTraitComposition with: aBlock 	"Define (or redefine) a subclass by evaluating a block closure. 	Note (MartinDias): 		This is a workaround for the subclass creation API when a trait is specified. 		To fix it well, in Pharo 4, a bit deeper refactoring is required, delegating this responsibility		to SlotClassBuilder."	^ self environment 		at: aName		ifPresent: [ :old | 			| copyOfOld newClass |			copyOfOld := old copy.			"Modify the class and set the new trait composition"			newClass := aBlock value. 			newClass setTraitComposition: aTraitComposition asTraitComposition.			"Announce that the definition changed when there is a new trait composution. 			Note: It may be a re-announce if there was other change in the class definition, 			e.g. an instace variable added."			(newClass traitComposition syntacticallyEquals: copyOfOld traitComposition) ifFalse: [ 				SystemAnnouncer uniqueInstance 					classDefinitionChangedFrom: copyOfOld 					to: newClass ].			newClass ]		ifAbsent: [			"Create the class and set the trait composition"			aBlock value				setTraitComposition: aTraitComposition asTraitComposition;				yourself ].! !!Trait method!applyChangesOfNewTraitCompositionReplacing: oldComposition	| changedSelectors |	changedSelectors := super applyChangesOfNewTraitCompositionReplacing: oldComposition.	self classSide noteNewBaseTraitCompositionApplied: self traitComposition.	^ changedSelectors! !!Trait method!criticTheNonMetaclassClass	"Return the class of the receiver for the critic browser. This behavior may be folded later by changing the name of this method or using another one."		^ self ! !!Trait method!variableByteSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver) in which the subclass is to 	have indexable byte-sized nonpointer variables."	^self classBuilder		superclass: self		variableByteSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!hasClassSide	^self classSide notNil.! !!Trait method!removeFromChanges	"References to the receiver, a class, and its metaclass should no longer be included in the system ChangeSet."	ChangeSet current removeClassAndMetaClassChanges: self! !!Trait method!isValidTraitName: aSymbol	^(aSymbol isEmptyOrNil		or: [aSymbol first isLetter not		or: [aSymbol anySatisfy: [:character | character isAlphaNumeric not]]]) not! !!Trait method!removeFromSystem	"Forget the receiver from the Smalltalk global dictionary. Any existing 	instances will refer to an obsolete version of the receiver."	self removeFromSystem: true.! !!Trait method!removeSubclass: aSubclass 	"If the argument, aSubclass, is one of the receiver's subclasses, remove it."	self subclasses == nil ifFalse:		[self subclasses:  (self subclasses copyWithout: aSubclass).		self subclasses isEmpty ifTrue: [self subclasses: nil]].! !!Trait method!binding       "Answer a binding for the receiver, sharing if possible"      | binding |	binding := self environment associationAt: self name ifAbsent: [nil -> self].       ^binding value == self ifTrue: [binding] ifFalse: [nil -> self]! !!Trait method!weakSubclass: className uses: aTraitCompositionOrArray instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "		^ self weakSubclass: className		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames 		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!fileOut	"Create a file whose name is the name of the receiver with '.st' as the 	extension, and file a description of the receiver onto it."		| internalStream |	internalStream := (String new: 100) writeStream.	internalStream header; timeStamp.	self hasSharedPools ifTrue: [		self shouldFileOutPools			ifTrue: [self fileOutSharedPoolsOn: internalStream]].	self fileOutOn: internalStream moveSource: false toFile: 0.	internalStream trailer.	FileStream writeSourceCodeFrom: internalStream baseName: self name isSt: true! !!Trait method!usesPoolVarNamed: aString	"Return whether the receiver has a pool variable named: aString, taking into account superclasses too"		self allSharedPools do: [:each | (each usesClassVarNamed: aString) ifTrue: [^true]].	^false! !!Trait method!subclass: t uses: aTraitComposition 	| cls |	cls := self				subclass: t				instanceVariableNames: ''				classVariableNames: ''				poolDictionaries: ''				category: 'Unclassified'.	cls setTraitComposition: aTraitComposition asTraitComposition.	^ cls! !!Trait method!hasMethods	"Answer a Boolean according to whether any methods are defined for the 	receiver (includes whether there are methods defined in the receiver's 	metaclass)."	^super hasMethods or: [self class hasMethods]! !!Trait method!subclass: aSubclassSymbol instanceVariableNames: instVarNames classVariableNames: classVarNames category: aCategorySymbol	"Added to allow for a simplified subclass creation experience. "	^ self		subclass: aSubclassSymbol		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: aCategorySymbol! !!Trait method!weakSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a subclass of an existing class (the receiver) in which the subclass is to have weak indexable pointer variables."	^self classBuilder		superclass: self		weakSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!superclass: aClass methodDictionary: mDict format: fmt	"Basic initialization of the receiver"	super superclass: aClass methodDictionary: mDict format: fmt.	self subclasses: nil. ! !!Trait method!subclassesDo: aBlock 	"Evaluate the argument, aBlock, for each of the receiver's immediate subclasses."	self subclasses size == 0 		ifFalse:[self subclasses do: aBlock]! !!Trait method!newSubclass	| i className |	i := 1.	[className := (self name , i printString) asSymbol.	 self environment includesKey: className]		whileTrue: [i := i + 1].	^ self subclass: className		instanceVariableNames: ''		classVariableNames: ''		poolDictionaries: ''		category: 'Unclassified'"Point newSubclass new"! !!Trait method!fileOutInitializerOn: aStream	^self class fileOutInitializerOn: aStream! !!Trait method!setName: aSymbol andRegisterInCategory: categorySymbol environment: aSystemDictionary	(self isValidTraitName: aSymbol) ifFalse: [TraitException signal: 'Invalid trait name'].		(self environment == aSystemDictionary		and: [self name = aSymbol			and: [self category = categorySymbol]]) ifTrue: [^self].			((aSystemDictionary includes: aSymbol) and: [(aSystemDictionary at: aSymbol) ~~ self])		ifTrue: [TraitException signal: 'The name ''' , aSymbol , ''' is already used'].	(self environment notNil and: [self name notNil and: [self name ~= aSymbol]]) ifTrue: [		self environment renameClass: self as: aSymbol].		self name: aSymbol.	self environment: aSystemDictionary.		self environment at: self name put: self.	self environment organization classify: self name under: categorySymbol.	^ true! !!Trait method!isAnonymous	^self getName isNil! !!Trait method!addSharedPool: aSharedPool 	"Add the argument, aSharedPool, as one of the receiver's shared pools. 	Create an error if the shared pool is already one of the pools.	This method will work with shared pools that are plain Dictionaries or thenewer SharedPool subclasses"	(self sharedPools includes: aSharedPool)		ifTrue: [^self error: 'This is already in my shared pool list'].	self sharedPools == nil		ifTrue: [self sharedPools: (OrderedCollection with: aSharedPool)]		ifFalse: [self sharedPools add: aSharedPool]! !!Trait method!unload	"Sent when a the class is removed.  Does nothing, but may be overridden by (class-side) subclasses."! !!Trait method!asRingDefinitionWithMethods: methodsBoolean withSuperclasses: supersBoolean withSubclasses: subsBoolean withPackages: packsBoolean	"Retrieves a ring class/trait based on the receiver.	The data loaded in the class/trait (active methods, superclasses, subclasses and packages) is requested by the users.	As it may need to traverse hierarchies for retrieving super and subclasses a ring slice is created as the container for every class, method and package.	To retrieve the slice:  aRGClass environment "	| rgClass rgSlice  rgPackageKeys |		rgSlice := RGSlice named: #fromImage.	packsBoolean ifTrue: [ 		rgPackageKeys := rgSlice loadPackagesFromImage ].	rgClass := self asRingDefinitionWithMethods: methodsBoolean withSuperclasses: supersBoolean withSubclasses: subsBoolean withPackageKeys: rgPackageKeys in: rgSlice.	rgSlice cleanEmptyPackages.	rgSlice loadTraitUsers.			^ rgClass! !!Trait method!subclass: t	^ self subclass: t instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Unclassified' ! !!Trait method!hasClassVarNamed: aString	"Return whether the receiver has a class variables (shared variables among its class and subclasses) named: aString"		^ self classVarNames includes: aString! !!Trait method!addClassVarNamed: aString 	"Add the argument, aString, as a class variable of the receiver.	Signal an error if the first character of aString is not capitalized,	or if it is already a variable named in the class."	| symbol oldState |	oldState := self copy.	aString first canBeGlobalVarInitial		ifFalse: [^self error: aString, ' class variable name should be capitalized; proceed to include anyway.'].	symbol := aString asSymbol.	self withAllSubclasses do: 		[:subclass | 		(subclass bindingOf: symbol) ifNotNil:[			^ self error: aString 				, ' is already used as a variable name in class ' 				, subclass name]].	(self classPool includesKey: symbol) ifFalse: 		["Pick up any refs in Undeclared"		self classPool declare: symbol from: Undeclared.		SystemAnnouncer uniqueInstance classDefinitionChangedFrom: oldState to: self]! !!Trait method!duplicateClassWithNewName: aSymbol	| copysName class newDefinition |	copysName := aSymbol asSymbol.	copysName = self name		ifTrue: [ ^ self ].	(Smalltalk globals includesKey: copysName)		ifTrue: [ ^ self error: copysName , ' already exists' ].	newDefinition := self definition copyReplaceAll: '#' , self name asString with: '#' , copysName asString.	class := self class compiler source: newDefinition; logged: true; evaluate.	class classSide instanceVariableNames: self classSide instanceVariablesString.	class copyAllCategoriesFrom: self.	class class copyAllCategoriesFrom: self class.	^ class! !!Trait method!weakSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have weak indexable pointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				weakSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!variableSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver) in which the subclass is to 	have indexable pointer variables."	^self classBuilder		superclass: self		variableSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!subclass: aTraitName uses: aTraitCompositionOrArray instanceVariableNames: instVarNames classVariableNames: classVarNames category: cat 	^ self		subclass: aTraitName		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: cat ! !!Trait method!rename: aString 	"The new name of the receiver is the argument, aString."	| oldName newName |	(newName := aString asSymbol) = (oldName := self name)		ifTrue: [^ self].	(self environment includesKey: newName)		ifTrue: [^ self error: newName , ' already exists'].	self setName: newName.	self environment renameClass: self from: oldName.	(Undeclared includesKey: newName)		ifTrue: [self inform: 'There are references to, ' , aString printString , 'from Undeclared. Check them after this change.'].! !!Trait method!classPoolFrom: aClass	"share the classPool with aClass."		self classPool: aClass classPool.! !!Trait method!isObsolete	"Return true if the receiver is obsolete."	^(self environment at: self name ifAbsent: [nil]) ~~ self! !!Trait method!variableByteSubclass: className uses: aTraitCompositionOrArray instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat		"Added to allow for a simplified subclass creation experience. "		^ self variableByteSubclass: className		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!fileOutPool: aPool onFileStream: aFileStream 	| aPoolName |	(aPool  isKindOf: SharedPool class) ifTrue:[^self notify: 'we do not fileout SharedPool type shared pools for now'].	aPoolName := self environment keyAtIdentityValue: aPool.	self crTrace: aPoolName.	aFileStream nextPutAll: 'Transcript show: ''' , aPoolName , '''; cr!!'; cr.	aFileStream nextPutAll: 'Smalltalk at: #' , aPoolName , ' put: Dictionary new!!'; cr.	aPool keys asSortedCollection do: [ :aKey | | aValue |		aValue := aPool at: aKey.		aFileStream nextPutAll: aPoolName , ' at: #''' , aKey asString , '''', ' put:  '.		(aValue isKindOf: Number)			ifTrue: [aValue printOn: aFileStream]			ifFalse: [aFileStream nextPutAll: '('.					aValue printOn: aFileStream.					aFileStream nextPutAll: ')'].		aFileStream nextPutAll: '!!'; cr].	aFileStream cr! !!Trait method!classVarNamed: aString	"Answer the content of the Class Variable"	^self classPool at: aString asSymbol ifAbsent: [self error: 'no such lass var']! !!Trait method!variableSubclass: aClassName uses: aTraitCompositionOrArray instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "		^ self variableSubclass: aClassName 		uses: aTraitCompositionOrArray		instanceVariableNames: instVarNames  		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!fileOutSharedPoolsOn: aFileStream	"file out the shared pools of this class after prompting the user about each pool"	| poolsToFileOut |	poolsToFileOut := self sharedPools select: 		[:aPool | (self shouldFileOutPool: (self environment keyAtIdentityValue: aPool))].	poolsToFileOut do: [:aPool | self fileOutPool: aPool onFileStream: aFileStream].	! !!Trait method!classVarNames	"Answer a collection of the names of the class variables defined in the receiver."	^self classPool keys asArray sort! !!Trait method!asFullRingDefinition	"A behavior is converted to a ring class including its variables, methods, direct superclass, direct subclasses and the package in which is loaded.	Active methods are generated and each knows its package as well.	Note that for its direct superclass and subclasses no full definitions are requested. If you need to traverse hierarchies use #asRingDefinitionWithMethods:withSuperclasses:withSubclasses:withPackages:"		| rgClass rgSuper rgSub rgMethod packageKeys |	rgClass:= self asRingDefinition.	rgClass package: (RGContainer packageOfClass: rgClass).		self superclass notNil 		ifTrue: [ 			rgSuper := self superclass asRingDefinition.			rgClass superclass: rgSuper ]		ifFalse: [  			self isTrait ifTrue: [ 				rgSuper := Trait asRingDefinition.				rgClass superclass: rgSuper. ]			].	self subclasses do:[ :each |		rgSub := each asRingDefinition.		rgSub superclass: rgClass ].		packageKeys := RGContainer packageKeys.	self methodsDo:[ :mth|  			rgMethod := mth asActiveRingDefinition.			rgClass addMethod: rgMethod.			rgMethod package: (RGContainer packageOfMethod: rgMethod using: packageKeys) ].	self theMetaClass methodsDo:[ :mth|  			rgMethod := mth asActiveRingDefinition.			rgClass theMetaClass addMethod: rgMethod.			rgMethod package: (RGContainer packageOfMethod: rgMethod using: packageKeys) ].		^ rgClass! !!Trait method!removeClassVarNamed: aString	"Remove the class variable whose name is the argument, aString, from     the names defined in the receiver, a class. Create an error notification if     aString is not a class variable or if it is still being used in the code of     the class."	| aSymbol |	aSymbol := aString asSymbol.	(self classPool includesKey: aSymbol)		ifFalse: [ ^ self error: aString , ' is not a class variable' ].	self withAllSubclasses		do: [ :subclass | 			(Array with: subclass with: subclass class)				do: [ :classOrMeta | 					(classOrMeta whichSelectorsReferTo: (self classPool associationAt: aSymbol)) isEmpty						ifFalse: [ 							InMidstOfFileinNotification signal								ifTrue: [ 									self crTrace: self name , ' (' , aString , ' is Undeclared) '.									^ Undeclared declare: aSymbol from: self classPool ]								ifFalse: [ 									(self										confirm:											(aString , ' is still used in code of class ' , classOrMeta name , '.\Is it okay to move it to Undeclared?') withCRs)										ifTrue: [ ^ Undeclared declare: aSymbol from: self classPool ]										ifFalse: [ ^ self ] ] ] ] ].	self classPool removeKey: aSymbol.	self classPool isEmpty		ifTrue: [ self classPool: nil ]! !!Trait method!externalName	"Answer a name by which the receiver can be known."	^ self name! !!Trait method!subclass: t instanceVariableNames: ins	^ self subclass: t instanceVariableNames: ins classVariableNames: '' poolDictionaries: '' category: 'Unclassified' ! !!Trait method!category	"Answer the system organization category for the receiver. First check whether the	category name stored in the ivar is still correct and only if this fails look it up	(latter is much more expensive)"	| result |	self basicCategory ifNotNil: [ :symbol |		((self environment organization listAtCategoryNamed: symbol) includes: self name)			ifTrue: [ ^symbol ] ].	self basicCategory: (result := self environment organization categoryOfElement: self name).	^result! !!Trait method!possibleVariablesFor: misspelled continuedFrom: oldResults	| results |	results := misspelled correctAgainstDictionary: self classPool continuedFrom: oldResults.	self sharedPools do: [:pool | 		results := misspelled correctAgainstDictionary: pool continuedFrom: results ].	self superclass == nil		ifTrue: 			[ ^ misspelled correctAgainstDictionary: self environment continuedFrom: results ]		ifFalse:			[ ^ self superclass possibleVariablesFor: misspelled continuedFrom: results ]! !!Trait method!innerBindingOf: aSymbol	"Answer the binding of some variable resolved in the scope of the receiver, or one of its superclass	but do not look up binding in receiver's environment.	Use #bindingOf: for looking up the variable binding in a full scope, including receiver's environment"	"First look in classVar dictionary."	(self classPool bindingOf: aSymbol) ifNotNil: [:binding | ^binding].	"Next look in shared pools."	self sharedPools do: [:pool | (pool bindingOf: aSymbol) ifNotNil: [:binding | ^binding]].	self superclass ifNotNil: [:supercl | ^ supercl innerBindingOf: aSymbol].		^ nil! !!Trait method!bindingOf: varName	"Answer the binding of some variable resolved in the scope of the receiver, or nil	if variable with such name is not defined"	"The lookup recurses up to superclasses looking inside their class and shared pools,	but not the environment, since two classes, even if they have ancestry relationship,	could use different environments.	That's why we doing an environment lookup only as a last step of symbol lookup 	and taking only the environment of receiver only, not any of it's superclass(es) "		| aSymbol |	aSymbol := varName asSymbol.	^ (self innerBindingOf: aSymbol) ifNil: [		 self environment bindingOf: aSymbol	]! !!Trait method!compileAll	super compileAll.	self class compileAll.! !!Trait method!shouldFileOutPools	"respond with true if the user wants to file out the shared pools"	^self confirm: 'FileOut selected sharedPools?'! !!Trait method!variableWordSubclass: t instanceVariableNames: f 	classVariableNames: d poolDictionaries: s category: cat	"This is the standard initialization message for creating a new class as a 	subclass of an existing class (the receiver) in which the subclass is to 	have indexable word-sized nonpointer variables."	^self classBuilder		superclass: self		variableWordSubclass: t		instanceVariableNames: f		classVariableNames: d		poolDictionaries: s		category: cat! !!Trait method!classBuilder		"Answer the object responsible of creating subclasses of myself in the system."			^ Smalltalk classBuilder! !!Trait method!name: aString traitComposition: aComposition methodDict: aMethodDict localSelectors: aSet organization: aClassOrganization	"Used by copy"		self name: aString.	self localSelectors: aSet.	self methodDict: aMethodDict.	self traitComposition: aComposition.	self organization: aClassOrganization! !!Trait method!variableWordSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have indexable word-sized nonpointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				variableWordSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!compileAllFrom: oldClass	"Recompile all the methods in the receiver's method dictionary (not the	subclasses). Also recompile the methods in the metaclass."	super compileAllFrom: oldClass.	self class compileAllFrom: oldClass class! !!Trait method!renameSilently: aName	 [ self rename: aName] fuelValueWithoutNotifications! !!Trait method!reformatAll 	"Reformat all methods in this class.	Leaves old code accessible to version browsing"	super reformatAll.		"me..."	self class reformatAll	"...and my metaclass"! !!Trait method!removeFromSystem: logged	"Forget the receiver from the Smalltalk global dictionary. Any existing 	instances will refer to an obsolete version of the receiver."		"keep the class name and category for triggering the system change message. If we wait to long, then we get obsolete information which is not what we want."	"tell class to deactivate and unload itself-- two separate events in the module system"	self unload.	self users do: [ :user | user removeFromComposition: self ].	self superclass ifNotNil:		["If we have no superclass there's nothing to be remembered"		self superclass addObsoleteSubclass: self].	self environment forgetClass: self logged: logged.	self obsolete.! !!Trait method!shouldFileOutPool: aPoolName	"respond with true if the user wants to file out aPoolName"	^self confirm: ('FileOut the sharedPool ', aPoolName, '?')! !!Trait method!allSharedPools	"Answer an ordered collection of the pools the receiver shares, including those defined  in the superclasses of the receiver."	| aSet | 	^self superclass == nil		ifTrue: [self sharedPools copy]		ifFalse: [aSet := self superclass allSharedPools.			aSet addAll: self sharedPools.			aSet]! !!Trait method!sharing: poolString 	"Set up sharedPools. Answer whether recompilation is advisable."	| oldPools |	oldPools := self sharedPools.	self sharedPools: OrderedCollection new.	(poolString subStrings: ' ') do: 		[:poolName | 		self sharedPools add: (self environment at: poolName asSymbol ifAbsent:[			(self confirm: 'The pool dictionary ', poolName,' does not exist.',						'\Do you want it automatically created?' withCRs)				ifTrue:[self environment at: poolName asSymbol put: Dictionary new]				ifFalse:[^self error: poolName,' does not exist']])].	self sharedPools isEmpty ifTrue: [self sharedPools: nil].	oldPools do: [:pool |				| found |				found := self sharedPools anySatisfy: [:p | p == pool].				found ifFalse: [^ true "A pool got deleted"]].	^ false! !!Trait method!removeInstVarNamed: aString 	"Remove the argument, aString, as one of the receiver's instance variables."	| newInstVarString |	(self instVarNames includes: aString)		ifFalse: [self error: aString , ' is not one of my instance variables'].	newInstVarString := ''.	(self instVarNames copyWithout: aString) do: 		[:varName | newInstVarString := newInstVarString , ' ' , varName].	^self classBuilder		name: self name		inEnvironment: self environment		subclassOf: self superclass		type: self typeOfClass		instanceVariableNames: newInstVarString		classVariableNames: self classVariablesString		poolDictionaries: self sharedPoolsString		category: self category! !!Trait method!removeFromSystemUnlogged	"Forget the receiver from the Smalltalk global dictionary. Any existing instances will refer to an obsolete version of the receiver.  Do not log the removal either to the current change set nor to the system changes log"	^self removeFromSystem: false! !!Trait method!sharedPoolOfVarNamed: aString	"Returns the SharedPool or nil from which the pool variable named aString is coming from."		 ^ self sharedPools 			detect: [:each | each usesClassVarNamed: aString ]			ifNone: [						self superclass == nil							ifTrue: [nil]							ifFalse: [self superclass sharedPoolOfVarNamed: aString]						]! !!Trait method!ensureClassPool	^self classPool.! !!Trait method!category: aString 	"Categorize the receiver under the system category, aString, removing it from 	any previous categorization."	| oldCategory |	oldCategory := self basicCategory.	aString isString		ifTrue: [			self basicCategory: aString asSymbol.			self environment organization classify: self name under: self basicCategory ]		ifFalse: [self errorCategoryName].	SystemAnnouncer uniqueInstance		class: self recategorizedFrom: oldCategory to: self basicCategory! !!Trait method!asHelpTopic	^SystemReference forClass: self! !!Trait method!variableByteSubclass: className instanceVariableNames: instvarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	^self variableByteSubclass: className		instanceVariableNames: instvarNames		classVariableNames: classVarNames		poolDictionaries: ''		category: cat! !!Trait method!removeSharedPool: aDictionary 	"Remove the pool dictionary, aDictionary, as one of the receiver's pool 	dictionaries. Create an error notification if the dictionary is not one of 	the pools.	: Note that it removes the wrong one if there are two empty Dictionaries in the list."	| satisfiedSet workingSet aSubclass |	(self sharedPools includes: aDictionary)		ifFalse: [^self error: 'the dictionary is not in my pool'].	"first see if it is declared in a superclass in which case we can remove it."	(self selectSuperclasses: [:class | class sharedPools includes: aDictionary]) isEmpty		ifFalse: [self sharedPools remove: aDictionary.				self sharedPools isEmpty ifTrue: [self sharedPools: nil].				^self]. 	"second get all the subclasses that reference aDictionary through me rather than a 	superclass that is one of my subclasses."	workingSet := self subclasses asOrderedCollection.	satisfiedSet := Set new.	[workingSet isEmpty] whileFalse:		[aSubclass := workingSet removeFirst.		(aSubclass sharedPools includes: aDictionary)			ifFalse: 				[satisfiedSet add: aSubclass.				workingSet addAll: aSubclass subclasses]].	"for each of these, see if they refer to any of the variables in aDictionary because 	if they do, we can not remove the dictionary."	satisfiedSet add: self.	satisfiedSet do: 		[:sub | 		aDictionary associationsDo: 			[:aGlobal | 			(sub whichSelectorsReferTo: aGlobal) isEmpty 				ifFalse: [^self error: aGlobal key 								, ' is still used in code of class '								, sub name]]].	self sharedPools remove: aDictionary.	self sharedPools isEmpty ifTrue: [self sharedPools: nil]! !!Trait method!isClassOrTrait	^true! !!Trait method!allClassVarNames	"Answer a Set of the names of the receiver's class variables, including those	defined in the superclasses of the receiver."	| aSet |	self superclass == nil		ifTrue: 			[^self classVarNames asSet]  "This is the keys so it is a new Set."		ifFalse: 			[aSet := self superclass allClassVarNames.			aSet addAll: self classVarNames.			^aSet]! !!Trait method!subclass: aName uses: aTraitCompositionOrArray instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	^ self		subclass: aName		uses: aTraitCompositionOrArray		with: [ 			self				subclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!classVarNamed: aString put: anObject	"Store anObject in the class variable."		| symbol |	symbol := aString asSymbol.	(self classPool includesKey: symbol) ifFalse:  [^self error: 'no such lass var'].	self classPool at: symbol put: anObject.! !!Trait method!weakSubclass: className instanceVariableNames: instVarNames 	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "		^ self weakSubclass: className 		instanceVariableNames: instVarNames 		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!variableWordSubclass: className instanceVariableNames: instVarNames	classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	 	^ self variableWordSubclass: className		instanceVariableNames: instVarNames  		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!usesClassVarNamed: aString	"Return whether the receiver or its superclasses have a class variable named: aString"		^ self allClassVarNames includes: aString! !!Trait method!obsolete	"Change the receiver and all of its subclasses to an obsolete class."	self == Object 		ifTrue: [^self error: 'Object is NOT obsolete'].	self setName: 'AnObsolete' , self name.	Object class instSize + 1 to: self classSide instSize do:		[:i | self instVarAt: i put: nil]. "Store nil over class instVars."	self classPool: nil.	self sharedPools: nil.	self hasClassSide ifTrue: [ self theMetaClass obsolete].	super obsolete.! !!Trait method!isSelfEvaluating	^self isObsolete not! !!Trait method!variableSubclass: className instanceVariableNames: instVarNames classVariableNames: classVarNames category: cat	"Added to allow for a simplified subclass creation experience. "	^ self variableSubclass: className		instanceVariableNames: instVarNames 		classVariableNames: classVarNames 		poolDictionaries: ''		category: cat! !!Trait method!hasAbstractMethods	"Tells whether the receiver locally defines an abstract method, i.e., a method sending subclassResponsibility"	^ super hasAbstractMethods or: [self class hasAbstractMethods]! !!Trait method!fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex 	"File a description of the receiver on aFileStream. If the boolean argument,	moveSource, is true, then set the trailing bytes to the position of aFileStream and	to fileIndex in order to indicate where to find the source code."	^self fileOutOn: aFileStream moveSource: moveSource toFile: fileIndex initializing: true! !!Trait method!variableByteSubclass: aName uses: aTraitComposition instanceVariableNames: someInstanceVariableNames classVariableNames: someClassVariableNames poolDictionaries: someSharedPoolNames category: aCategory	"Creates a new class as a subclass of an existing class (the receiver) 	in which the subclass is to have indexable byte-sized nonpointer variables."		^ self		subclass: aName		uses: aTraitComposition		with: [ 			self				variableByteSubclass: aName				instanceVariableNames: someInstanceVariableNames				classVariableNames: someClassVariableNames				poolDictionaries: someSharedPoolNames				category: aCategory ]! !!Trait method!superclassOrder: classes	"Arrange the classes in the collection, classes, in superclass order so the 	classes can be properly filed in. Do it in sets instead of ordered collections."	| all unprocessedClasses cache |	unprocessedClasses := classes asSet. 	cache := Dictionary new.	all := OrderedCollection new: unprocessedClasses size.	unprocessedClasses size timesRepeat: [ |nextClass|		nextClass := unprocessedClasses detect: [:aClass | self hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache].		all add: nextClass.		unprocessedClasses remove: nextClass].	^all! !!Trait method!template: aSystemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class."	^ self templateForSubclassOf: Object name category: aSystemCategoryName ! !!Trait method!templateForSubclassOf: priorClassName category: systemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class, given that the class previously looked at was as given"	^priorClassName asString, ' subclass: #NameOfSubclass	instanceVariableNames: ''''	classVariableNames: ''''	poolDictionaries: ''''	category: ''' , systemCategoryName asString , ''''! !!Trait method!allSuperclassesFor: aClass cache: cache 		^ cache at: aClass ifAbsentPut: [aClass allSuperclasses asArray]! !!Trait method!hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache 	^ (self hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache) and: [		aClass isMeta not or: [			self hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache]] ! !!Trait method!hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache 	^ (unprocessedClasses includesAnyOf: (self allSuperclassesFor: aClass cache: cache)) not	! !!Trait method!fileOutPool: aString	"file out the global pool named aString"		| internalStream |	internalStream := (String new: 1000) writeStream.	self new fileOutPool: (self environment at: aString asSymbol) onFileStream: internalStream.	FileStream writeSourceCodeFrom: internalStream baseName: aString isSt: true.! !!Trait method!rootsOfTheWorld	"return all classes that have a nil superclass"		^(Smalltalk globals select: [:each | each isBehavior and: [each superclass isNil]]) asOrderedCollection! !!Trait method!doesNotIncludeInstanceOrSuperclassesFor: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!superclassOrder: classes	"Arrange the classes in the collection, classes, in superclass order so the 	classes can be properly filed in. Do it in sets instead of ordered collections."	| all unprocessedClasses cache |	unprocessedClasses := classes asSet. 	cache := Dictionary new.	all := OrderedCollection new: unprocessedClasses size.	unprocessedClasses size timesRepeat: [ |nextClass|		nextClass := unprocessedClasses detect: [:aClass | self hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache].		all add: nextClass.		unprocessedClasses remove: nextClass].	^all! !!Trait method!template: aSystemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class."	^ self templateForSubclassOf: Object name category: aSystemCategoryName ! !!Trait method!templateForSubclassOf: priorClassName category: systemCategoryName 	"Answer an expression that can be edited and evaluated in order to define a new class, given that the class previously looked at was as given"	^priorClassName asString, ' subclass: #NameOfSubclass	instanceVariableNames: ''''	classVariableNames: ''''	poolDictionaries: ''''	category: ''' , systemCategoryName asString , ''''! !!Trait method!allSuperclassesFor: aClass cache: cache 		^ cache at: aClass ifAbsentPut: [aClass allSuperclasses asArray]! !!Trait method!hasNoDependenciesFor: aClass in: unprocessedClasses cache: cache 	^ (self hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache) and: [		aClass isMeta not or: [			self hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache]] ! !!Trait method!hasNoSuperclassesOf: aClass in: unprocessedClasses cache: cache 	^ (unprocessedClasses includesAnyOf: (self allSuperclassesFor: aClass cache: cache)) not	! !!Trait method!fileOutPool: aString	"file out the global pool named aString"		| internalStream |	internalStream := (String new: 1000) writeStream.	self new fileOutPool: (self environment at: aString asSymbol) onFileStream: internalStream.	FileStream writeSourceCodeFrom: internalStream baseName: aString isSt: true.! !!Trait method!rootsOfTheWorld	"return all classes that have a nil superclass"		^(Smalltalk globals select: [:each | each isBehavior and: [each superclass isNil]]) asOrderedCollection! !!Trait method!doesNotIncludeInstanceOrSuperclassesFor: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!hasNoDependenciesForMetaclass: aClass in: unprocessedClasses cache: cache 	| soleInstance |	soleInstance := aClass soleInstance.	^ (unprocessedClasses includes: soleInstance) not and: [				self hasNoSuperclassesOf: soleInstance in: unprocessedClasses cache: cache]! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!nbLibraryNameOrHandle	^ CairoLibraryLoader getLibraryHandle! !!Trait method!canZapMethodDictionary	"Return true if it is safe to zap the method dictionary on #obsolete"	self soleInstance == nil		ifTrue:[^true]		ifFalse:[^self soleInstance canZapMethodDictionary]! !!Trait method!wantsChangeSetLogging	"Answer whether code submitted for the receiver should be remembered by the changeSet mechanism.The metaclass follows the rule of the class itself."	^ self theNonMetaClass wantsChangeSetLogging! !!Trait method!fileOutInitializerOn: aStream	(self includesSelector: #initialize) ifTrue: 		[aStream cr.		aStream nextChunkPut: self soleInstance name , ' initialize'].! !!Trait method!addObsoleteSubclass: aClass	"Do nothing."! !!Trait method!asFullRingDefinition	^ self theNonMetaClass asFullRingDefinition theMetaClass! !!Trait method!isSelfEvaluating	^self isObsolete not! !!Trait method!uses: aTraitCompositionOrArray	| copyOfOldTrait newComposition |	copyOfOldTrait := self copy.	newComposition := aTraitCompositionOrArray asTraitComposition.	self assertConsistantCompositionsForNew: newComposition.	self setTraitComposition: newComposition.	SystemAnnouncer uniqueInstance		traitDefinitionChangedFrom: copyOfOldTrait to: self.! !!Trait method!isMeta	^ true! !!Trait method!removeSubclass: aClass	"Do nothing."! !!Trait method!possibleVariablesFor: misspelled continuedFrom: oldResults	^ self theNonMetaClass possibleVariablesFor: misspelled continuedFrom: oldResults! !!Trait method!subclasses	"Answer the receiver's subclasses."	self theNonMetaClass == nil ifTrue:[^#()].	^self theNonMetaClass subclasses 		select:[:aSubclass| aSubclass isMeta not] 		thenCollect:[:aSubclass| aSubclass class]	"Metaclass allInstancesDo:		[:m | Compiler evaluate: 'subclasses:=nil' for: m logged: false]"! !!Trait method!nonTrivial 	"Answer whether the receiver has any methods or instance variables."	^ self instVarNames notEmpty or: [self hasMethods or: [self hasTraitComposition]]! !!Trait method!uses: aTraitCompositionOrArray instanceVariableNames: instVarString 	| newComposition newMetaClass copyOfOldMetaClass |		copyOfOldMetaClass := self copy.	newMetaClass := self instanceVariableNames: instVarString.		newComposition := aTraitCompositionOrArray asTraitComposition.	newMetaClass assertConsistantCompositionsForNew: newComposition.	newMetaClass setTraitComposition: newComposition.		SystemAnnouncer uniqueInstance		classDefinitionChangedFrom: copyOfOldMetaClass to: newMetaClass! !!Trait method!asRingDefinition	^ self theNonMetaClass asRingDefinition theMetaClass! !!Trait method!noteNewBaseTraitCompositionApplied: aTraitComposition	"The argument is the new trait composition of my base trait - add	the new traits or remove non existing traits on my class side composition.	(Each class trait in my composition has its base trait on the instance side	of the composition - manually added traits to the class side are always 	base traits.)"		| newComposition traitsFromInstanceSide |	traitsFromInstanceSide := self traitComposition traits		select: [:each | each isClassTrait]		thenCollect: [:each | each baseTrait].			newComposition := self traitComposition copyTraitExpression.	(traitsFromInstanceSide copyWithoutAll: aTraitComposition traits) do: [:each |		newComposition removeFromComposition: each classTrait].	(aTraitComposition traits copyWithoutAll: traitsFromInstanceSide) do: [:each |		newComposition add:  (each classTrait)].	self setTraitComposition: newComposition! !!Trait method!bindingOf: varName	^self theNonMetaClass classBindingOf: varName! !!Trait method!addSubclass: aClass	"Do nothing."! !!Trait method!subclassesDo: aBlock	"Evaluate aBlock for each of the receiver's immediate subclasses."	self theNonMetaClass subclassesDo:[:aSubclass|		"The following test is for Class class which has to exclude		the Metaclasses being subclasses of Class."		aSubclass isMeta ifFalse:[aBlock value: aSubclass class]].! !!Trait method!removeInstVarNamed: aString 	"Remove the argument, aString, as one of the receiver's instance variables."	| newArray newString |	(self instVarNames includes: aString)		ifFalse: [self error: aString , ' is not one of my instance variables'].	newArray := self instVarNames copyWithout: aString.	newString := ''.	newArray do: [:aString2 | newString := aString2 , ' ' , newString].	self instanceVariableNames: newString! !!Trait method!addInstVarNamed: aString 	"Add the argument, aString, as one of the receiver's instance variables."	| fullString |	fullString := String streamContents: [:strm |		self instVarNames do: [:aString2 | strm nextPutAll: aString2; space].		strm nextPutAll: aString].	self instanceVariableNames: fullString! !!Trait method!criticTheNonMetaclassClass	^self theNonMetaClass ! !!Trait method!classPool	"Answer the dictionary of class variables."	^self theNonMetaClass classPool! !!Trait method!sharedPools	^OrderedCollection new.! !!Trait method!isObsolete	"Return true if the receiver is obsolete"	^self soleInstance == nil "Either no thisClass"		or:[self soleInstance classSide ~~ self "or I am not the class of thisClass"			or:[self soleInstance isObsolete]] "or my instance is obsolete"! !!Trait method!assertConsistantCompositionsForNew: aTraitComposition	"Applying or modifying a trait composition on the class side	of a behavior has some restrictions."	| baseTraits notAddable message |	baseTraits := aTraitComposition traits select: [:each | each isBaseTrait].	baseTraits isEmpty ifFalse: [		notAddable := (baseTraits reject: [:each | each classSide methodDict isEmpty]).		notAddable isEmpty ifFalse: [			message := String streamContents: [:stream |				stream nextPutAll: 'You can not add the base trait(s)'; cr.				notAddable					do: [:each | stream nextPutAll: each name]					separatedBy: [ stream nextPutAll: ', '].				stream cr; nextPutAll: 'to this composition because it/they define(s) methods on the class side.'].		^TraitCompositionException signal: message]].			(self instanceSide traitComposition traits asSet =			(aTraitComposition traits				select: [:each | each isClassTrait]				thenCollect: [:each | each baseTrait]) asSet) ifFalse: [				^TraitCompositionException signal: 'You can not add or remove class side traits on				the class side of a composition. (But you can specify aliases or exclusions				for existing traits or add a trait which does not have any methods on the class side.)']! !!Trait method!acceptsLoggingOfCompilation	"Answer whether the receiver's method submisions and class defintions should be logged to the changes file and to the current change set.  The metaclass follows the rule of the class itself."	^ self theNonMetaClass acceptsLoggingOfCompilation! !!Trait method!wantsRecompilationProgressReported	"The metaclass follows the rule of the class itself."	^ self theNonMetaClass wantsRecompilationProgressReported! !!Trait method!obsoleteSubclasses	"Answer the receiver's subclasses."	self theNonMetaClass == nil ifTrue:[^#()].	^self theNonMetaClass obsoleteSubclasses 		select:[:aSubclass| aSubclass isMeta not] 		thenCollect:[:aSubclass| aSubclass class]	"Metaclass allInstancesDo:		[:m | Compiler evaluate: 'subclasses:=nil' for: m logged: false]"! !!Trait method!hasClassSide	^false! !!Trait method!classVarNames	"Answer a set of the names of the class variables defined in the receiver's instance."		self theNonMetaClass ifNil: [ ^ Set new ].	^self theNonMetaClass classVarNames! !!Trait method!category	^ self theNonMetaClass category! !!Trait method!isAnonymous	^self soleInstance isAnonymous ! !!Trait method!binding	"return an association that can be used as the binding	 To share it between methods, reuse an existing one if possible"	^self methodDict 		ifEmpty: [nil -> self]		ifNotEmpty: [:dict | dict anyOne classBinding]! !!Trait method!initializeFrom: anotherClassTrait	self traitComposition: self traitComposition copyTraitExpression.	self methodDict: self methodDict copy.	self localSelectors: self localSelectors copy.	self basicOrganization: self organization copy.! !